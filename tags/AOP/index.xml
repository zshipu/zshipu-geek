<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AOP on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/AOP/</link>
    <description>Recent content in AOP on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Mar 2024 12:10:00 +0000</lastBuildDate>
    <atom:link href="https://geek.zshipu.com/tags/AOP/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring-Aop如何生效</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/AOP/Spring-Aop%E5%A6%82%E4%BD%95%E7%94%9F%E6%95%88/</link>
      <pubDate>Wed, 06 Mar 2024 12:10:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/AOP/Spring-Aop%E5%A6%82%E4%BD%95%E7%94%9F%E6%95%88/</guid>
      <description>Spring AOP 如何生效 Author: HuiFer 源码阅读仓库: SourceHot-Spring 解析 在使用 Spring AOP 技术的时候会有下面这段代码在 xml 配置文件中出现,来达到 Spring 支持 AOP 1 &amp;lt;aop:aspectj-autoproxy/&amp;gt; 源码阅读目标找到了,那么怎么去找入口或者对这句话的标签解析方法呢?项目中使用搜索 这样就找到了具体解析方法了 org.springframework.aop.config.AspectJAutoProxyBeanDefinitionParser 类图 1 2 3 4 5 6 7 8 9 @Override @Nullable public BeanDefinition parse(Element element, ParserContext parserContext) { // 注册 &amp;lt;aop:aspectj-autoproxy/&amp;gt; AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext, element); // 子类解析</description>
    </item>
    <item>
      <title>JDK动态代理的实现原理解析</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/AOP/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 06 Mar 2024 12:09:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/AOP/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</guid>
      <description>最近在看 Spring AOP 部分的源码，所以对 JDK 动态代理具体是如何实现的这件事产生了很高的兴趣，而且能从源码上了解这个原理的话，也有助于对 spring-aop 模块的理解。话不多说，上代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63</description>
    </item>
    <item>
      <title>AOP源码实现及分析</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/AOP/AOP%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 06 Mar 2024 12:08:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/AOP/AOP%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%88%86%E6%9E%90/</guid>
      <description>理论性的文字，我觉得就没必要再扯一遍咯，大道理讲这么多，越听越迷糊。不如直接看源码加注释来的明白痛快。所以话不多说，直接上源码。 1 主要的接口 1.1 Advice 通知 本接口定义了切面的增强方式，如：前置增强 BeforeAdvice，后置增强 AfterAdvice，异常增强 ThrowsAdvice 等。下面看两个主要的子接</description>
    </item>
  </channel>
</rss>
