<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>collection on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/collection/</link>
    <description>Recent content in collection on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Mar 2024 10:58:00 +0000</lastBuildDate>
    <atom:link href="https://geek.zshipu.com/tags/collection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TreeSet</title>
      <link>https://geek.zshipu.com/post/code/docs/JDK/collection/TreeSet/</link>
      <pubDate>Wed, 06 Mar 2024 10:58:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/JDK/collection/TreeSet/</guid>
      <description>TreeSet 是 Java 中实现有序集合的一个类，它基于红黑树实现，可以保证集合中的元素按照自然顺序或自定义顺序排序。在本文中，我们将详细介绍 TreeSet 的实现原理，并结合源码和示例代码进行解释。 TreeSet 的底层数据结构 TreeSet 的底层数据结构是红黑树，红黑树是一种自平衡二叉搜索树，它可以保证在插入、删除和查找元素时，时间复</description>
    </item>
    <item>
      <title>LinkedList</title>
      <link>https://geek.zshipu.com/post/code/docs/JDK/collection/LinkedList/</link>
      <pubDate>Wed, 06 Mar 2024 10:57:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/JDK/collection/LinkedList/</guid>
      <description>LinkedList LinkedList 是 Java 中实现双向链表的一个类，它实现了 List 接口和 Deque 接口。LinkedList 可以用作栈、队列和双端队列。在本文中，我们将详细介绍 LinkedList 的实现原理，并结合源码和示例代码进行解释。 LinkedList 的结点 LinkedList 的结点是一个静态内部类 Node，它包含三个属性：item 表示结点存储的元素，next 表示下一个结点</description>
    </item>
    <item>
      <title>LinkedHashMap</title>
      <link>https://geek.zshipu.com/post/code/docs/JDK/collection/LinkedHashMap/</link>
      <pubDate>Wed, 06 Mar 2024 10:56:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/JDK/collection/LinkedHashMap/</guid>
      <description>HashMap 大家都清楚，底层是 数组 + (链表 / 红黑树)，元素是无序的，而 LinkedHashMap 则比 HashMap 多了这一个功能，并且，LinkedHashMap 的有序可以按两种顺序排列，一种是按照插入的顺序，一种是按照访问的顺序（初始化 LinkedHashMap 对象时设置 accessOrder 参数为 true），而其内部是靠 建立一个双向链表 来维护这个顺序的，在每次插入</description>
    </item>
    <item>
      <title>HashSet</title>
      <link>https://geek.zshipu.com/post/code/docs/JDK/collection/HashSet/</link>
      <pubDate>Wed, 06 Mar 2024 10:55:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/JDK/collection/HashSet/</guid>
      <description>HashSet 本身并没有什么特别的东西，它提供的所有集合核心功能，都是基于 HashMap 来实现的。如果了解 HashMap 源码的实现，HashSet 源码看起来跟玩一样。我的博客中有专门分析 HashMap 源码的文章，不熟悉的请自行翻阅。 HashSet 的特点如下： 内部使用 HashMap 的 key 存储元素，以此来保证元素不重复； HashSet 是无序的，因为 HashMap 的 key 是无序的； HashSet 中</description>
    </item>
    <item>
      <title>HashMap</title>
      <link>https://geek.zshipu.com/post/code/docs/JDK/collection/HashMap/</link>
      <pubDate>Wed, 06 Mar 2024 10:54:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/JDK/collection/HashMap/</guid>
      <description>作为工作中最重要、最常用的容器之一，当然还是要自己动手写一篇 HashMap 的源码解析来加深对其的印象咯，而且它的设计与实现 也有很多值得学习的地方。 源码赏析 JDK1.8 的 HashMap 底层使用的是 动态数组，数组中元素存放的是 链表或红黑树。核心源码如下。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32</description>
    </item>
    <item>
      <title>ConcurrentHashMap</title>
      <link>https://geek.zshipu.com/post/code/docs/JDK/collection/ConcurrentHashMap/</link>
      <pubDate>Wed, 06 Mar 2024 10:53:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/JDK/collection/ConcurrentHashMap/</guid>
      <description>HashMap 源码中主要了解其核心源码及实现逻辑。ConcurrentHashMap 就不再重复那些数据结构相关的内容咯，这里重点看一下它的并发安全实现。源码如下。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65</description>
    </item>
    <item>
      <title>ArrayList</title>
      <link>https://geek.zshipu.com/post/code/docs/JDK/collection/ArrayList/</link>
      <pubDate>Wed, 06 Mar 2024 10:52:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/JDK/collection/ArrayList/</guid>
      <description>一文直接带你吃透 ArrayList ArrayList 是日常开发中相当常见、面试也相当常考的一种 JDK 集合类，了解并熟悉、甚至能实现一个 ArrayList 对面试、提升自己编码功底大有益处。 一、写给小白 ArrayList 简单使用技巧 这部分是 ArrayList 的简单使用技巧，主要是介绍 ArrayList 的几个常见方法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /**</description>
    </item>
  </channel>
</rss>
