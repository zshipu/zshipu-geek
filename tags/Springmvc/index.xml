<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpringMVC on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/SpringMVC/</link>
    <description>Recent content in SpringMVC on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Mar 2024 12:24:00 +0000</lastBuildDate>
    <atom:link href="https://geek.zshipu.com/tags/SpringMVC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>温习一下servlet</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/SpringMVC/%E6%B8%A9%E4%B9%A0%E4%B8%80%E4%B8%8Bservlet/</link>
      <pubDate>Wed, 06 Mar 2024 12:24:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/SpringMVC/%E6%B8%A9%E4%B9%A0%E4%B8%80%E4%B8%8Bservlet/</guid>
      <description>Servlet 温习 Servlet 是 Java 平台上用于扩展基于请求-响应模式的 Web 应用程序功能的一种技术。在这篇博客中，我们将温习一下 Servlet 的基本概念和使用方法。 1. Servlet 的基本概念 Servlet 是 Java 平台上运行的一个小程序，它可以接收和响应来自客户端的请求，并向客户端发送响应。Servlet 容器（如 Tomcat）负责管理 Servlet 的生命周期，</description>
    </item>
    <item>
      <title>SpringMVC的设计与实现</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/SpringMVC/SpringMVC%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 06 Mar 2024 12:23:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/SpringMVC/SpringMVC%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>1 SpringMVC 应用场景 在使用 SpringMVC 时，除了要在 web.xml 中配置 ContextLoaderListener 外，还要对 DispatcherServlet 进行配置。作为一个 Servlet，这个 DispatcherServlet 实现的是 Sun 的 J2EE 核心模式 中的 前端控制器模式(Front Controller)， 作为一个前端控制器，所有的 Web 请求 都需要通过它来进行转发、匹配、数据处理，然后转由页面进行展现，因此这个 DispatcerServlet 可以看</description>
    </item>
    <item>
      <title>SpringMVC-CROS</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/SpringMVC/SpringMVC-CROS/</link>
      <pubDate>Wed, 06 Mar 2024 12:22:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/SpringMVC/SpringMVC-CROS/</guid>
      <description>Spring-MVC 跨域 CrossOrigin 注解 通过注解设置跨域 demo 如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package com.huifer.source.controller; import org.springframework.web.bind.annotation.*; import java.util.HashMap; @CrossOrigin(maxAge = 3600) @RequestMapping(&amp;#34;/&amp;#34;) @RestController public class JSONController { @ResponseBody @GetMapping(value = &amp;#34;/json&amp;#34;) public Object ob() { HashMap&amp;lt;String, String&amp;gt; hashMap = new HashMap&amp;lt;&amp;gt;(); hashMap.put(&amp;#34;1&amp;#34;, &amp;#34;a&amp;#34;); return hashMap; } } 切入点: org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#registerHandlerMethod org.springframework.web.servlet.handler.AbstractHandlerMethodMapp</description>
    </item>
    <item>
      <title>IoC容器在Web环境中的启动</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/SpringMVC/IoC%E5%AE%B9%E5%99%A8%E5%9C%A8Web%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Wed, 06 Mar 2024 12:21:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/SpringMVC/IoC%E5%AE%B9%E5%99%A8%E5%9C%A8Web%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%90%AF%E5%8A%A8/</guid>
      <description>1 Web 环境中的 SpringMVC 在 Web 环境 中，SpringMVC 是建立在 IoC 容器 基础上的。了解 SpringMVC，首先要了解 Spring 的 IoC 容器 是如何在 Web 环境 中被载入并起作用的。 Spring 的 IoC 是一个独立模块，它并不直接在 Web 容器 中发挥作用，如果要在 Web 环境 中使用 IoC 容器，需要 Spring 为 IoC 设计一个启动过程，把 IoC 容器 导入，并在 Web 容器 中</description>
    </item>
  </channel>
</rss>
