<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpringTransaction on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/SpringTransaction/</link>
    <description>Recent content in SpringTransaction on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Mar 2024 12:28:00 +0000</lastBuildDate>
    <atom:link href="https://geek.zshipu.com/tags/SpringTransaction/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring声明式事务处理</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/SpringTransaction/Spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 06 Mar 2024 12:28:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/SpringTransaction/Spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</guid>
      <description>1 设计原理与基本过程 在使用 Spring 声明式事务处理 的时候，一种常用的方法是结合 IoC 容器 和 Spring 已有的 TransactionProxyFactoryBean 对事务管理进行配置，比如，可以在这个 TransactionProxyFactoryBean 中为事务方法配置传播行为、并发事务隔离级别等事务处理属性，从而对声明式事务的处理提供指导。具体来说，在对声明式事务处理的原理分析中，声明式事务处理的实现大</description>
    </item>
    <item>
      <title>Spring事务管理器的设计与实现</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/SpringTransaction/Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 06 Mar 2024 12:27:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/SpringTransaction/Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>1 Spring 事务处理的应用场景 下面，我们以 DataSourceTransactionManager 事务管理器 为例，看一下在具体的事务管理器中如何实现事务创建、提交和回滚这些底层的事务处理操作。DataSourceTransationManager 和其他事务管理器一样，如 JtaTransactionManager，JpaTransaction</description>
    </item>
    <item>
      <title>Spring事务处理的设计与实现</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/SpringTransaction/Spring%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 06 Mar 2024 12:26:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/SpringTransaction/Spring%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>1 事务处理的编程式使用 1 2 3 4 5 6 7 8 9 10 11 TransactionDefinition td = new DefaultTransactionDefinition(); // transactionManager 是某一个具体的 PlatformTransactionManager实现类 的对象 TransactionStatus ts = transactionManager.getTransaction(td); try { // 这里是需要进行事务处理的方法调用 } catch (Exception e) { transactionManager.rollback(ts); throw e; } transactionManager.commit(ts); 在使用编程式事务处理的过程中，利用 DefaultTransactionDefinition 对象 来持有事务处理属性。同时，在创建事务的</description>
    </item>
    <item>
      <title>Spring与事务处理</title>
      <link>https://geek.zshipu.com/post/code/docs/Spring/SpringTransaction/Spring%E4%B8%8E%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 06 Mar 2024 12:25:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Spring/SpringTransaction/Spring%E4%B8%8E%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</guid>
      <description>JavaEE 应用中的事务处理是一个重要并且涉及范围很广的领域。事务管理的实现往往涉及并发和数据一致性方面的问题。作为应用平台的 Spring，具有在多种环境中配置和使用事务处理的能力，也就是说通过使用 Spring 的事务组件，可以把事务处理的工作统一起来，并为事务处理提供通用的支持。 在涉及单个数据库局部</description>
    </item>
  </channel>
</rss>
