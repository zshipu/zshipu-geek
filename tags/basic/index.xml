<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>basic on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/basic/</link>
    <description>Recent content in basic on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Mar 2024 10:51:00 +0000</lastBuildDate>
    <atom:link href="https://geek.zshipu.com/tags/basic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ThreadLocal</title>
      <link>https://geek.zshipu.com/post/code/docs/JDK/basic/ThreadLocal/</link>
      <pubDate>Wed, 06 Mar 2024 10:51:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/JDK/basic/ThreadLocal/</guid>
      <description>前面我们分析了 Thread 类的源码，有了前面的铺垫，通过源码 理解 ThreadLocal 的秘密就容易多了。 ThreadLocal 类 提供了 get/set 线程局部变量的实现，ThreadLocal 成员变量与正常的成员变量不同，每个线程都可以通过 ThreadLocal 成员变量 get/set 自己的专属值。ThreadLocal 实例 通常是类中的私有静态变量，常用于将状态与线程关联，例</description>
    </item>
    <item>
      <title>Thread</title>
      <link>https://geek.zshipu.com/post/code/docs/JDK/basic/Thread/</link>
      <pubDate>Wed, 06 Mar 2024 10:50:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/JDK/basic/Thread/</guid>
      <description>本来想看 ThreadLocal 的源码的，但发现其中最重要的 get/set 方法都是操纵的 Thread 类 中的 threadLocals 变量 (java.lang.ThreadLocal.ThreadLocalMap)，索性先来看一下 Thread 的源码吧，可以留意一下其中与 ThreadLocal 相关的属性，这样下次阅读 ThreadLocal 的核心 API 时，就能够轻易理解其原理咯。不多 BB，直接上硬菜。 实现</description>
    </item>
    <item>
      <title>String</title>
      <link>https://geek.zshipu.com/post/code/docs/JDK/basic/String/</link>
      <pubDate>Wed, 06 Mar 2024 10:49:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/JDK/basic/String/</guid>
      <description>String 的源码大家应该都能看懂，这里就不一一分析咯，重点讲一下 equals()和 hashcode()方法，然后看一下 String 类常用方法的实现，就当一起温习一下咯。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65</description>
    </item>
  </channel>
</rss>
