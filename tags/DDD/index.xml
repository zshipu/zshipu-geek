<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DDD on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/DDD/</link>
    <description>Recent content in DDD on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 23 Apr 2022 15:16:05 +0800</lastBuildDate>
    <atom:link href="https://geek.zshipu.com/tags/DDD/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DDD-十、通过预定作业的最终一致性</title>
      <link>https://geek.zshipu.com/post/DDD/DDD-%E5%8D%81%E9%80%9A%E8%BF%87%E9%A2%84%E5%AE%9A%E4%BD%9C%E4%B8%9A%E7%9A%84%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Sat, 23 Apr 2022 15:16:05 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD-%E5%8D%81%E9%80%9A%E8%BF%87%E9%A2%84%E5%AE%9A%E4%BD%9C%E4%B8%9A%E7%9A%84%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>如何从单个域事件处理程序失败或整个系统在事务提交后但在所有域事件处理程序处理事件之前崩溃的情况中恢复。 与软件中的大多数（如果不是全部？）问题一样，这里没有万能的解决方案。相反，您必须找到最能满足您的特定系统要求的解决方案。在这篇博文中，我们将研究一种保证最终一致性的简单（ish）</description>
    </item>
    <item>
      <title>DDD-九、使用 Spring Data 发布领域事件</title>
      <link>https://geek.zshipu.com/post/DDD/DDD-%E4%B9%9D%E4%BD%BF%E7%94%A8-Spring-%E5%A4%84%E7%90%86%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sat, 23 Apr 2022 15:14:15 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD-%E4%B9%9D%E4%BD%BF%E7%94%A8-Spring-%E5%A4%84%E7%90%86%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/</guid>
      <description>从 Spring 的角度来看，域事件只是另一个应用程序事件，可以使用内置的ApplicationEventPublisher. 换句话说，我们不需要担心构建事件总线或其他一些基础设施来发布域事件：您将事件发布者注入到您的域服务中并发布事件。但是，在大多数情况下，您希望直接从聚合中发布域事件，而不</description>
    </item>
    <item>
      <title>DDD-八、使用 Spring 处理领域事件</title>
      <link>https://geek.zshipu.com/post/DDD/DDD-%E5%85%AB%E4%BD%BF%E7%94%A8-Spring-Data-%E5%8F%91%E5%B8%83%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sat, 23 Apr 2022 15:14:05 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD-%E5%85%AB%E4%BD%BF%E7%94%A8-Spring-Data-%E5%8F%91%E5%B8%83%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/</guid>
      <description>Spring Data 使用标准发布域事件ApplicationEventPublisher。这意味着我们也可以使用标准的 Spring 方式处理事件，@EventListener所以让我们先来看看。 处理事件@EventListener 使用的域事件处理程序（我有时也使用术语域事件侦听器 - 它们的意思相同）@Even</description>
    </item>
    <item>
      <title>DDD-七、在 Hibernate 中使用值对象作为聚合标识符</title>
      <link>https://geek.zshipu.com/post/DDD/DDD-%E4%B8%83%E5%9C%A8-Hibernate-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%80%BC%E5%AF%B9%E8%B1%A1%E4%BD%9C%E4%B8%BA%E8%81%9A%E5%90%88%E6%A0%87%E8%AF%86%E7%AC%A6/</link>
      <pubDate>Sat, 23 Apr 2022 15:13:05 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD-%E4%B8%83%E5%9C%A8-Hibernate-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%80%BC%E5%AF%B9%E8%B1%A1%E4%BD%9C%E4%B8%BA%E8%81%9A%E5%90%88%E6%A0%87%E8%AF%86%E7%AC%A6/</guid>
      <description>如果您使用的是除 Hibernate 之外的其他 JPA 实现，则必须查看该实现的文档以了解如何创建自定义类型。 属性转换器不会做 第一个想法可能是使用简单的值对象和属性转换器。不幸的是，这是不可能的，因为 JPA 不支持对@Id字段使用属性转换器。您可以做出妥协并为您的@Id字段和简单的值对象使用“原始”ID 以从其他</description>
    </item>
    <item>
      <title>DDD-六、使用 Spring Data 构建存储库</title>
      <link>https://geek.zshipu.com/post/DDD/DDD-%E5%85%AD%E4%BD%BF%E7%94%A8-Spring-Data-%E6%9E%84%E5%BB%BA%E5%AD%98%E5%82%A8%E5%BA%93/</link>
      <pubDate>Sat, 23 Apr 2022 15:12:05 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD-%E5%85%AD%E4%BD%BF%E7%94%A8-Spring-Data-%E6%9E%84%E5%BB%BA%E5%AD%98%E5%82%A8%E5%BA%93/</guid>
      <description>使用 Spring Data 构建存储库非常容易。您需要做的就是声明您的存储库接口并让它扩展 Spring Data 接口JpaRepository。但是，这也很容易意外地为本地实体创建存储库（如果您的开发人员不熟悉 DDD 但熟悉 JPA，则可能会发生这种情况）。因此，我总是像这样声明自己的基础存储库接口： @NoRepositoryBean // &amp;lt;1&amp;gt; public interface BaseRepository&amp;lt;Aggregate extends BaseAggregateRoot&amp;lt;ID&amp;gt;, ID extends Serializable&amp;gt; //</description>
    </item>
    <item>
      <title>DDD-五、使用 Spring Data 构建聚合</title>
      <link>https://geek.zshipu.com/post/DDD/DDD-%E4%BA%94%E4%BD%BF%E7%94%A8-Spring-Data-%E6%9E%84%E5%BB%BA%E8%81%9A%E5%90%88/</link>
      <pubDate>Sat, 23 Apr 2022 15:11:05 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD-%E4%BA%94%E4%BD%BF%E7%94%A8-Spring-Data-%E6%9E%84%E5%BB%BA%E8%81%9A%E5%90%88/</guid>
      <description>JPA 有自己的@Entity概念，但远没有 DDD 中的实体概念那么严格。这既是优点也是缺点。优点是使用 JPA 实现实体和聚合非常容易。缺点是同样容易做 DDD 不允许的事情。如果您与以前广泛使用过 JPA 但不熟悉 DDD 的开发人员一起工作，这可能会特别成问题。 而值对象只是实现了一个空的标记接口，实体和聚合根将需要更</description>
    </item>
    <item>
      <title>DDD-四、在 JPA 中使用值对象</title>
      <link>https://geek.zshipu.com/post/DDD/DDD-%E5%9B%9B%E5%9C%A8-JPA-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%80%BC%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 23 Apr 2022 15:09:05 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD-%E5%9B%9B%E5%9C%A8-JPA-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%80%BC%E5%AF%B9%E8%B1%A1/</guid>
      <description>在战术设计中，我们了解了值对象是什么以及它有什么用处。我们从未真正研究过如何在实际项目中使用它。现在是时候卷起袖子，仔细看看一些实际的代码了！ 值对象是领域驱动设计中最简单和最有用的构建块之一，因此让我们从了解在 JPA 中使用值对象的不同方式开始。为此，我们将从 XML Schema 规范中窃取简单类型和复</description>
    </item>
    <item>
      <title>DDD-三、领域驱动设计和六边形架构</title>
      <link>https://geek.zshipu.com/post/DDD/DDD-%E4%B8%89%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sat, 23 Apr 2022 15:08:05 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD-%E4%B8%89%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/</guid>
      <description>在前两篇文章中，我们了解了战略和战术领域驱动设计。现在是学习如何将领域模型转化为工作软件的时候了——更具体地说，是如何使用六边形架构来实现。 尽管代码示例是用 Java 编写的，但前两篇文章非常通用。虽然本文中的很多理论也可以应用到其他环境和语言中，但我在编写时明确考虑了 Java 和 Vaadin。 同</description>
    </item>
    <item>
      <title>DDD-二、战术领域驱动设计</title>
      <link>https://geek.zshipu.com/post/DDD/DDD-%E4%BA%8C%E6%88%98%E6%9C%AF%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 23 Apr 2022 14:53:28 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD-%E4%BA%8C%E6%88%98%E6%9C%AF%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>与战略领域驱动设计相比，战术设计更加亲力亲为，更接近实际代码。战略设计处理抽象的整体，而战术设计处理类和模块。战术设计的目的是将域模型细化到可以转换为工作代码的阶段。 设计是一个迭代过程，因此将战略设计和战术设计结合起来是有意义的。你从战略设计开始，然后是战术设计。最大的领域模型设</description>
    </item>
    <item>
      <title>DDD-一、战略领域驱动设计</title>
      <link>https://geek.zshipu.com/post/DDD/DDD-%E4%B8%80%E6%88%98%E7%95%A5%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 23 Apr 2022 14:36:17 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD-%E4%B8%80%E6%88%98%E7%95%A5%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>领域驱动设计(DDD) 自_Eric Evans_于 2003 年出版他的有关该主题的书以来就一直存在。几年前，当我加入一个遭受数据一致性问题困扰的项目时，我自己就接触了 DDD。重复出现在数据库中，一些信息根本没有保存，你可能随时随地遇到乐观锁定错误。我们设法通过使用战术领域驱动设计的构建块来</description>
    </item>
    <item>
      <title>DDD实战：20 总结（二）：分布式架构关键设计10问</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9820-%E6%80%BB%E7%BB%93%E4%BA%8C%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E5%85%B3%E9%94%AE%E8%AE%BE%E8%AE%A110%E9%97%AE/</link>
      <pubDate>Tue, 22 Mar 2022 17:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9820-%E6%80%BB%E7%BB%93%E4%BA%8C%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E5%85%B3%E9%94%AE%E8%AE%BE%E8%AE%A110%E9%97%AE/</guid>
      <description>前面我们重点讲述了领域建模、微服务设计和前端设计方法，它们组合在一起就可以形成中台建设的整体解决方案。而中台大多基于分布式微服务架构，这种企业级的数字化转型有很多地方值得我们关注和思考。 我们不仅要关注企业商业模式、业务边界以及前中台的融合，还要关注数据技术体系、微服务设计、多活等</description>
    </item>
    <item>
      <title>DDD实战：19 总结（一）：微服务设计和拆分要坚持哪些原则</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9819-%E6%80%BB%E7%BB%93%E4%B8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8B%86%E5%88%86%E8%A6%81%E5%9D%9A%E6%8C%81%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99/</link>
      <pubDate>Tue, 22 Mar 2022 16:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9819-%E6%80%BB%E7%BB%93%E4%B8%80%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8B%86%E5%88%86%E8%A6%81%E5%9D%9A%E6%8C%81%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99/</guid>
      <description>我们前面已经讲了很多 DDD 的设计方法和实践案例。虽然 DDD 的设计思想和方法很好，但由于企业发展历程以及企业技术和文化的不同，DDD 和微服务的实施策略也会有差异。那么面对这种差异，我们应该如何落地 DDD 和微服务呢？今天我们就来聊聊微服务的设计原则和演进策略。 微服务的演进策略 在从单体向微服务演进</description>
    </item>
    <item>
      <title>DDD实战：18 知识点串讲：基于DDD的微服务设计实例</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9818-%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%B2%E8%AE%B2%E5%9F%BA%E4%BA%8EDDD%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Tue, 22 Mar 2022 15:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9818-%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%B2%E8%AE%B2%E5%9F%BA%E4%BA%8EDDD%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%AE%9E%E4%BE%8B/</guid>
      <description>为了更好地理解 DDD 的设计流程，今天我会用一个项目来带你了解 DDD 的战略设计和战术设计，走一遍从领域建模到微服务设计的全过程，一起掌握 DDD 的主要设计流程和关键点。 项目基本信息 项目的目标是实现在线请假和考勤管理。功能描述如下： 请假人填写请假单提交审批，根据请假人身份、请假类型和请假天数进行校</description>
    </item>
    <item>
      <title>DDD实战：17 从后端到前端：微服务后，前端如何设计</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9817-%E4%BB%8E%E5%90%8E%E7%AB%AF%E5%88%B0%E5%89%8D%E7%AB%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%90%8E%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 22 Mar 2022 14:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9817-%E4%BB%8E%E5%90%8E%E7%AB%AF%E5%88%B0%E5%89%8D%E7%AB%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%90%8E%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</guid>
      <description>微服务架构通常采用前后端分离的设计方式。作为企业级的中台，在完成单体应用拆分和微服务建设后，前端项目团队会同时面对多个中台微服务项目团队，这时候的前端人员就犹如维修电工一样了。 面对如此多的微服务暴露出来的 API 服务，如何进行正确的连接和拼装，才能保证不出错？这显然不是一件很容易的事情</description>
    </item>
    <item>
      <title>DDD实战：16 视图：如何实现服务和数据在微服务各层的协作</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9816-%E8%A7%86%E5%9B%BE%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%92%8C%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%90%84%E5%B1%82%E7%9A%84%E5%8D%8F%E4%BD%9C/</link>
      <pubDate>Tue, 22 Mar 2022 13:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9816-%E8%A7%86%E5%9B%BE%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%92%8C%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%90%84%E5%B1%82%E7%9A%84%E5%8D%8F%E4%BD%9C/</guid>
      <description>在 DDD 分层架构和微服务代码模型里，我们根据领域对象的属性和依赖关系，将领域对象进行分层，定义了与之对应的代码对象和代码目录结构。分层架构确定了微服务的总体架构，微服务内的主要对象有服务和实体等，它们一起协作完成业务逻辑。 那在运行过程中，这些服务和实体在微服务各层是如何协作的呢？今天</description>
    </item>
    <item>
      <title>DDD实战：15 边界：微服务的各种边界在架构演进中的作用</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9815-%E8%BE%B9%E7%95%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%90%84%E7%A7%8D%E8%BE%B9%E7%95%8C%E5%9C%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Sun, 20 Mar 2022 13:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9815-%E8%BE%B9%E7%95%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%90%84%E7%A7%8D%E8%BE%B9%E7%95%8C%E5%9C%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>前几讲我们已经介绍过了，在用 DDD 进行微服务设计时，我们可以通过事件风暴来确定领域模型边界，划定微服务边界，定义业务和系统运行边界，从而保证微服务的单一职责和随需而变的架构演进能力。 那重点落到边界的时候，总结一下就是，微服务的设计要涉及到逻辑边界、物理边界和代码边界等等。 那么这些边界</description>
    </item>
    <item>
      <title>DDD实战：‎使用事件风暴和域驱动设计对反应式系统进行建模‎</title>
      <link>https://geek.zshipu.com/post/DDDxx/%E4%BD%BF%E7%94%A8%E4%BA%8B%E4%BB%B6%E9%A3%8E%E6%9A%B4%E5%92%8C%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AF%B9%E5%8F%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%BF%9B%E8%A1%8C%E5%BB%BA%E6%A8%A1/</link>
      <pubDate>Sun, 20 Mar 2022 13:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/%E4%BD%BF%E7%94%A8%E4%BA%8B%E4%BB%B6%E9%A3%8E%E6%9A%B4%E5%92%8C%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AF%B9%E5%8F%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%BF%9B%E8%A1%8C%E5%BB%BA%E6%A8%A1/</guid>
      <description>一个成功的事件风暴会议——以及一个成功的软件项目——需要同等的艺术、知识和技术技能。此外，对便笺进行更改比对生产代码进行更改要便宜得多。通过编写代码来了解您的系统是理解和完善所涉及的业务流程的一种非常昂贵的方法。‎ ‎本文中的任何内容都不需要技术专业知识或以前使用反应式事件驱动系统</description>
    </item>
    <item>
      <title>DDD实战：14 代码模型（下）：如何保证领域模型与代码模型的一致性</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9814-%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9E%8B%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Sat, 19 Mar 2022 15:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9814-%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9E%8B%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>在 [第 12 讲] 中，我们了解了如何用事件风暴来构建领域模型，在构建领域模型的过程中，我们会提取出很多的领域对象，比如聚合、实体、命令和领域事件等。到了 [第 13 讲]，我们又根据 DDD 分层架构模型，建立了标准的微服务代码模型，为代码对象定义好了分层和目录结构。 那要想完成微服务的设计和落地，这之</description>
    </item>
    <item>
      <title>DDD实战：13 代码模型（上）：如何使用DDD设计微服务代码模型</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9813-%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9E%8B%E4%B8%8A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8DDD%E8%AE%BE%E8%AE%A1%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 19 Mar 2022 14:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9813-%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9E%8B%E4%B8%8A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8DDD%E8%AE%BE%E8%AE%A1%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9E%8B/</guid>
      <description>上一讲我们完成了领域模型的设计，接下来我们就要开始微服务的设计和落地了。那微服务落地时首先要确定的就是微服务的代码结构，也就是我今天要讲的微服务代码模型。 只有建立了标准的微服务代码模型和代码规范后，我们才可以将领域对象所对应的代码对象放在合适的软件包的目录结构中。标准的代码模型可</description>
    </item>
    <item>
      <title>DDD实战：12 领域建模：如何用事件风暴构建领域模型</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9812-%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1%E5%A6%82%E4%BD%95%E7%94%A8%E4%BA%8B%E4%BB%B6%E9%A3%8E%E6%9A%B4%E6%9E%84%E5%BB%BA%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 19 Mar 2022 13:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9812-%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1%E5%A6%82%E4%BD%95%E7%94%A8%E4%BA%8B%E4%BB%B6%E9%A3%8E%E6%9A%B4%E6%9E%84%E5%BB%BA%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/</guid>
      <description>还记得我在 [第 01 讲] 中说过，微服务设计为什么要选择 DDD 吗？其中有一个非常重要的原因，就是采用 DDD 方法建立的领域模型，可以清晰地划分微服务的逻辑边界和物理边界。可以说，在 DDD 的实践中，好的领域模型直接关乎微服务的设计水平。因此，我认为 DDD 的战略设计是比战术设计更为重要的，也正是这个原因，我</description>
    </item>
    <item>
      <title>有赞领域建模在有赞客户领域的实践</title>
      <link>https://geek.zshipu.com/post/%E4%BA%92%E8%81%94%E7%BD%91/%E6%9C%89%E8%B5%9E%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1%E5%9C%A8%E6%9C%89%E8%B5%9E%E5%AE%A2%E6%88%B7%E9%A2%86%E5%9F%9F%E7%9A%84%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 15 Mar 2022 10:33:57 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/%E4%BA%92%E8%81%94%E7%BD%91/%E6%9C%89%E8%B5%9E%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1%E5%9C%A8%E6%9C%89%E8%B5%9E%E5%AE%A2%E6%88%B7%E9%A2%86%E5%9F%9F%E7%9A%84%E5%AE%9E%E8%B7%B5/</guid>
      <description>作者：Joker 部门：有赞美业 一、What&amp;rsquo;s DDD? 从定义入手： DDD全称Domain-Driven Design，即领域驱动设计，由Eric Evans于2003年提出。那既然是一种设计方法，ddd的作用对象是什么呢？这个问题光从定义是看不出来的，我们再往下看看。 换一个更高</description>
    </item>
    <item>
      <title>网易严选在严选供应链复杂业务系统的落地实践</title>
      <link>https://geek.zshipu.com/post/%E4%BA%92%E8%81%94%E7%BD%91/%E7%BD%91%E6%98%93%E4%B8%A5%E9%80%89%E5%9C%A8%E4%B8%A5%E9%80%89%E4%BE%9B%E5%BA%94%E9%93%BE%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 15 Mar 2022 09:17:34 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/%E4%BA%92%E8%81%94%E7%BD%91/%E7%BD%91%E6%98%93%E4%B8%A5%E9%80%89%E5%9C%A8%E4%B8%A5%E9%80%89%E4%BE%9B%E5%BA%94%E9%93%BE%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/</guid>
      <description>复杂业务系统长期迭代，难免会逐渐腐化，如何治理腐化，并设计出能够延缓腐化，保持长期高效能的方案是一个开发同学难免要遇到的问题，本文旨在介绍一套基于DDD的落地实施方案，提供另外一种解决问题的思路。 系统背景 Teddy出入库系统，是进销存概念里的进和销，核心能力是仓库货物的出库和入库</description>
    </item>
    <item>
      <title>如何设计一个复杂的业务系统实践</title>
      <link>https://geek.zshipu.com/post/%E4%BA%92%E8%81%94%E7%BD%91/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%A4%8D%E6%9D%82%E7%9A%84%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 15 Mar 2022 09:01:50 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/%E4%BA%92%E8%81%94%E7%BD%91/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%A4%8D%E6%9D%82%E7%9A%84%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%B7%B5/</guid>
      <description>作者 | 焦方飞 文章来源 | 阿里巴巴中间件团队 大年初一，看完中国队 1:3 越南队的比赛，在思考中国足球每况愈下的深层次原因之外，不禁回想起这几年做过的一些大型企业数字化转型项目，有得有失，最终回归到本源“如何设计和实施一个复杂软件工程”这个问题上，趁着春节长假，把自己的一些对架构设计思考和学</description>
    </item>
    <item>
      <title>DDD实战：10 DDD、中台和微服务：它们是如何协作的</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9810-DDD%E4%B8%AD%E5%8F%B0%E5%92%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%8D%8F%E4%BD%9C%E7%9A%84/</link>
      <pubDate>Mon, 14 Mar 2022 14:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9810-DDD%E4%B8%AD%E5%8F%B0%E5%92%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%83%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%8D%8F%E4%BD%9C%E7%9A%84/</guid>
      <description>DDD 和微服务来源于西方，而中台诞生于中国的阿里巴巴。DDD 在二十多年前提出后一直默默前行，中台和微服务的理念近几年才出现，提出后就非常火爆。这三者看似风马牛不相及，实则缘分匪浅。中台是抽象出来的业务模型，微服务是业务模型的系统实现，DDD 作为方法论可以同时指导中台业务建模和微服务建</description>
    </item>
    <item>
      <title>DDD实战：09 中台：数字转型后到底应该共享什么</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9809-%E4%B8%AD%E5%8F%B0%E6%95%B0%E5%AD%97%E8%BD%AC%E5%9E%8B%E5%90%8E%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E5%85%B1%E4%BA%AB%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 14 Mar 2022 13:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9809-%E4%B8%AD%E5%8F%B0%E6%95%B0%E5%AD%97%E8%BD%AC%E5%9E%8B%E5%90%8E%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E5%85%B1%E4%BA%AB%E4%BB%80%E4%B9%88/</guid>
      <description>在上一讲中我们了解了分层架构的设计思想，并提到了这种设计思想对中台建设十分有利，那么今天我就来讲一讲中台。 中台是数字化转型的一个热门话题。继阿里提出中台概念后，很多人又提出了各种各样的中台。今天我们主要讨论业务中台和数据中台。作为企业数字化中台转型的整体，我也会顺带聊一聊前台和后</description>
    </item>
    <item>
      <title>DDD实战：08 微服务架构模型：几种常见模型的对比和分析</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9808-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AF%B9%E6%AF%94%E5%92%8C%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 12 Mar 2022 13:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9808-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AF%B9%E6%AF%94%E5%92%8C%E5%88%86%E6%9E%90/</guid>
      <description>在上一讲中我重点介绍了 DDD 分层架构，同时我也提到了微服务架构模型其实还有好多种，不知道你注意到了没？这些架构模型在我们的实际应用中都具有很高的借鉴价值。 那么今天我们就把 DDD 分层架构（详情介绍如有遗忘可回看 [第 07 讲] ）、整洁架构、六边形架构这三种架构模型放到一起，对比分析，看看如何利用</description>
    </item>
    <item>
      <title>DDD实战：07 DDD分层架构：有效降低层与层之间的依赖</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9807-DDD%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84%E6%9C%89%E6%95%88%E9%99%8D%E4%BD%8E%E5%B1%82%E4%B8%8E%E5%B1%82%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96/</link>
      <pubDate>Fri, 11 Mar 2022 13:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9807-DDD%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84%E6%9C%89%E6%95%88%E9%99%8D%E4%BD%8E%E5%B1%82%E4%B8%8E%E5%B1%82%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96/</guid>
      <description>微服务架构模型有好多种，例如整洁架构、CQRS 和六边形架构等等。每种架构模式虽然提出的时代和背景不同，但其核心理念都是为了设计出“高内聚低耦合”的架构，轻松实现架构演进。而 DDD 分层架构的出现，使架构边界变得越来越清晰，它在微服务架构模型中，占有非常重要的位置。 那 DDD 分层架构到底长什么</description>
    </item>
    <item>
      <title>DDD实战：06 领域事件：解耦微服务的关键</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9806-%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6%E8%A7%A3%E8%80%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%B3%E9%94%AE/</link>
      <pubDate>Thu, 10 Mar 2022 13:27:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9806-%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6%E8%A7%A3%E8%80%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%B3%E9%94%AE/</guid>
      <description>在事件风暴（Event Storming）时，我们发现除了命令和操作等业务行为以外，还有一种非常重要的事件，这种事件发生后通常会导致进一步的业务操作，在 DDD 中这种事件被称为领域事件。 这只是最简单的定义，并不能让我们真正理解它。那到底什么是领域事件？领域事件的技术实现机制是怎样的？这一</description>
    </item>
    <item>
      <title>DDD实战：05 聚合和聚合根：怎样设计聚合</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9805-%E8%81%9A%E5%90%88%E5%92%8C%E8%81%9A%E5%90%88%E6%A0%B9%E6%80%8E%E6%A0%B7%E8%AE%BE%E8%AE%A1%E8%81%9A%E5%90%88/</link>
      <pubDate>Thu, 10 Mar 2022 13:26:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9805-%E8%81%9A%E5%90%88%E5%92%8C%E8%81%9A%E5%90%88%E6%A0%B9%E6%80%8E%E6%A0%B7%E8%AE%BE%E8%AE%A1%E8%81%9A%E5%90%88/</guid>
      <description>我们先回顾下上一讲，在事件风暴中，我们会根据一些业务操作和行为找出实体（Entity）或值对象（ValueObject），进而将业务关联紧密的实体和值对象进行组合，构成聚合，再根据业务语义将多个聚合划定到同一个限界上下文（Bounded Context）中，并在限界上下文内完成领域</description>
    </item>
    <item>
      <title>DDD实战：04 实体和值对象：从领域模型的基础单元看系统设计</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9804-%E5%AE%9E%E4%BD%93%E5%92%8C%E5%80%BC%E5%AF%B9%E8%B1%A1%E4%BB%8E%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E7%A1%80%E5%8D%95%E5%85%83%E7%9C%8B%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 10 Mar 2022 13:25:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9804-%E5%AE%9E%E4%BD%93%E5%92%8C%E5%80%BC%E5%AF%B9%E8%B1%A1%E4%BB%8E%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E7%A1%80%E5%8D%95%E5%85%83%E7%9C%8B%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>这两个概念都是领域模型中的领域对象。它们在领域模型中起什么作用，战术设计时如何将它们映射到代码和数据模型中去？就是我们这一讲重点要关注的问题。 另外，在战略设计向战术设计过渡的这个过程中，理解和区分实体和值对象在不同阶段的形态是很重要的，毕竟阶段不同，它们的形态也会发生变化，这与我</description>
    </item>
    <item>
      <title>DDD实战： 03 限界上下文：定义领域边界的利器</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9803-%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%AE%9A%E4%B9%89%E9%A2%86%E5%9F%9F%E8%BE%B9%E7%95%8C%E7%9A%84%E5%88%A9%E5%99%A8/</link>
      <pubDate>Thu, 10 Mar 2022 13:24:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9803-%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%AE%9A%E4%B9%89%E9%A2%86%E5%9F%9F%E8%BE%B9%E7%95%8C%E7%9A%84%E5%88%A9%E5%99%A8/</guid>
      <description>在 DDD 领域建模和系统建设过程中，有很多的参与者，包括领域专家、产品经理、项目经理、架构师、开发经理和测试经理等。 对同样的领域知识，不同的参与角色可能会有不同的理解，那大家交流起来就会有障碍，怎么办呢？因此，在 DDD 中就出现了“通用语言”和“限界上下文”这两个重要的概念。 什么是通用语言？</description>
    </item>
    <item>
      <title>DDD实战：02 领域、子域、核心域、通用域和支撑域</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9802-%E9%A2%86%E5%9F%9F%E5%AD%90%E5%9F%9F%E6%A0%B8%E5%BF%83%E5%9F%9F%E9%80%9A%E7%94%A8%E5%9F%9F%E5%92%8C%E6%94%AF%E6%92%91%E5%9F%9F/</link>
      <pubDate>Thu, 10 Mar 2022 13:23:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9802-%E9%A2%86%E5%9F%9F%E5%AD%90%E5%9F%9F%E6%A0%B8%E5%BF%83%E5%9F%9F%E9%80%9A%E7%94%A8%E5%9F%9F%E5%92%8C%E6%94%AF%E6%92%91%E5%9F%9F/</guid>
      <description>DDD 的知识体系提出了很多的名词，像：领域、子域、核心域、通用域、支撑域、限界上下文、聚合、聚合根、实体、值对象等等，非常多。这些名词，都是关键概念，但它们实在有些晦涩难懂，可能导致你还没开始实践 DDD 就打起了退堂鼓。因此，在基础篇中，我希望能带着你一起做好实践前的准备工作。 除此之外，我</description>
    </item>
    <item>
      <title>DDD实战：答疑：有关3个典型问题的讲解</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%98%E7%AD%94%E7%96%91%E6%9C%89%E5%85%B33%E4%B8%AA%E5%85%B8%E5%9E%8B%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Thu, 10 Mar 2022 13:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%98%E7%AD%94%E7%96%91%E6%9C%89%E5%85%B33%E4%B8%AA%E5%85%B8%E5%9E%8B%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B2%E8%A7%A3/</guid>
      <description>截至今天这一讲，我们的基础篇和进阶篇的内容就结束了。在这个过程中，我一直有关注大家提的问题。那在实战篇正式开始之前啊，我想针对 3 个比较典型的问题，做一个讲解，希望你也能同步思考，调动自己已学过的内容，这对我们后面实战篇的学习也是有一定帮助的。 问题 1：有关于领域可以划分为核心域、通</description>
    </item>
    <item>
      <title>DDD实战：01 领域驱动设计：微服务设计为什么要选择DDD</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9801-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%80%89%E6%8B%A9DDD/</link>
      <pubDate>Thu, 10 Mar 2022 12:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9801-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%80%89%E6%8B%A9DDD/</guid>
      <description>我们知道，微服务设计过程中往往会面临边界如何划定的问题，我经常看到项目团队为微服务到底应该拆多小而争得面红耳赤。不同的人会根据自己对微服务的理解而拆分出不同的微服务，于是大家各执一词，谁也说服不了谁，都觉得自己很有道理。 那在实际落地过程中，我也确实见过不少项目在面临这种微服务设计</description>
    </item>
    <item>
      <title>DDD实战：00 开篇词</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9800-%E5%BC%80%E7%AF%87%E8%AF%8D/</link>
      <pubDate>Thu, 10 Mar 2022 11:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD%E5%AE%9E%E6%88%9800-%E5%BC%80%E7%AF%87%E8%AF%8D/</guid>
      <description>目前热衷于采用领域驱动设计（DDD）实现中台业务建模，专注基于 DDD 的微服务设计和开发等。另外，我也正在深入探索传统企业中台数字化转型的技术和方法体系。很高兴在这个专栏和你见面！ 说起 DDD 的实践，那就不得不提微服务了。2015 年，我刚开始接触微服务，那时候和别人去介绍微服务的设计理念，接</description>
    </item>
    <item>
      <title>基于 DDD 的微服务设计和开发实战</title>
      <link>https://geek.zshipu.com/post/DDDxx/%E5%9F%BA%E4%BA%8E-DDD-%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/</link>
      <pubDate>Thu, 10 Mar 2022 10:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/%E5%9F%BA%E4%BA%8E-DDD-%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/</guid>
      <description>DDD 分层架构视图 DDD 分层架构包括：展现层、应用层、领域层和基础层。 DDD 分层架构各层职能如下： 展现层 展现层负责向用户显示信息和解释用户指令。 应用层 应用层是很薄的一层，主要面向用户用例操作，协调和指挥领域对象来完成业务逻辑。应用层也是与其他系统的应用层进行交互的必要渠道。应用层服务尽量简单</description>
    </item>
    <item>
      <title>当中台遇上 DDD，我们该如何设计微服务</title>
      <link>https://geek.zshipu.com/post/DDDxx/%E5%BD%93%E4%B8%AD%E5%8F%B0%E9%81%87%E4%B8%8A-DDD%E6%88%91%E4%BB%AC%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 10 Mar 2022 10:21:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/%E5%BD%93%E4%B8%AD%E5%8F%B0%E9%81%87%E4%B8%8A-DDD%E6%88%91%E4%BB%AC%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>“设计原则千万条，高内聚低耦合第一条，架构设计不规范，开发运维两行泪！”。 在分布式架构下，单体应用被拆分为多个微服务，为了保证微服务的单一职责和合理拆分，“高内聚、松耦合”是最宝贵的设计原则。 通俗点讲，高内聚就是把相关的行为聚集在一起，把不相关的行为放在别处，如果你要修改某个服务</description>
    </item>
    <item>
      <title>DDD&#43;微服务大型案例：Uber如何从复杂的RPC微服务转向面向业务领域的微服务架构DOMA</title>
      <link>https://geek.zshipu.com/post/DDDxx/DDD&#43;%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%A7%E5%9E%8B%E6%A1%88%E4%BE%8BUber%E5%A6%82%E4%BD%95%E4%BB%8E%E5%A4%8D%E6%9D%82%E7%9A%84RPC%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BD%AC%E5%90%91%E9%9D%A2%E5%90%91%E4%B8%9A%E5%8A%A1%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84DOMA/</link>
      <pubDate>Thu, 10 Mar 2022 09:20:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDxx/DDD&#43;%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%A7%E5%9E%8B%E6%A1%88%E4%BE%8BUber%E5%A6%82%E4%BD%95%E4%BB%8E%E5%A4%8D%E6%9D%82%E7%9A%84RPC%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BD%AC%E5%90%91%E9%9D%A2%E5%90%91%E4%B8%9A%E5%8A%A1%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84DOMA/</guid>
      <description>Uber从单体到微服务转变 在Uber，我们采用了微服务架构，因为我们（大约在2012年至2013年）拥有两个整体服务，并且遇到了微服务解决的许多运营问题。 **可用性风险。**单一代码库中的单个回归可以使整个系统（在这种情况下，是整个Uber）瘫痪。 **风险高昂的部署。**由于频繁</description>
    </item>
    <item>
      <title>领域驱动设计 全局观-事件风暴落地过程</title>
      <link>https://geek.zshipu.com/post/DDDzl/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-%E5%85%A8%E5%B1%80%E8%A7%82-%E4%BA%8B%E4%BB%B6%E9%A3%8E%E6%9A%B4/</link>
      <pubDate>Mon, 07 Mar 2022 14:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDzl/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-%E5%85%A8%E5%B1%80%E8%A7%82-%E4%BA%8B%E4%BB%B6%E9%A3%8E%E6%9A%B4/</guid>
      <description>强调您可以自己研究的重要领域驱动设计术语 强调通过本次讨论出现的重要泛在语言术语 我想专注于最终目标。在这一点上，我们正试图实现一个有效的上下文映射，我们可以快速制作原型 我们的第一个领域事件：&amp;ldquo;咖啡已购买&amp;rdquo; 团队要求 考虑一个将发生在他业务核心的事件。希望以客户为</description>
    </item>
    <item>
      <title>积分领域 DDD 实践</title>
      <link>https://geek.zshipu.com/post/DDDzl/%E7%A7%AF%E5%88%86%E9%A2%86%E5%9F%9F-DDD-%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 07 Mar 2022 11:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDzl/%E7%A7%AF%E5%88%86%E9%A2%86%E5%9F%9F-DDD-%E5%AE%9E%E8%B7%B5/</guid>
      <description>前言 原有用户业务线上，属于大熔炉模式，所有和用户相关的业务逻辑都放在用户工程下，用户账号，用户会员，用户积分，活动等等在各个业务逻辑中都有互相掺杂，在面对业务快速发展的新零售电商行业显得力不从心。在进行业务迭代，新需求开发，让整个用户系统伤筋动骨。 一、为什么要使用 DDD 1、贫血症引起</description>
    </item>
    <item>
      <title>Go的干净模板，领域驱动设计，清洁架构，Gin和GORM</title>
      <link>https://geek.zshipu.com/post/go/Go%E7%9A%84%E5%B9%B2%E5%87%80%E6%A0%B7%E6%9D%BF%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%B8%85%E6%B4%81%E6%9E%B6%E6%9E%84Gin%E5%92%8CGORM/</link>
      <pubDate>Mon, 07 Mar 2022 08:55:38 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/go/Go%E7%9A%84%E5%B9%B2%E5%87%80%E6%A0%B7%E6%9D%BF%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%B8%85%E6%B4%81%E6%9E%B6%E6%9E%84Gin%E5%92%8CGORM/</guid>
      <description>GitHub Repo： https://github.com/resotto/goilerplate Goilerplate Go的干净样板，领域驱动设计，清洁架构，Gin和GORM。 什么是Goilerplate？ 使用清洁架构的好例子。 Go，Domain-Driven Design，Clean Architecture，Gin和GORM的火箭入门指南。 谁是Goilerplate的主要用户？ 各</description>
    </item>
    <item>
      <title>DDD021-有界上下文</title>
      <link>https://geek.zshipu.com/post/DDD/DDD021-%E6%9C%89%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Sun, 06 Mar 2022 23:23:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD021-%E6%9C%89%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>有界上下文是域驱动设计中的中心模式。这是DDD战略设计部分的重点，该部分是关于处理大型模型和团队的。DDD通过将它们划分为不同的有界上下文并明确它们的相互关系来处理大型模型。 DDD是关于基于底层域模型设计软件的。模型充当无处不在的语言，以帮助软件开发人员和领域专家之间的通信。它还</description>
    </item>
    <item>
      <title>DDD020-域驱动设计入门建模过程</title>
      <link>https://geek.zshipu.com/post/DDD/DDD020-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E5%BB%BA%E6%A8%A1%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sun, 06 Mar 2022 23:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD020-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E5%BB%BA%E6%A8%A1%E8%BF%87%E7%A8%8B/</guid>
      <description>此过程为您提供了学习和实际应用领域驱动设计（DDD）各个方面的分步指南 - 从围绕组织的业务模型进行定位到编写领域模型。 使用此过程将指导您完成使用DDD思维方式设计软件系统的每个基本步骤，因此您可以专注于业务挑战，而不会同时学习DDD而不知所措。 一旦你经历了这个过程的几次迭代，你将拥</description>
    </item>
    <item>
      <title>重构实战 - 领域驱动设计战略建模在重构业务系统时的应用</title>
      <link>https://geek.zshipu.com/post/DDDali/%E9%87%8D%E6%9E%84%E5%AE%9E%E6%88%98-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%88%98%E7%95%A5%E5%BB%BA%E6%A8%A1%E5%9C%A8%E9%87%8D%E6%9E%84%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F%E6%97%B6%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Thu, 14 Oct 2021 15:50:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDali/%E9%87%8D%E6%9E%84%E5%AE%9E%E6%88%98-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%88%98%E7%95%A5%E5%BB%BA%E6%A8%A1%E5%9C%A8%E9%87%8D%E6%9E%84%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F%E6%97%B6%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>转摘：https://www.pianshen.com/article/17311939527/ 领域驱动设计战略建模在重构业务系统时的应用 学习领域驱动设计相关的知识有一段时间了，但是一直苦恼于其中的一些概念无法理解透彻，导致无法落地实现甚至生根发芽。机缘巧合，不久前的工作内容中，</description>
    </item>
    <item>
      <title>阿里技术专家详解DDD系列 第五讲 - 聊聊如何避免写流水账代码</title>
      <link>https://geek.zshipu.com/post/DDDali/%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E8%AF%A6%E8%A7%A3DDD%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%BA%94%E8%AE%B2-%E8%81%8A%E8%81%8A%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%86%99%E6%B5%81%E6%B0%B4%E8%B4%A6%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 14 Oct 2021 15:49:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDali/%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E8%AF%A6%E8%A7%A3DDD%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%BA%94%E8%AE%B2-%E8%81%8A%E8%81%8A%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%86%99%E6%B5%81%E6%B0%B4%E8%B4%A6%E4%BB%A3%E7%A0%81/</guid>
      <description>转摘：https://zhuanlan.zhihu.com/p/366395817 在过去一年里我们团队做了大量的老系统重构和迁移，其中有大量的代码属于流水账代码，通常能看到是开发在对外的API接口里直接写业务逻辑代码，或者在一个服务里大量的堆接口，导致业务逻辑实际无法收敛，接口复</description>
    </item>
    <item>
      <title>什么是DDD领域驱动设计的战略设计</title>
      <link>https://geek.zshipu.com/post/DDDali/%E4%BB%80%E4%B9%88%E6%98%AFDDD%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%88%98%E7%95%A5%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 14 Oct 2021 15:48:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDali/%E4%BB%80%E4%B9%88%E6%98%AFDDD%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%88%98%E7%95%A5%E8%AE%BE%E8%AE%A1/</guid>
      <description>转摘：https://www.jdon.com/52189 它也称为战略建模，它是DDD的支柱，其主要目标是与整个项目团队（领域专家和技术团队）一起定义有界上下文，统一的无所不在语言和上下文映射。 要清楚地了解战略项目是什么，您需要掌握我所谈到的每个概念。 有界上下文/界定上下文 有界上</description>
    </item>
    <item>
      <title>谈谈代码：DDD从入门到完全入门</title>
      <link>https://geek.zshipu.com/post/DDDali/%E8%B0%88%E8%B0%88%E4%BB%A3%E7%A0%81DDD%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 14 Oct 2021 15:47:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDali/%E8%B0%88%E8%B0%88%E4%BB%A3%E7%A0%81DDD%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8/</guid>
      <description>转摘：https://www.jianshu.com/p/0f24360d47f3 1.什么是DDD 先看下万能的维基百科：Domain-driven design (DDD) is the concept that the structure and language of software code (class names, class methods, class variables) should match the business domain. For example, if a software processes loan applications, it might have classes such as LoanApplication and Customer, and methods such as AcceptOffer and Withdraw. 这边将其称为了一个概念。在我看来DDD</description>
    </item>
    <item>
      <title>谈谈代码：降低复杂度，从放弃三层架构到DDD入门</title>
      <link>https://geek.zshipu.com/post/DDDali/%E8%B0%88%E8%B0%88%E4%BB%A3%E7%A0%81%E9%99%8D%E4%BD%8E%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%8E%E6%94%BE%E5%BC%83%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E5%88%B0DDD%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 14 Oct 2021 15:46:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDali/%E8%B0%88%E8%B0%88%E4%BB%A3%E7%A0%81%E9%99%8D%E4%BD%8E%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%8E%E6%94%BE%E5%BC%83%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E5%88%B0DDD%E5%85%A5%E9%97%A8/</guid>
      <description>转摘：https://www.jianshu.com/p/738d16723f81 1.前言 最近我发现团队某项目的复杂度越来越高（典型的三层架构），具体表现为： 代码可读性较差：各个服务之间调用复杂，流程不清晰 修改某服务业务代码导致大量无关服务的测试用例失败，单个功能开发者很难迅速定</description>
    </item>
    <item>
      <title>阿里技术专家详解DDD系列 第四讲 - 领域层设计规范</title>
      <link>https://geek.zshipu.com/post/DDDali/%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E8%AF%A6%E8%A7%A3DDD%E7%B3%BB%E5%88%97-%E7%AC%AC%E5%9B%9B%E8%AE%B2-%E9%A2%86%E5%9F%9F%E5%B1%82%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</link>
      <pubDate>Thu, 14 Oct 2021 15:45:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDali/%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E8%AF%A6%E8%A7%A3DDD%E7%B3%BB%E5%88%97-%E7%AC%AC%E5%9B%9B%E8%AE%B2-%E9%A2%86%E5%9F%9F%E5%B1%82%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</guid>
      <description>转摘：https://zhuanlan.zhihu.com/p/356518017 在一个DDD架构设计中，领域层的设计合理性会直接影响整个架构的代码结构以及应用层、基础设施层的设计。但是领域层设计又是有挑战的任务，特别是在一个业务逻辑相对复杂应用中，每一个业务规则是应该放在Ent</description>
    </item>
    <item>
      <title>阿里技术专家详解DDD系列 第三讲 - Repository模式</title>
      <link>https://geek.zshipu.com/post/DDDali/%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E8%AF%A6%E8%A7%A3DDD%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%B8%89%E8%AE%B2-Repository%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 14 Oct 2021 15:44:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDali/%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E8%AF%A6%E8%A7%A3DDD%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%B8%89%E8%AE%B2-Repository%E6%A8%A1%E5%BC%8F/</guid>
      <description>转摘：https://zhuanlan.zhihu.com/p/348706530 在讲Repository之前其实应该先讲Entity（实体）、Aggregate Root（聚合根）、BoundedContext（限界上下文）等概念。但在实际写的过程中，发现单纯讲Entity相关的</description>
    </item>
    <item>
      <title>阿里技术专家详解DDD系列 第二讲 - 应用架构</title>
      <link>https://geek.zshipu.com/post/DDDali/%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E8%AF%A6%E8%A7%A3DDD%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Thu, 14 Oct 2021 15:43:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDali/%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E8%AF%A6%E8%A7%A3DDD%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</guid>
      <description>转摘：https://zhuanlan.zhihu.com/p/343388831 架构这个词源于英文里的“Architecture“，源头是土木工程里的“建筑”和“结构”，而架构里的”架“同时又包含了”架子“（scaffolding）的含义，意指能快速搭建起来的固定结构。而今天的</description>
    </item>
    <item>
      <title>阿里技术专家详解 DDD 系列 第一讲- Domain Primitive</title>
      <link>https://geek.zshipu.com/post/DDDali/%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E8%AF%A6%E8%A7%A3DDD%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%B8%80%E8%AE%B2-Domain-Primitive/</link>
      <pubDate>Thu, 14 Oct 2021 15:42:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDali/%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E8%AF%A6%E8%A7%A3DDD%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%B8%80%E8%AE%B2-Domain-Primitive/</guid>
      <description>转摘：https://zhuanlan.zhihu.com/p/340911587 导读 对于一个架构师来说，在软件开发中如何降低系统复杂度是一个永恒的挑战，无论是 94 年 GoF 的 Design Patterns ， 99 年的 Martin Fowler 的 Refactoring ， 02 年的 P of EAA ，还是 03 年的 Enterprise Integration Patterns ，都是通过一系列的设计模式或范例来降低一些常见的复杂度。 但是</description>
    </item>
    <item>
      <title>交易中心实战-领域驱动设计系列5</title>
      <link>https://geek.zshipu.com/post/DDDzl/%E4%BA%A4%E6%98%93%E4%B8%AD%E5%BF%83%E5%AE%9E%E6%88%98-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%975/</link>
      <pubDate>Mon, 11 Oct 2021 13:00:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDzl/%E4%BA%A4%E6%98%93%E4%B8%AD%E5%BF%83%E5%AE%9E%E6%88%98-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%975/</guid>
      <description>一、DDD的基本概念和设计流程 1、DDD的概念 DDD: Domain Driven Design Eric Evans:《领域驱动设计：软件核心复杂性应对之道》里面一段话： ​ DDD先对业务领域进行分析，建立领域模型，根据领域模型驱动代码设计 2、使用DDD的原因和好处 最重要的一点是，DDD是类似于微服务中台落地的指导思想，这也是DD</description>
    </item>
    <item>
      <title>结合电商支付业务-领域驱动设计系列4</title>
      <link>https://geek.zshipu.com/post/DDDzl/%E7%BB%93%E5%90%88%E7%94%B5%E5%95%86%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%974/</link>
      <pubDate>Sun, 10 Oct 2021 10:18:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDzl/%E7%BB%93%E5%90%88%E7%94%B5%E5%95%86%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%974/</guid>
      <description>2004 年，软件大师 Eric Evans 的不朽著作《领域驱动设计：软件核心复杂性应对之道》面世，从书名可以看出，这是一本应对软件系统越来越复杂的方法论的图书。然而，在当时，中国的软件业才刚刚起步，软件系统还没有那么复杂，即使维护了几年，软件退化了，不好维护了，推倒重新开发就好了。因此，在过去的那么多年</description>
    </item>
    <item>
      <title>六边形架构-领域驱动设计系列3</title>
      <link>https://geek.zshipu.com/post/DDDzl/%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%973/</link>
      <pubDate>Fri, 08 Oct 2021 20:17:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDzl/%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%973/</guid>
      <description>为什么叫六边形？ 六边形建筑的名称来自此建筑通常描述的方式： 我们将回到为什么六边形在本文的后面使用。这种模式还属于端口和适配器（这更好地解释了它背后的中心思想）和洋葱结构（因为它是如何分层的）。 在下面，我们将仔细看看&amp;quot;洋葱&amp;quot;。我们将从核心 （领域模型） 开始，然后自</description>
    </item>
    <item>
      <title>战术领域驱动设计-领域驱动设计系列2</title>
      <link>https://geek.zshipu.com/post/DDDzl/%E6%88%98%E6%9C%AF%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%972/</link>
      <pubDate>Fri, 08 Oct 2021 20:16:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDzl/%E6%88%98%E6%9C%AF%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%972/</guid>
      <description>与战略领领域驱动设计相比，战术设计更加实际，更接近实际代码。战略设计涉及抽象整体，而战术设计则涉及类和模块。战术设计的目的是将领域模型细化到可以转换为工作代码的阶段。 设计是一个迭代的过程，因此将战略设计与战术设计相结合是有意义的。你从战略设计开始，然后是战术设计。最大的领领域模型</description>
    </item>
    <item>
      <title>战略领域驱动设计-领域驱动设计系列1</title>
      <link>https://geek.zshipu.com/post/DDDzl/%E6%88%98%E7%95%A5%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%971/</link>
      <pubDate>Fri, 08 Oct 2021 20:15:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDDzl/%E6%88%98%E7%95%A5%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%971/</guid>
      <description>​ 自Eric Evans于 2003 年出版关于该主题的书以来，领域驱动设计（DDD） 一直存在。几年前，当我加入一个存在数据一致性问题的项目时，我自己也接触到了 DDD。重复显示在数据库中，一些信息根本没有保存，可以随时随地遇到乐观的锁定错误。我们通过使用战术领域驱动设计的构建基块来解决这个问</description>
    </item>
    <item>
      <title>DDD019-学习笔记</title>
      <link>https://geek.zshipu.com/post/DDD/DDD019-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 06 Oct 2021 23:22:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD019-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>DDD是什么 领域驱动设计(Domain Driven Design) 是一种从系统分析到软件建模的一套方法论。以领域为核心驱动力的设计体系。 为什么需要DDD 面向对象设计，数据行为绑定，告别贫血模型 优先考虑领域模型，而不是切割数据和行为 准确传达业务规则 代码即设计 DDD的一些概念 战略设计：限界上下文、上下文映射</description>
    </item>
    <item>
      <title>DDD.1 - 专业知识</title>
      <link>https://geek.zshipu.com/post/DDD/DDD.1-%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 06 Oct 2021 10:41:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD.1-%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/</guid>
      <description>开发人员和领域专家协作，讨论域专家的知识，将其提炼成所有，而且仅与项目相关的知识。 目标是最终建立一个模型，说明应用程序应该做什么，应该怎么做，以及技术实施应该是什么。 知识的塑造不是一次性完成，就像瀑布方法一样。虽然在项目开始时确实应该更加密集，但它必须是一个持续和反复的过程，当开</description>
    </item>
    <item>
      <title>DDD018-领领域驱动设计基础概念</title>
      <link>https://geek.zshipu.com/post/DDD/DDD018-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Wed, 06 Oct 2021 09:41:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD018-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
      <description>领域驱动设计是程序员Eric Evans在 2004 年在他的著作《领域驱动设计：解决软件核心的复杂性》中引入的概念。 这是一种通过自上而下的方法查看软件来构建软件设计的方法。在详细讨论主题之前，让我们尝试集中一些光，并了解在此上下文中领域的含义。 ​ 什么是领域？ 软件开发中使用的&amp;quot;领域</description>
    </item>
    <item>
      <title>DDD017-领域驱动设计它是什么何使用它</title>
      <link>https://geek.zshipu.com/post/DDD/DDD017-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AE%83%E6%98%AF%E4%BB%80%E4%B9%88-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AE%83/</link>
      <pubDate>Wed, 06 Oct 2021 09:11:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD017-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AE%83%E6%98%AF%E4%BB%80%E4%B9%88-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AE%83/</guid>
      <description>什么是领域？ 要定义，我们首先应该确定我们在此背景下（以及一般发展中）的含义。通用字典的定义是：&amp;ldquo;知识或活动领领域&amp;rdquo;。从这一点深入研究，在软件工程领领域通常是指应用程序打算应用的主题区领域。换句话说，在应用开发过程中，是&amp;quot;应用逻辑围绕的知识和活动领</description>
    </item>
    <item>
      <title>DDD016-在开发软件中应用领域驱动设计</title>
      <link>https://geek.zshipu.com/post/DDD/DDD016-%E5%9C%A8%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BA%94%E7%94%A8%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 04 Oct 2021 14:11:10 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD016-%E5%9C%A8%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BA%94%E7%94%A8%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>**领域驱动设计 （DDD）**是开发代码库结构与业务领域结构非常匹配的软件的概念。 有关 DDD 的更多信息，您可以在此处找到它 我花了很多时间来理解和应用它到日常任务， 所以这篇文章是我的分享所有我所知道的关于 Ddd 。 规则 该规则规定，外圈中声明的某些&amp;gt;内圈不得在代码中提及。 &amp;mdash;干</description>
    </item>
    <item>
      <title>DDD015-实现领域驱动设计：第四部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD015-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 25 Sep 2021 13:35:42 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD015-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86/</guid>
      <description>对象映射对象 当两个对象具有相同或相似属性时，自动对象到对象映射是将值从一个对象复制到另一个对象的有用方法。 DTO 和实体类通常具有相同的/类似的属性，您通常需要从实体创建 DTO 对象。 ABP 的对象对象映射系统与自动映射器集成使这些操作比手动映射容易得多。 仅使用自动对象映射进行实体输出 DTO 映射。 不要</description>
    </item>
    <item>
      <title>DDD014-实现领域驱动设计：第三部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD014-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 25 Sep 2021 12:27:42 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD014-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</guid>
      <description>需要外部服务的实体中的业务逻辑 当业务逻辑仅使用该实体的属性时，只需在实体方法中实施业务规则就很简单。 如果业务逻辑要求查询数据库或使用应从依赖性注入系统解决的任何外部服务，该怎么办？ 记住：实体不能注入服务！ 实现这种商业逻辑有两种常见方法： 在实体方法上实现业务逻辑，并获取外部依赖作为</description>
    </item>
    <item>
      <title>DDD013-实现领域驱动设计：第二部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD013-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 25 Sep 2021 11:27:42 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD013-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</guid>
      <description>实现：构建基块 这是本系列的重要组成部分。我们将用实例介绍和解释一些明确的规则。您可以遵循这些规则，并在实施域驱动设计时应用到您的解决方案中。 示例领域 示例将使用 GitHub 使用的一些概念，如问题、存储库、标签和用户，您已经熟悉。 下图显示了一些聚合、聚合根、实体、价值对象及其之间的关系： 问题聚</description>
    </item>
    <item>
      <title>DDD012-实现领域驱动设计：第一部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD012-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</link>
      <pubDate>Fri, 24 Sep 2021 23:27:42 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD012-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</guid>
      <description>简单代码！ 踢足球很简单，但踢简单的足球是最难的。- 约翰 · 克鲁伊夫 如果我们把这个著名的名言作为编程，我们可以说： 编写代码非常简单，但编写简单的代码是最 难的事情。 什么是域驱动设计？ 域驱动设计 （DDD） 是将实现与 不断发展的模型连接起来，满足复杂需求的软件开发方法; DDD 适用于复杂的领域和大</description>
    </item>
    <item>
      <title>DDD011-子域和边界上下文</title>
      <link>https://geek.zshipu.com/post/DDD/DDD011-%E5%AD%90%E5%9F%9F%E5%92%8C%E8%BE%B9%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Fri, 24 Sep 2021 23:22:42 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD011-%E5%AD%90%E5%9F%9F%E5%92%8C%E8%BE%B9%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>这篇文章是一个摘要， 给自己一个关于子域和边界上下文的差异的说明。这些术语通常由域驱动设计从业者使用。曾经有段时间，我把它们混在一起一点点。希望你能发现这个有用。如果你发现任何不准确之处，请告诉我。我仍在改进我的 DDD 实践和知识。 子域 让我们从什么是亚多曼开始。子域位于问题空间中。一个大</description>
    </item>
    <item>
      <title>DDD010-领域驱动设计：实体、价值对象以及如何区分它们</title>
      <link>https://geek.zshipu.com/post/DDD/DDD010-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AE%9E%E4%BD%93%E4%BB%B7%E5%80%BC%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E5%AE%83%E4%BB%AC/</link>
      <pubDate>Fri, 24 Sep 2021 23:02:42 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD010-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AE%9E%E4%BD%93%E4%BB%B7%E5%80%BC%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E5%AE%83%E4%BB%AC/</guid>
      <description>DDD 可分为战略和战术设计，其中战术设计是关于 DDD 的构建基块的。这篇文章将是关于DDD的基本构建基块：***实体和价值对象（VOs）。***实体和 VO 是 DDD 中表示模型的两个构建基块。它们是域驱动设计（服务和域事件除外）的起点。 除了只看实体和VO的定义，我还将为您提供一些如何区分它们的指导。</description>
    </item>
    <item>
      <title>DDD009-领域驱动设计 （DDD） 的介绍</title>
      <link>https://geek.zshipu.com/post/DDD/DDD009-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-DDD-%E7%9A%84%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 24 Sep 2021 22:02:42 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD009-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-DDD-%E7%9A%84%E4%BB%8B%E7%BB%8D/</guid>
      <description>DDD 语境中什么是领域？ 知识、影响力或活动领域。用户应用程序的主题区域是软件的域。 我将向您提供 DDD 的概述。这篇文章是关于**DDD 的 &amp;ldquo;为什么？**我不会深入探讨这里的特定主题。不过，我会指出一些重要术语的定义，就像我刚才对&amp;quot;域&amp;quot;所做的那样。正如您将意识到</description>
    </item>
    <item>
      <title>DDD008-第 1 部分：领域驱动设计</title>
      <link>https://geek.zshipu.com/post/DDD/DDD008-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 24 Sep 2021 20:23:44 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD008-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>域建模是困难的。教学和学习域建模更加困难。因此，我的目标是帮助您学习这个巨大的主题，让您对领域驱动的意义有一个坚实的基本理解。概念概念和挖掘示例是本系列的意义。人们经常直接潜入开发带有代码的业务线应用程序 （LoB），但在实施可能导致灾难之前不知道 DDD 真正代表什么。从历史上看，单体建</description>
    </item>
    <item>
      <title>DDD007-领域动设计入门建模过程</title>
      <link>https://geek.zshipu.com/post/DDD/DDD007-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E5%BB%BA%E6%A8%A1%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Fri, 24 Sep 2021 18:23:44 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD007-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E5%BB%BA%E6%A8%A1%E8%BF%87%E7%A8%8B/</guid>
      <description>此过程为您提供了一个分步学习指南，并实际应用了领域驱动设计 （DDD） 的各个方面 - 从围绕组织的业务模式定位到编码域模型。 使用此过程将引导您完成设计具有 DDD 思维的软件系统的每一个基本步骤，这样您就可以专注于业务挑战，而不是同时学习 DDD 而不知所措。 一旦您经历了流程的几次迭代，您将拥有基础 DDD</description>
    </item>
    <item>
      <title>DDD006-领域驱动架构图</title>
      <link>https://geek.zshipu.com/post/DDD/DDD006-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%9E%B6%E6%9E%84%E5%9B%BE/</link>
      <pubDate>Thu, 23 Sep 2021 16:02:42 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD006-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%9E%B6%E6%9E%84%E5%9B%BE/</guid>
      <description>领域驱动设计是创建对问题空间的共同理解，通过对话、代码和图表无处不在地加强。DDD 的共享理解增强了协同效应和一致性，提高了可持续交付价值的能力 - 理想情况下，在产品的使用寿命内。正如一个系统的架构，通过图表表达，是一个有利可图的途径，以加强DD的共享模式。 以红色突出显示：其中架构图</description>
    </item>
    <item>
      <title>DDD005-构建域驱动的微服务</title>
      <link>https://geek.zshipu.com/post/DDD/DDD005-%E6%9E%84%E5%BB%BA%E5%9F%9F%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 23 Sep 2021 11:02:42 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD005-%E6%9E%84%E5%BB%BA%E5%9F%9F%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>微服务 - 定义 微服务中的&amp;quot;微型&amp;quot;一词虽然表示服务的规模，但并不是使应用程序成为微服务的唯一标准。当团队转向基于微服务的架构时，他们的目标是提高其敏捷性 - 自主和频繁地部署功能。很难确定这种建筑风格的简明定义。我喜欢阿德里安·科克克罗夫特的这个简短定义**——&amp;qu</description>
    </item>
    <item>
      <title>DDD004-域驱动设计初学者指南</title>
      <link>https://geek.zshipu.com/post/DDD/DDD004-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 23 Sep 2021 09:02:42 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD004-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97/</guid>
      <description>软件应用程序总是围绕构成公司业务的知识和活动领域发展。 域驱动设计是一种软件开发方法，通过将实现与不断发展的模型连接起来来解决复杂的问题：它提供了一套工具，旨在设计和实现具有高业务价值的代码。 需要注意的是，DDD 旨在解决复杂的问题，如果复杂性不足以证明其合理性，则可能过于过分。 DDD 提</description>
    </item>
    <item>
      <title>DDD003-域驱动设计：您一直想知道的一切，但不敢问</title>
      <link>https://geek.zshipu.com/post/DDD/DDD003-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%82%A8%E4%B8%80%E7%9B%B4%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87%E4%BD%86%E4%B8%8D%E6%95%A2%E9%97%AE/</link>
      <pubDate>Thu, 23 Sep 2021 08:59:57 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD003-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%82%A8%E4%B8%80%E7%9B%B4%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87%E4%BD%86%E4%B8%8D%E6%95%A2%E9%97%AE/</guid>
      <description>随着代码基数的增长，其复杂性必然会增加。由于这种情况，它往往变得更加难以保持代码的组织和结构，因为最初的意图，这被称为软件熵。在多次迭代中，如果不执行严格的架构准则，保持良好的关注分离以及正确脱钩类和模块将更具挑战性。 在传统的模型视图控制器 （MVC） 架构中，&amp;ldquo;M&amp;qu</description>
    </item>
    <item>
      <title>DDD002-什么是域驱动设计？</title>
      <link>https://geek.zshipu.com/post/DDD/DDD002-%E4%BB%80%E4%B9%88%E6%98%AF%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 23 Sep 2021 08:46:32 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD002-%E4%BB%80%E4%B9%88%E6%98%AF%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>随着代码基数的增长，其复杂性必然会增加。由于这种情况，它往往变得更加难以保持代码的组织和结构，因为最初的意图，这被称为软件熵。在多次迭代中，如果不执行严格的架构准则，保持良好的关注分离以及正确脱钩类和模块将更具挑战性。 在传统的模型视图控制器 （MVC） 架构中，”M”层将掌握所有业务</description>
    </item>
    <item>
      <title>DDD001-解释域驱动设计的概念</title>
      <link>https://geek.zshipu.com/post/DDD/DDD001-%E8%A7%A3%E9%87%8A%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Wed, 22 Sep 2021 19:20:04 +0800</pubDate>
      <guid>https://geek.zshipu.com/post/DDD/DDD001-%E8%A7%A3%E9%87%8A%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>使用微服务意味着从松散耦合服务创建应用程序。该应用程序由几个小型服务组成，每个服务代表一个单独的业务目标。它们可以在复杂的应用中结合后单独开发和轻松维护。 微服务是一种架构设计模型**，具有特定的边界上下文、配置和依赖性。**这些结果来自域驱动设计和 DevOps 的架构原理。域驱动设计是通过代</description>
    </item>
  </channel>
</rss>
