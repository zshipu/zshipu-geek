<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DDD on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/DDD/</link>
    <description>Recent content in DDD on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Oct 2021 23:22:10 +0000</lastBuildDate>
    
	<atom:link href="https://geek.zshipu.com/tags/DDD/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DDD019-学习笔记</title>
      <link>https://geek.zshipu.com/post/DDD/DDD019-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 06 Oct 2021 23:22:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD019-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>DDD是什么 领域驱动设计(Domain Driven Design) 是一种从系统分析到软件建模的一套方法论。以领域为核心驱动力的设计体系。 为什么需要DDD 面向对象设计，数据行为绑定，告别贫血模型 优先考虑领域模型，而不是切割数据和行为 准确传达业务规则 代码即设计 DDD的一些概念 战略设计：限界上下文、上下文映射</description>
    </item>
    
    <item>
      <title>DDD.1 - 专业知识</title>
      <link>https://geek.zshipu.com/post/DDD/DDD.1-%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 06 Oct 2021 10:41:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD.1-%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/</guid>
      <description>开发人员和领域专家协作，讨论域专家的知识，将其提炼成所有，而且仅与项目相关的知识。 目标是最终建立一个模型，说明应用程序应该做什么，应该怎么做，以及技术实施应该是什么。 知识的塑造不是一次性完成，就像瀑布方法一样。虽然在项目开始时确实应该更加密集，但它必须是一个持续和反复的过程，当开</description>
    </item>
    
    <item>
      <title>DDD018-领领域驱动设计基础概念</title>
      <link>https://geek.zshipu.com/post/DDD/DDD018-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Wed, 06 Oct 2021 09:41:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD018-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
      <description>领域驱动设计是程序员Eric Evans在 2004 年在他的著作《领域驱动设计：解决软件核心的复杂性》中引入的概念。 这是一种通过自上而下的方法查看软件来构建软件设计的方法。在详细讨论主题之前，让我们尝试集中一些光，并了解在此上下文中领域的含义。 ​ 什么是领域？ 软件开发中使用的&amp;rdquo;领</description>
    </item>
    
    <item>
      <title>DDD017-领域驱动设计它是什么何使用它</title>
      <link>https://geek.zshipu.com/post/DDD/DDD017-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AE%83%E6%98%AF%E4%BB%80%E4%B9%88-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AE%83/</link>
      <pubDate>Wed, 06 Oct 2021 09:11:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD017-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AE%83%E6%98%AF%E4%BB%80%E4%B9%88-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AE%83/</guid>
      <description>什么是领域？ 要定义，我们首先应该确定我们在此背景下（以及一般发展中）的含义。通用字典的定义是：&amp;rdquo;知识或活动领领域&amp;rdquo;。从这一点深入研究，在软件工程领领域通常是指应用程序打算应用的主题区领域。换句话说，在应用开发过程中，是&amp;rdquo;应用逻辑围绕的知识和活动</description>
    </item>
    
    <item>
      <title>DDD016-在开发软件中应用领域驱动设计</title>
      <link>https://geek.zshipu.com/post/DDD/DDD016-%E5%9C%A8%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BA%94%E7%94%A8%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 04 Oct 2021 14:11:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD016-%E5%9C%A8%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BA%94%E7%94%A8%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>领域驱动设计 （DDD）是开发代码库结构与业务领域结构非常匹配的软件的概念。 有关 DDD 的更多信息，您可以在此处找到它 我花了很多时间来理解和应用它到日常任务， 所以这篇文章是我的分享所有我所知道的关于 Ddd 。 规则 该规则规定，外圈中声明的某些&amp;gt;内圈不得在代码中提及。 &amp;mdash;干净的建筑</description>
    </item>
    
    <item>
      <title>DDD015-实现领域驱动设计：第四部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD015-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 25 Sep 2021 13:35:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD015-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86/</guid>
      <description>对象映射对象 当两个对象具有相同或相似属性时，自动对象到对象映射是将值从一个对象复制到另一个对象的有用方法。 DTO 和实体类通常具有相同的/类似的属性，您通常需要从实体创建 DTO 对象。 ABP 的对象对象映射系统与自动映射器集成使这些操作比手动映射容易得多。 仅使用自动对象映射进行实体输出 DTO 映射。 不要</description>
    </item>
    
    <item>
      <title>DDD014-实现领域驱动设计：第三部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD014-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 25 Sep 2021 12:27:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD014-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</guid>
      <description>需要外部服务的实体中的业务逻辑 当业务逻辑仅使用该实体的属性时，只需在实体方法中实施业务规则就很简单。 如果业务逻辑要求查询数据库或使用应从依赖性注入系统解决的任何外部服务，该怎么办？ 记住：实体不能注入服务！ 实现这种商业逻辑有两种常见方法： 在实体方法上实现业务逻辑，并获取外部依赖作为</description>
    </item>
    
    <item>
      <title>DDD013-实现领域驱动设计：第二部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD013-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 25 Sep 2021 11:27:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD013-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</guid>
      <description>实现：构建基块 这是本系列的重要组成部分。我们将用实例介绍和解释一些明确的规则。您可以遵循这些规则，并在实施域驱动设计时应用到您的解决方案中。 示例领域 示例将使用 GitHub 使用的一些概念，如问题、存储库、标签和用户，您已经熟悉。 下图显示了一些聚合、聚合根、实体、价值对象及其之间的关系： 问题聚</description>
    </item>
    
    <item>
      <title>DDD012-实现领域驱动设计：第一部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD012-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</link>
      <pubDate>Fri, 24 Sep 2021 23:27:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD012-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</guid>
      <description>简单代码！ 踢足球很简单，但踢简单的足球是最难的。- 约翰 · 克鲁伊夫 如果我们把这个著名的名言作为编程，我们可以说： 编写代码非常简单，但编写简单的代码是最 难的事情。 什么是域驱动设计？ 域驱动设计 （DDD） 是将实现与 不断发展的模型连接起来，满足复杂需求的软件开发方法; DDD 适用于复杂的领域和大</description>
    </item>
    
    <item>
      <title>DDD011-子域和边界上下文</title>
      <link>https://geek.zshipu.com/post/DDD/DDD011-%E5%AD%90%E5%9F%9F%E5%92%8C%E8%BE%B9%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Fri, 24 Sep 2021 23:22:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD011-%E5%AD%90%E5%9F%9F%E5%92%8C%E8%BE%B9%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>这篇文章是一个摘要， 给自己一个关于子域和边界上下文的差异的说明。这些术语通常由域驱动设计从业者使用。曾经有段时间，我把它们混在一起一点点。希望你能发现这个有用。如果你发现任何不准确之处，请告诉我。我仍在改进我的 DDD 实践和知识。 子域 让我们从什么是亚多曼开始。子域位于问题空间中。一个大</description>
    </item>
    
    <item>
      <title>DDD010-领域驱动设计：实体、价值对象以及如何区分它们</title>
      <link>https://geek.zshipu.com/post/DDD/DDD010-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AE%9E%E4%BD%93%E4%BB%B7%E5%80%BC%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E5%AE%83%E4%BB%AC/</link>
      <pubDate>Fri, 24 Sep 2021 23:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD010-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AE%9E%E4%BD%93%E4%BB%B7%E5%80%BC%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E5%AE%83%E4%BB%AC/</guid>
      <description>DDD 可分为战略和战术设计，其中战术设计是关于 DDD 的构建基块的。这篇文章将是关于DDD的基本构建基块：*实体和价值对象（VOs）。*实体和 VO 是 DDD 中表示模型的两个构建基块。它们是域驱动设计（服务和域事件除外）的起点。 除了只看实体和VO的定义，我还将为您提供一些如何区分它们的指导。 DDD 的构建</description>
    </item>
    
    <item>
      <title>DDD009-领域驱动设计 （DDD） 的介绍</title>
      <link>https://geek.zshipu.com/post/DDD/DDD009-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-DDD-%E7%9A%84%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 24 Sep 2021 22:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD009-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-DDD-%E7%9A%84%E4%BB%8B%E7%BB%8D/</guid>
      <description>DDD 语境中什么是领域？ 知识、影响力或活动领域。用户应用程序的主题区域是软件的域。 我将向您提供 DDD 的概述。这篇文章是关于DDD 的 &amp;ldquo;为什么？我不会深入探讨这里的特定主题。不过，我会指出一些重要术语的定义，就像我刚才对&amp;rdquo;域&amp;rdquo;所做的那样。正如您将意识到共享</description>
    </item>
    
    <item>
      <title>DDD008-第 1 部分：领域驱动设计</title>
      <link>https://geek.zshipu.com/post/DDD/DDD008-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 24 Sep 2021 20:23:44 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD008-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>域建模是困难的。教学和学习域建模更加困难。因此，我的目标是帮助您学习这个巨大的主题，让您对领域驱动的意义有一个坚实的基本理解。概念概念和挖掘示例是本系列的意义。人们经常直接潜入开发带有代码的业务线应用程序 （LoB），但在实施可能导致灾难之前不知道 DDD 真正代表什么。从历史上看，单体建</description>
    </item>
    
    <item>
      <title>DDD007-领域动设计入门建模过程</title>
      <link>https://geek.zshipu.com/post/DDD/DDD007-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E5%BB%BA%E6%A8%A1%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Fri, 24 Sep 2021 18:23:44 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD007-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E5%BB%BA%E6%A8%A1%E8%BF%87%E7%A8%8B/</guid>
      <description>此过程为您提供了一个分步学习指南，并实际应用了领域驱动设计 （DDD） 的各个方面 - 从围绕组织的业务模式定位到编码域模型。 使用此过程将引导您完成设计具有 DDD 思维的软件系统的每一个基本步骤，这样您就可以专注于业务挑战，而不是同时学习 DDD 而不知所措。 一旦您经历了流程的几次迭代，您将拥有基础 DDD</description>
    </item>
    
    <item>
      <title>DDD006-领域驱动架构图</title>
      <link>https://geek.zshipu.com/post/DDD/DDD006-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%9E%B6%E6%9E%84%E5%9B%BE/</link>
      <pubDate>Thu, 23 Sep 2021 16:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD006-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%9E%B6%E6%9E%84%E5%9B%BE/</guid>
      <description>领域驱动设计是创建对问题空间的共同理解，通过对话、代码和图表无处不在地加强。DDD 的共享理解增强了协同效应和一致性，提高了可持续交付价值的能力 - 理想情况下，在产品的使用寿命内。正如一个系统的架构，通过图表表达，是一个有利可图的途径，以加强DD的共享模式。 以红色突出显示：其中架构图</description>
    </item>
    
    <item>
      <title>DDD005-构建域驱动的微服务</title>
      <link>https://geek.zshipu.com/post/DDD/DDD005-%E6%9E%84%E5%BB%BA%E5%9F%9F%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 23 Sep 2021 11:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD005-%E6%9E%84%E5%BB%BA%E5%9F%9F%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>微服务 - 定义 微服务中的&amp;rdquo;微型&amp;rdquo;一词虽然表示服务的规模，但并不是使应用程序成为微服务的唯一标准。当团队转向基于微服务的架构时，他们的目标是提高其敏捷性 - 自主和频繁地部署功能。很难确定这种建筑风格的简明定义。我喜欢阿德里安·科克克罗夫特的这个简短定义——&amp;rd</description>
    </item>
    
    <item>
      <title>DDD004-域驱动设计初学者指南</title>
      <link>https://geek.zshipu.com/post/DDD/DDD004-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 23 Sep 2021 09:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD004-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97/</guid>
      <description>软件应用程序总是围绕构成公司业务的知识和活动领域发展。 域驱动设计是一种软件开发方法，通过将实现与不断发展的模型连接起来来解决复杂的问题：它提供了一套工具，旨在设计和实现具有高业务价值的代码。 需要注意的是，DDD 旨在解决复杂的问题，如果复杂性不足以证明其合理性，则可能过于过分。 DDD 提</description>
    </item>
    
    <item>
      <title>DDD003-域驱动设计：您一直想知道的一切，但不敢问</title>
      <link>https://geek.zshipu.com/post/DDD/DDD003-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%82%A8%E4%B8%80%E7%9B%B4%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87%E4%BD%86%E4%B8%8D%E6%95%A2%E9%97%AE/</link>
      <pubDate>Thu, 23 Sep 2021 08:59:57 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD003-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%82%A8%E4%B8%80%E7%9B%B4%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87%E4%BD%86%E4%B8%8D%E6%95%A2%E9%97%AE/</guid>
      <description>随着代码基数的增长，其复杂性必然会增加。由于这种情况，它往往变得更加难以保持代码的组织和结构，因为最初的意图，这被称为软件熵。在多次迭代中，如果不执行严格的架构准则，保持良好的关注分离以及正确脱钩类和模块将更具挑战性。 在传统的模型视图控制器 （MVC） 架构中，&amp;rdquo;M&amp;rd</description>
    </item>
    
    <item>
      <title>DDD002-什么是域驱动设计？</title>
      <link>https://geek.zshipu.com/post/DDD/DDD002-%E4%BB%80%E4%B9%88%E6%98%AF%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 23 Sep 2021 08:46:32 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD002-%E4%BB%80%E4%B9%88%E6%98%AF%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>随着代码基数的增长，其复杂性必然会增加。由于这种情况，它往往变得更加难以保持代码的组织和结构，因为最初的意图，这被称为软件熵。在多次迭代中，如果不执行严格的架构准则，保持良好的关注分离以及正确脱钩类和模块将更具挑战性。 在传统的模型视图控制器 （MVC） 架构中，”M”层将掌握所有业务</description>
    </item>
    
    <item>
      <title>DDD001-解释域驱动设计的概念</title>
      <link>https://geek.zshipu.com/post/DDD/DDD001-%E8%A7%A3%E9%87%8A%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Wed, 22 Sep 2021 19:20:04 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD001-%E8%A7%A3%E9%87%8A%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>使用微服务意味着从松散耦合服务创建应用程序。该应用程序由几个小型服务组成，每个服务代表一个单独的业务目标。它们可以在复杂的应用中结合后单独开发和轻松维护。 微服务是一种架构设计模型，具有特定的边界上下文、配置和依赖性。这些结果来自域驱动设计和 DevOps 的架构原理。域驱动设计是通过代码解决组</description>
    </item>
    
  </channel>
</rss>