<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 16 Feb 2022 11:38:06 +0800</lastBuildDate>
    
	<atom:link href="https://geek.zshipu.com/tags/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>技术架构图</title>
      <link>https://geek.zshipu.com/post/%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE/</link>
      <pubDate>Wed, 16 Feb 2022 11:38:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java 开发 架构模式 清洁架构</title>
      <link>https://geek.zshipu.com/post/java/Java-%E5%BC%80%E5%8F%91-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F-%E6%B8%85%E6%B4%81%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sat, 02 Oct 2021 11:33:33 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/Java-%E5%BC%80%E5%8F%91-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F-%E6%B8%85%E6%B4%81%E6%9E%B6%E6%9E%84/</guid>
      <description>虽然这些架构的细节都有些不同，但它们非常相似。它们都有相同的目标，即解耦。它们都通过将软件划分为层来实现这种分离。每个层至少有一层用于业务规则，另一层用于接口。 这些架构中的每一个都产生以下系统： 独立于框架。架构并不依赖于一些充满功能的软件库的存在。这允许您使用工具等框架，而不必将</description>
    </item>
    
    <item>
      <title>Java 开发 架构模式 从分层架构、洋葱架构到六边形架构</title>
      <link>https://geek.zshipu.com/post/java/Java-%E5%BC%80%E5%8F%91-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F-%E4%BB%8E%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84%E5%88%B0%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sat, 02 Oct 2021 11:22:22 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/Java-%E5%BC%80%E5%8F%91-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F-%E4%BB%8E%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84%E5%88%B0%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/</guid>
      <description>经典分层 分层是打破复杂软件系统的最广为人知的技术之一。它已被推广到许多流行的书籍，如马丁·福勒*的企业应用架构模式*。 图层允许我们在不知道任何较低级别层的详细信息的情况下在较低级别层之上构建软件。在理想世界中，我们甚至可以用不同的实现替换低层。虽然层数可能有所不同，但我们在实践中</description>
    </item>
    
  </channel>
</rss>