<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IOTechnologyBase on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/IOTechnologyBase/</link>
    <description>Recent content in IOTechnologyBase on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Mar 2024 11:42:00 +0000</lastBuildDate>
    <atom:link href="https://geek.zshipu.com/tags/IOTechnologyBase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>详解selector、poll和epoll</title>
      <link>https://geek.zshipu.com/post/code/docs/Netty/IOTechnologyBase/%E8%AF%A6%E8%A7%A3selectorpoll%E5%92%8Cepoll/</link>
      <pubDate>Wed, 06 Mar 2024 11:42:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Netty/IOTechnologyBase/%E8%AF%A6%E8%A7%A3selectorpoll%E5%92%8Cepoll/</guid>
      <description>Netty 是一个高性能、异步事件驱动的网络应用程序框架，它使用了 NIO 技术来提供高性能的网络通信。在 NIO 中，有三种常用的多路复用器（Multiplexor）：Selector、Poll 和 Epoll。这些多路复用器可以同时监听多个网络连接的 IO 事件，从而提高网络通信的效率。 Selector Selector 是 Java NIO 中的一种多路复</description>
    </item>
    <item>
      <title>把被说烂的BIO、NIO、AIO再从头到尾扯一遍</title>
      <link>https://geek.zshipu.com/post/code/docs/Netty/IOTechnologyBase/%E6%8A%8A%E8%A2%AB%E8%AF%B4%E7%83%82%E7%9A%84BIONIOAIO%E5%86%8D%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E6%89%AF%E4%B8%80%E9%81%8D/</link>
      <pubDate>Wed, 06 Mar 2024 11:41:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Netty/IOTechnologyBase/%E6%8A%8A%E8%A2%AB%E8%AF%B4%E7%83%82%E7%9A%84BIONIOAIO%E5%86%8D%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E6%89%AF%E4%B8%80%E9%81%8D/</guid>
      <description>网上关于各种 IO 的博文已经多到飞起，如果你是大神，可以跳过我这个菜鸟的拙文，本博文没有什么特别 NB 的东西，只是集百家之长，并且以自己感到简单舒适的方式输出自己的理解，及学习过程中的经验。 IO 及基本概念 1、流的概念和作用 流：代表任何有能力产出数据的数据源对象或者是有能力接受数据的接收端对</description>
    </item>
    <item>
      <title>四种IO编程及对比</title>
      <link>https://geek.zshipu.com/post/code/docs/Netty/IOTechnologyBase/%E5%9B%9B%E7%A7%8DIO%E7%BC%96%E7%A8%8B%E5%8F%8A%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Wed, 06 Mar 2024 11:40:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Netty/IOTechnologyBase/%E5%9B%9B%E7%A7%8DIO%E7%BC%96%E7%A8%8B%E5%8F%8A%E5%AF%B9%E6%AF%94/</guid>
      <description>传统的 BIO 编程 网络编程的基本模型是 Client/Server 模型，也就是两个进程之间进行相互通信，其中服务端提供位置信息(绑定的 IP 地址和监听端口)，客户端通过连接操作向服务端监听的地址发起连接请求，通过三次握手建立连接，如果连接建立成功，双方就可以通过网络套接字(Socket) 进行通信。 在基于传统同步阻塞</description>
    </item>
    <item>
      <title>Selector、SelectionKey及Channel组件</title>
      <link>https://geek.zshipu.com/post/code/docs/Netty/IOTechnologyBase/SelectorSelectionKey%E5%8F%8AChannel%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 06 Mar 2024 11:39:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Netty/IOTechnologyBase/SelectorSelectionKey%E5%8F%8AChannel%E7%BB%84%E4%BB%B6/</guid>
      <description>Selector、SelectionKey 和 Channel 这三个组件构成了 Java nio 包的核心，也是 Reactor 模型在代码层面的体现。Selector 能让单线程同时处理多个客户端 Channel，非常适用于高并发，传输数据量较小的场景。要使用 Selector，首先要将对应的 Channel 及 IO 事件（读、写、连接）注册到 Sel</description>
    </item>
    <item>
      <title>IO模型</title>
      <link>https://geek.zshipu.com/post/code/docs/Netty/IOTechnologyBase/IO%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 06 Mar 2024 11:38:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Netty/IOTechnologyBase/IO%E6%A8%A1%E5%9E%8B/</guid>
      <description>Linux 网络 IO 模型简介 Linux 的内核将所有外部设备都看做一个文件来操作，对一个文件的读写操作会调用内核提供的系统命令，返回一个 fd (file descriptor，文件描述符)。而对一个 socket 的读写也会有相应的描述符，称为 socket fd (socket 描述符)，描述符就是一个数字，它指向内核中的一个结构体(文件路径，数据区等一些属</description>
    </item>
  </channel>
</rss>
