<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sentinel on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/Sentinel/</link>
    <description>Recent content in Sentinel on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Mar 2024 12:07:00 +0000</lastBuildDate>
    <atom:link href="https://geek.zshipu.com/tags/Sentinel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sentinel限流算法的实现</title>
      <link>https://geek.zshipu.com/post/code/docs/Sentinel/Sentinel%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 06 Mar 2024 12:07:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Sentinel/Sentinel%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>Sentinel 中漏桶算法的实现 Sentinel 中漏桶算法通过 RateLimiterController 来实现，在漏桶算法中，会记录上一个请求的到达时间，如果新到达的请求与上一次到达的请求之间的时间差小于限流配置所规定的最小时间，新到达的请求将会排队等待规定的最小间隔到达，或是直接失败。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</description>
    </item>
    <item>
      <title>Sentinel时间窗口的实现</title>
      <link>https://geek.zshipu.com/post/code/docs/Sentinel/Sentinel%E6%97%B6%E9%97%B4%E7%AA%97%E5%8F%A3%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 06 Mar 2024 12:06:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Sentinel/Sentinel%E6%97%B6%E9%97%B4%E7%AA%97%E5%8F%A3%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>获取时间窗口的主要流程 在 Sentinel 中，主要是通过 LeapArray 类来实现滑动时间窗口的实现和选择。在 sentinel 的这个获取时间窗口并为时间窗口添加指标的过程中，主要的流程为： 根据当前时间选择当前时间应该定位当前时间应该属于的时间窗口 id。 根据时间窗口 id 获取时间窗口。这里可能会存在四种情况： 时间窗口还未建立，那么</description>
    </item>
    <item>
      <title>Sentinel底层LongAdder的计数实现</title>
      <link>https://geek.zshipu.com/post/code/docs/Sentinel/Sentinel%E5%BA%95%E5%B1%82LongAdder%E7%9A%84%E8%AE%A1%E6%95%B0%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 06 Mar 2024 12:05:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Sentinel/Sentinel%E5%BA%95%E5%B1%82LongAdder%E7%9A%84%E8%AE%A1%E6%95%B0%E5%AE%9E%E7%8E%B0/</guid>
      <description>LongAdder 的原理 在 LongAdder 中，底层通过多个数值进行累加来得到最后的结果。当多个线程对同一个 LongAdder 进行更新的时候，将会对这一些列的集合进行动态更新，以避免多线程之间的资源竞争。当需要得到 LongAdder 的具体的值的时候，将会将一系列的值进行求和作为最后的结果。 在高并发的竞争下进行类似指标数据的收集的时候，Long</description>
    </item>
  </channel>
</rss>
