<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/go/</link>
    <description>Recent content in go on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 01 Nov 2020 11:10:05 +0800</lastBuildDate><atom:link href="https://geek.zshipu.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go基础系列：Go模块v2 和 Beyond</title>
      <link>https://geek.zshipu.com/post/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97Go%E6%A8%A1%E5%9D%97v2-%E5%92%8C-Beyond/</link>
      <pubDate>Sun, 01 Nov 2020 11:10:05 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97Go%E6%A8%A1%E5%9D%97v2-%E5%92%8C-Beyond/</guid>
      <description>随着成功的项目的成熟和新的要求被添加，过去的功能和设计决策可能会停止意义。开发人员可能希望通过删除已弃用函数、重命名类型或将复杂包拆分为可管理部分来整合他们学到的经验教训。这些类型的更改需要下游用户努力将代码迁移到新的 API，因此不应在不考虑收益大于成本的情况下进行这些更改。 对于</description>
    </item>
    
    <item>
      <title>Go基础系列：发布 Go 模块</title>
      <link>https://geek.zshipu.com/post/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E5%8F%91%E5%B8%83-Go-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 01 Nov 2020 11:08:22 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E5%8F%91%E5%B8%83-Go-%E6%A8%A1%E5%9D%97/</guid>
      <description>请注意：这篇文章涵盖了开发，包括。如果你有兴趣，请参阅去模块：v2和Beyond。v1``````v2 这篇文章在示例中使用了 Gitmercurialbazaar，和其他人也得到支持。 项目设置 对于此帖子，您需要一个现有项目作为示例。因此，从&amp;quot;使用转到模块&amp;quot;文章末</description>
    </item>
    
    <item>
      <title>Go基础系列：迁移转到模块</title>
      <link>https://geek.zshipu.com/post/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E8%BF%81%E7%A7%BB%E8%BD%AC%E5%88%B0%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 01 Nov 2020 11:05:44 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E8%BF%81%E7%A7%BB%E8%BD%AC%E5%88%B0%E6%A8%A1%E5%9D%97/</guid>
      <description>Go 项目使用各种依赖项管理策略。dep和滑翔等供应商工具很受欢迎，但它们在行为上存在很大差异，而且并不总是很好地协同工作。某些项目将其整个 GOPATH 目录存储在单个 Git 存储库中。其他人只是依赖并期望在 GOPATH 中安装相当新版本的依赖项。go get Go 的模块系统在 Go 1.11 中引入，它提供了命令中内置的官方依赖管理解</description>
    </item>
    
    <item>
      <title>Go基础系列：使用 Go 模块</title>
      <link>https://geek.zshipu.com/post/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8-Go-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 01 Nov 2020 11:03:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8-Go-%E6%A8%A1%E5%9D%97/</guid>
      <description>Go 1.11 和 1.12 包括对模块的初步支持，Go 的新依赖项管理系统使依赖关系版本信息明确且更易于管理。本文介绍了开始使用模块所需的基本操作。 模块是存储在文件树中的 Go包的集合，其根目录有文件。该文件定义了模块的模块_路径_，这也是用于根目录的导入路径，以及其依赖项_要求_，这是成功生成所需的其</description>
    </item>
    
  </channel>
</rss>
