<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/go/</link>
    <description>Recent content in go on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 23 Mar 2022 21:50:17 +0800</lastBuildDate><atom:link href="https://geek.zshipu.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入理解Go的GC回收机制</title>
      <link>https://geek.zshipu.com/post/go/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Go%E7%9A%84GC%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 23 Mar 2022 21:50:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Go%E7%9A%84GC%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>GC：Garbage Collection（垃圾回收是编程语言中提供的自动的内存管理机制，自动释放不需要的内存对象，让出存储器资源。）GC过程中无需程序员手动执行，GC机制在现代很多编程语言都支持，GC能力的性能与优劣也是不同语言之间对比度指标之一。 关于Golang的GC在演进过程</description>
    </item>
    
    <item>
      <title>Golang通过http.NewRequest实现模拟请求，添加请求头</title>
      <link>https://geek.zshipu.com/post/go/Golang%E9%80%9A%E8%BF%87http.NewRequest%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B41/</link>
      <pubDate>Wed, 22 Sep 2021 16:45:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Golang%E9%80%9A%E8%BF%87http.NewRequest%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B41/</guid>
      <description>Golang 通过 http.NewRequest 实现模拟请求，添加请求头和请求参数： func DownloadString(remoteUrl string,queryValues url.Values) (body []byte,err error){ client := &amp;amp;http.Client{}; body = nil; uri,err := url.Parse(remoteUrl); if(err != nil){ return ; } if(queryValues != nil){ values := uri.Query(); if(values != nil){ for k,v := range values { queryValues[k] = v; } } uri.RawQuery = queryValues.Encode(); } reqest, err := http.NewRequest(&amp;quot;GET&amp;quot;,uri.String(),nil); reqest.Header.Add(&amp;quot;Accept&amp;quot;, &amp;quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&amp;quot;); reqest.Header.Add(&amp;quot;Accept-Encoding&amp;quot;, &amp;quot;gzip, deflate&amp;quot;); reqest.Header.Add(&amp;quot;Accept-Language&amp;quot;, &amp;quot;zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3&amp;quot;); reqest.Header.Add(&amp;quot;Connection&amp;quot;, &amp;quot;keep-alive&amp;quot;); reqest.Header.Add(&amp;quot;Host&amp;quot;, uri.Host); reqest.Header.Add(&amp;quot;Referer&amp;quot;, uri.String()); reqest.Header.Add(&amp;quot;User-Agent&amp;quot;, &amp;quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0&amp;quot;); response, err := client.Do(reqest) defer response.Body.Close(); if(err != nil){ return ; } if response.StatusCode == 200 { switch response.Header.Get(&amp;quot;Content-Encoding&amp;quot;) { case &amp;quot;gzip&amp;quot;: reader, _ := gzip.NewReader(response.Body) for { buf := make([]byte, 1024) n, err := reader.Read(buf) if err != nil &amp;amp;&amp;amp; err != io.EOF { panic(err)</description>
    </item>
    
    <item>
      <title>Golang通过http.NewRequest实现模拟请求，添加请求头</title>
      <link>https://geek.zshipu.com/post/go/Golang%E9%80%9A%E8%BF%87http.NewRequest%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B4/</link>
      <pubDate>Wed, 22 Sep 2021 16:42:05 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Golang%E9%80%9A%E8%BF%87http.NewRequest%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B4/</guid>
      <description>Golang通过http.NewRequest实现模拟请求，添加请求头和请求参数 func DownloadString(remoteUrl string,queryValues url.Values) (body []byte,err error){ client := &amp;amp;http.Client{}; body = nil; uri,err := url.Parse(remoteUrl); if(err != nil){ return ; } if(queryValues != nil){ values := uri.Query(); if(values != nil){ for k,v := range values { queryValues[k] = v; } } uri.RawQuery = queryValues.Encode(); } reqest, err := http.NewRequest(&amp;quot;GET&amp;quot;,uri.String(),nil); reqest.Header.Add(&amp;quot;Accept&amp;quot;, &amp;quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&amp;quot;); reqest.Header.Add(&amp;quot;Accept-Encoding&amp;quot;, &amp;quot;gzip, deflate&amp;quot;); reqest.Header.Add(&amp;quot;Accept-Language&amp;quot;, &amp;quot;zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3&amp;quot;); reqest.Header.Add(&amp;quot;Connection&amp;quot;, &amp;quot;keep-alive&amp;quot;); reqest.Header.Add(&amp;quot;Host&amp;quot;, uri.Host); reqest.Header.Add(&amp;quot;Referer&amp;quot;, uri.String()); reqest.Header.Add(&amp;quot;User-Agent&amp;quot;, &amp;quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0&amp;quot;); response, err := client.Do(reqest) defer response.Body.Close(); if(err != nil){ return ; } if response.StatusCode == 200 { switch response.Header.Get(&amp;quot;Content-Encoding&amp;quot;) { case &amp;quot;gzip&amp;quot;: reader, _ := gzip.NewReader(response.Body) for {</description>
    </item>
    
    <item>
      <title>Go规范：Uber Go 语言编码规范</title>
      <link>https://geek.zshipu.com/post/go/Go%E8%A7%84%E8%8C%83Uber-Go-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Fri, 06 Nov 2020 21:20:59 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E8%A7%84%E8%8C%83Uber-Go-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description>uber-go/guide 的中文翻译 English Uber Go 语言编码规范 Uber 是一家美国硅谷的科技公司，也是 Go 语言的早期 adopter。其开源了很多 golang 项目，诸如被 Gopher 圈熟知的 zap、jaeger 等。2018 年年末 Uber 将内部的 Go 风格规范 开源到 GitHub，经过一年的积累和更新，该规范已经初具规模，并受到广大 Gopher 的关注。本文是该规范的</description>
    </item>
    
    <item>
      <title>Go实战：Go语言实战笔记</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%AE%9E%E6%88%98Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 04 Nov 2020 21:20:40 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%AE%9E%E6%88%98Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</guid>
      <description>Go语言实战笔记 Go语言环境搭建详解 《Go语言实战》笔记(一) | Go包管理 《Go语言实战》笔记(二) Go开发工具 《Go语言实战》笔记(三) | Go Doc 文档 《Go语言实战》笔记(四) | Go 数组 《Go语言实战》笔记(五) | Go 切片 《Go语言实战》笔记(六) | Go Map 《Go语言实战》笔记(七) | Go 类</description>
    </item>
    
    <item>
      <title>Go汇总 2：最优秀的Go博客</title>
      <link>https://geek.zshipu.com/post/go/Go%E6%B1%87%E6%80%BB-2%E6%9C%80%E4%BC%98%E7%A7%80%E7%9A%84Go%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 01 Nov 2020 13:58:20 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E6%B1%87%E6%80%BB-2%E6%9C%80%E4%BC%98%E7%A7%80%E7%9A%84Go%E5%8D%9A%E5%AE%A2/</guid>
      <description>Go优秀博客 周刊类 Golang weekly Golang Weekly https://golangweekly.com/ https://golangweekly.com/issues/254 Go夜读 Go 每日阅读和 Go 夜读 &amp;gt; Daily Reading Go and Night Reading Go - Go source reading and offline technical or another articles or discussion on every night. https://github.com/developer-learning/reading-go Go 夜读 https://reading.developerlearning.cn/ Go夜读 at Bilibili https://space.bilibili.com/326749661 个人类 Tony Bai Tony Bai 一个程序员的心路历程 https://tonybai.com/ 理解Golang包导入 https://tonybai.com/2015/03/09/understanding-import-packages/ &amp;ldquo;实际测试结果告诉我们：(1)在使用第三方包的时候，当源码和.a均已安装的情况下，</description>
    </item>
    
    <item>
      <title>Go汇总 1：最全面的go语言学习圣地</title>
      <link>https://geek.zshipu.com/post/go/Go%E6%B1%87%E6%80%BB-1%E6%9C%80%E5%85%A8%E9%9D%A2%E7%9A%84go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E5%9C%A3%E5%9C%B0/</link>
      <pubDate>Sun, 01 Nov 2020 13:57:03 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E6%B1%87%E6%80%BB-1%E6%9C%80%E5%85%A8%E9%9D%A2%E7%9A%84go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E5%9C%A3%E5%9C%B0/</guid>
      <description>Go general 怎么学习 Golang？ https://www.zhihu.com/question/23486344 怎么学习 Golang？ - 知乎用户的回答 - 知乎 https://www.zhihu.com/question/23486344/answer/24785991 Project Euler https://projecteuler.net/ 怎么学习 Golang？ - cholerae的回答 - 知乎 https://www.zhihu.com/question/23486344/answer/130837179 The Go Programming Language https://golang.org/doc/ A Tour of Go https://tour.golang.org/welcome/ Go語言聖經（中文版） https://www.gitbook.com/book/wizardforcel/gopl-zh/details https://www.gitbook.com/@wizardforcel 系统学习GO，推荐几本靠谱的书? - 飞雪无情的回答 - 知乎 https://www.zhihu.com/question/30461290/answer/210414739 Go编程语言 https://go-zh.org/doc/ Go指南 https://tour.go-zh.org/welcome/ Go语言圣经 https://www.gitbook.com/book/yar999/gopl-zh/details 然后通</description>
    </item>
    
    <item>
      <title>Go基础系列：保持模块兼容</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BF%9D%E6%8C%81%E6%A8%A1%E5%9D%97%E5%85%BC%E5%AE%B9/</link>
      <pubDate>Sun, 01 Nov 2020 11:11:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BF%9D%E6%8C%81%E6%A8%A1%E5%9D%97%E5%85%BC%E5%AE%B9/</guid>
      <description>随着您添加新功能、更改行为和重新考虑模块公共表面的某些部分，模块将随着时间的推移而演变。如Go 模块：v2 和以后，对 v1+ 模块的中断更改必须作为主要版本颠簸的一部分（或采用新的模块路径）发生。 但是，发布新的主要版本对用户来说很难。他们必须找到新版本，学习新的 API，并更改他们的代码。有</description>
    </item>
    
    <item>
      <title>Go基础系列：Go模块v2 和 Beyond</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97Go%E6%A8%A1%E5%9D%97v2-%E5%92%8C-Beyond/</link>
      <pubDate>Sun, 01 Nov 2020 11:10:05 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97Go%E6%A8%A1%E5%9D%97v2-%E5%92%8C-Beyond/</guid>
      <description>随着成功的项目的成熟和新的要求被添加，过去的功能和设计决策可能会停止意义。开发人员可能希望通过删除已弃用函数、重命名类型或将复杂包拆分为可管理部分来整合他们学到的经验教训。这些类型的更改需要下游用户努力将代码迁移到新的 API，因此不应在不考虑收益大于成本的情况下进行这些更改。 对于</description>
    </item>
    
    <item>
      <title>Go基础系列：发布 Go 模块</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E5%8F%91%E5%B8%83-Go-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 01 Nov 2020 11:08:22 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E5%8F%91%E5%B8%83-Go-%E6%A8%A1%E5%9D%97/</guid>
      <description>请注意：这篇文章涵盖了开发，包括。如果你有兴趣，请参阅去模块：v2和Beyond。v1``````v2 这篇文章在示例中使用了 Gitmercurialbazaar，和其他人也得到支持。 项目设置 对于此帖子，您需要一个现有项目作为示例。因此，从&amp;quot;使用转到模块&amp;quot;文章末</description>
    </item>
    
    <item>
      <title>Go基础系列：迁移转到模块</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E8%BF%81%E7%A7%BB%E8%BD%AC%E5%88%B0%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 01 Nov 2020 11:05:44 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E8%BF%81%E7%A7%BB%E8%BD%AC%E5%88%B0%E6%A8%A1%E5%9D%97/</guid>
      <description>Go 项目使用各种依赖项管理策略。dep和滑翔等供应商工具很受欢迎，但它们在行为上存在很大差异，而且并不总是很好地协同工作。某些项目将其整个 GOPATH 目录存储在单个 Git 存储库中。其他人只是依赖并期望在 GOPATH 中安装相当新版本的依赖项。go get Go 的模块系统在 Go 1.11 中引入，它提供了命令中内置的官方依赖管理解</description>
    </item>
    
    <item>
      <title>Go基础系列：使用 Go 模块</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8-Go-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 01 Nov 2020 11:03:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8-Go-%E6%A8%A1%E5%9D%97/</guid>
      <description>Go 1.11 和 1.12 包括对模块的初步支持，Go 的新依赖项管理系统使依赖关系版本信息明确且更易于管理。本文介绍了开始使用模块所需的基本操作。 模块是存储在文件树中的 Go包的集合，其根目录有文件。该文件定义了模块的模块_路径_，这也是用于根目录的导入路径，以及其依赖项_要求_，这是成功生成所需的其</description>
    </item>
    
  </channel>
</rss>
