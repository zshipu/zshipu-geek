<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/golang/</link>
    <description>Recent content in golang on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 13 Oct 2020 22:35:06 +0800</lastBuildDate><atom:link href="https://geek.zshipu.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang实践：使用 Go &#43; 第 2 部分创建 RESTful 服务</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go-&#43;-%E7%AC%AC-2-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA-RESTful-%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 13 Oct 2020 22:35:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go-&#43;-%E7%AC%AC-2-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA-RESTful-%E6%9C%8D%E5%8A%A1/</guid>
      <description>什么是 RESTful 服务？ REST 是一种用于设计 Web 服务的体系结构方法。REST API 是围绕_资源_设计的，资源是客户端可以访问的任何类型的对象、数据或服务。资源具有标识符_，_它是唯一标识该资源的 URI。例如，特定客户订单的 URI 可能是：https://adventure-works.com/orders</description>
    </item>
    
    <item>
      <title>Golang实践：使用 Go&#43; 第 1 部分创建微服务</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go&#43;-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 13 Oct 2020 22:32:37 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go&#43;-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>来自JavaScript的背景，我一直想学习一种静态类型的编程语言，今年早些时候，我拿起Golang后，阅读了有关语言的评论，Golang得到了谷歌的支持。哦， 当然， 流行的 Devops 工具， 如码头， 库伯内特， Terraform， 是用Golang建造的。在通过 freecodecamp 从这个令人敬畏的教程中选取基础</description>
    </item>
    
    <item>
      <title>Golang实践：Golang的 3 个陷阱</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5Golang%E7%9A%84-3-%E4%B8%AA%E9%99%B7%E9%98%B1/</link>
      <pubDate>Tue, 13 Oct 2020 22:20:16 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5Golang%E7%9A%84-3-%E4%B8%AA%E9%99%B7%E9%98%B1/</guid>
      <description>在过去的一年里，我们一直在开发一个复杂的半实时生产系统。我们决定和Golang一起写。我们在 Go 中几乎没有经验，所以正如你想象的那样，这不是一件小事。快进一年：该系统在生产中运行，并成为CllimaCell产品的主要支柱之一。精通意味着你有足够的经验来知道你正在使用的平台的陷阱是什</description>
    </item>
    
    <item>
      <title>Golang基础：go语言中的循环</title>
      <link>https://geek.zshipu.com/post/Golang%E5%9F%BA%E7%A1%80go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 11 Oct 2020 21:56:25 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%9F%BA%E7%A1%80go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF/</guid>
      <description>循环允许您重复代码。有不同类型的循环，其中之一是 for 循环。对于Go（golang）中的循环，与 Python 更类似于 C/Java。在 Python 中，语法是 for i in range(1,10):在 C/Java 中，语法为 for (i = 1; i &amp;lt;= 10; i++) {但在Golang for i := 1; i &amp;lt;= 10; i++ {因此，它受到这些语言的启发。 For 循环解释 在上面的程序中，</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（五）| 接收数组和 Map</title>
      <link>https://geek.zshipu.com/2019/12/18/golang-gin-query-parameters-array-map.html</link>
      <pubDate>Wed, 18 Dec 2019 21:55:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/2019/12/18/golang-gin-query-parameters-array-map.html</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（三）| 路由参数</title>
      <link>https://geek.zshipu.com/post/2019-12-13-golang-gin-parameters-in-path/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/2019-12-13-golang-gin-parameters-in-path/</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（三）| 路由参数</title>
      <link>https://geek.zshipu.com/post/2019-12-15-golang-gin-query-parameters-source-code-analysis/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/2019-12-15-golang-gin-query-parameters-source-code-analysis/</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
  </channel>
</rss>
