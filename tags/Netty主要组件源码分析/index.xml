<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Netty主要组件源码分析 on 知识铺的博客</title>
    <link>https://geek.zshipu.com/tags/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
    <description>Recent content in Netty主要组件源码分析 on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Mar 2024 11:47:00 +0000</lastBuildDate>
    <atom:link href="https://geek.zshipu.com/tags/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Future和Promise组件</title>
      <link>https://geek.zshipu.com/post/code/docs/Netty/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Future%E5%92%8CPromise%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 06 Mar 2024 11:47:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Netty/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Future%E5%92%8CPromise%E7%BB%84%E4%BB%B6/</guid>
      <description>Netty 中的 Future 和 Promise 组件是用于处理异步操作结果的两个接口。Future 表示一个异步操作的结果，它可以用于检查操作是否完成、获取操作结果、取消操作等。Promise 是 Future 的子接口，它可以用于设置操作结果、通知操作完成等。以下是 Netty 中 Future 和 Promise 组件的部分代码，并添加了中文注释： 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    <item>
      <title>EventLoop组件</title>
      <link>https://geek.zshipu.com/post/code/docs/Netty/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/EventLoop%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 06 Mar 2024 11:46:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Netty/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/EventLoop%E7%BB%84%E4%BB%B6/</guid>
      <description>Netty 的线程模型 Netty 线程模型 的设计，也是基于 Reactor 模型，尽管不同的 NIO 框架 对于 Reactor 模式 的实现存在差异，但本质上还是遵循了 Reactor 的基础线程模型。 Reactor 单线程模型 Reactor 单线程模型，是指所有的 I/O 操作 都在同一个 NIO 线程 上完成。NIO 线程 的职责如下。 作为 NIO 服务端，接收客户端的 TCP 连接； 作为 NIO 客户端，向服务端发起 TCP 连接；</description>
    </item>
    <item>
      <title>Channel和Unsafe组件</title>
      <link>https://geek.zshipu.com/post/code/docs/Netty/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Channel%E5%92%8CUnsafe%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 06 Mar 2024 11:45:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Netty/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Channel%E5%92%8CUnsafe%E7%BB%84%E4%BB%B6/</guid>
      <description>类似于 java.nio 包 的 Channel，Netty 提供了自己的 Channel 和其子类实现，用于异步 I/O 操作 等。Unsafe 是 Channel 的内部接口，聚合在 Channel 中协助进行网络读写相关的操作，因为它的设计初衷就是 Channel 的内部辅助类，不应该被 Netty 框架 的上层使用者调用，所以被命名为 Unsafe。 Channel 组件 Netty 的 Channel 组件 是 Netty 对网络操作的封装</description>
    </item>
    <item>
      <title>ChannelPipeline和ChannelHandler组件</title>
      <link>https://geek.zshipu.com/post/code/docs/Netty/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ChannelPipeline%E5%92%8CChannelHandler%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 06 Mar 2024 11:44:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Netty/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ChannelPipeline%E5%92%8CChannelHandler%E7%BB%84%E4%BB%B6/</guid>
      <description>Netty 的 ChannelPipeline 和 ChannelHandler 机制类似于 Servlet 和 Filter 过滤器，这类拦截器实际上是职责链模式的一种变形，主要是为了方便事件的拦截和用户业务逻辑的定制。 Servlet Filter 能够以声明的方式（web.xml 配置文件）插入到 HTTP 请求响应的处理过程中，用于拦截请求和响应，以便能够查看、提取或以某种方式操作正在客户端和服务器之间交换的数</description>
    </item>
    <item>
      <title>ByteBuf组件</title>
      <link>https://geek.zshipu.com/post/code/docs/Netty/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ByteBuf%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 06 Mar 2024 11:43:00 +0000</pubDate>
      <guid>https://geek.zshipu.com/post/code/docs/Netty/Netty%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ByteBuf%E7%BB%84%E4%BB%B6/</guid>
      <description>Netty 中的 ByteBuf 组件是一个高性能的字节缓冲区，它可以用于网络通信、文件 IO 等场景。ByteBuf 的实现基于 Netty 的内存管理机制，可以有效地减少内存拷贝和内存分配的开销。以下是 Netty 中 ByteBuf 组件的部分代码，并添加了中文注释： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40</description>
    </item>
  </channel>
</rss>
