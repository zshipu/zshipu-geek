<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>知识铺的博客</title>
    <link>https://geek.zshipu.com/</link>
    <description>Recent content on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 01 Nov 2020 11:03:06 +0800</lastBuildDate><atom:link href="https://geek.zshipu.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go基础系列：使用 Go 模块</title>
      <link>https://geek.zshipu.com/post/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8-Go-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 01 Nov 2020 11:03:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8-Go-%E6%A8%A1%E5%9D%97/</guid>
      <description>Go 1.11 和 1.12 包括对模块的初步支持，Go 的新依赖项管理系统使依赖关系版本信息明确且更易于管理。本文介绍了开始使用模块所需的基本操作。 模块是存储在文件树中的 Go包的集合，其根目录有文件。该文件定义了模块的模块_路径_，这也是用于根目录的导入路径，以及其依赖项_要求_，这是成功生成所需的其</description>
    </item>
    
    <item>
      <title>Python基础：Python文件打开</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80/</link>
      <pubDate>Sun, 25 Oct 2020 20:23:38 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80/</guid>
      <description>Python文件打开 打开服务器上的文件 假设我们有以下文件，位于与 Python 相同的文件夹中： test. txt Hello! Welcome to demofile.txt This file is for testing purposes. Good Luck! 若要打开文件，请使用内置函数。open() 函数返回一个文件对象，该对象具有读取文件内容的方法：open()``````read() 例子 f = open(&amp;quot;demofile.txt&amp;quot;, &amp;quot;r&amp;quot;) print(f.read()) 如果文件位于其他位置，则必</description>
    </item>
    
    <item>
      <title>Python基础：Python文件操作</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 25 Oct 2020 20:09:11 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>Python文件操作 文件处理是任何 Web 应用程序的重要组成部分。 Python 具有多个用于创建、读取、更新和删除文件的函数。 文件处理 使用 Python 中的文件的关键功能是该函数。open() 函数采用两个参数;文件名_和_模式。open() 打开文件有四种不同的方法（模式）： &amp;quot;r&amp;quot;- 读取 - 默认值。打开文件进行读取，如</description>
    </item>
    
    <item>
      <title>Python基础：Python字符串格式</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Sun, 25 Oct 2020 20:05:49 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F/</guid>
      <description>Python字符串格式 若要确保字符串将像预期的那样显示，我们可以使用 方法对结果进行格式设置。format() 字符串格式（） 该方法允许您格式化字符串的选定部分。format() 有时，有些文本部分您无法控制，可能它们来自数据库，或者用户输入？ 若要控制这些值，请添加文本中的占位符（卷曲</description>
    </item>
    
    <item>
      <title>Python基础：Python user input 接收</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-user-input-%E6%8E%A5%E6%94%B6/</link>
      <pubDate>Sun, 25 Oct 2020 20:04:39 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-user-input-%E6%8E%A5%E6%94%B6/</guid>
      <description>Python user input 接收 user_input Python 允许用户输入。 这意味着我们可以向用户请求输入。 在 Python 3.6 中，该方法与 Python 2.7 方法略有不同。 Python 3.6 使用该方法。input() Python 2.7 使用该方法。raw_input() 下面的示例要求使用用户名，当您输入用户名时，它会在屏幕上打印出来： Python 3.6 username = input(&amp;quot;Enter username:&amp;quot;) print(&amp;quot;Username is: &amp;quot; + username) Python 2.7 username = raw_input(&amp;quot;Enter username:&amp;quot;) print(&amp;quot;Username is: &amp;quot; + username) Python 在函</description>
    </item>
    
    <item>
      <title>Python基础：Python try except</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-try-except/</link>
      <pubDate>Sun, 25 Oct 2020 20:03:01 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-try-except/</guid>
      <description>Python try except 该块允许您测试代码块的错误。try 该块允许您处理错误。except 该块允许您执行代码，而不管 try- 和除块的结果如何。finally 异常处理 当发生错误或我们称之为异常时，Python 通常会停止并生成错误消息。 可以使用 语句处理这些异常：try 例子 块将生成异常，因为未定义：try``</description>
    </item>
    
    <item>
      <title>Python基础：Python pip 包管理器</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-pip-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</link>
      <pubDate>Sun, 25 Oct 2020 19:49:50 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-pip-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</guid>
      <description>Python Pip 什么是 PIP？ PIP 是 Python 包的包管理器，或者如果您喜欢，也可以是模块。 **注：**如果您有 Python 版本 3.4 或更晚，则默认情况下包括 PIP。 什么是Package？ 包包含模块所需的所有文件。 模块是 Python 代码库，您可以在项目中包含。 检查 PIP 是否已安装 将命令行导航到 Python 的脚本目录的位置，然后键入以下内容：</description>
    </item>
    
    <item>
      <title>Python基础：Python Regx 正则表达式</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Regx-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-/</link>
      <pubDate>Sun, 25 Oct 2020 19:47:09 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Regx-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-/</guid>
      <description>Python RegEx RegEx 或正则表达式是组成搜索模式的字符序列。 RegEx 可用于检查字符串是否包含指定的搜索模式。 正则表达式模块 Python 有一个名为 的内置包，可用于使用正则表达式。re 导入模块：re import re Python 中的 RegEx 导入模块后，可以开始使用正则表达式：re 例子 搜索字符串以查看其是否以&amp;quot;The&amp;quot;开头，以</description>
    </item>
    
    <item>
      <title>Python基础：Python Json</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Json/</link>
      <pubDate>Sun, 25 Oct 2020 19:44:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Json/</guid>
      <description>Python Json JSON 是一种用于存储和交换数据的语法。 JSON 是文本，使用 JavaScript 对象表示法编写。 Python 中的 Json Python 有一个名为 的内置包，可用于处理 JSON 数据。json 例子 导入 json 模块： import json 解析 Json - 从 Json 转换为 Python 如果您有 JSON 字符串，可以使用 方法分析它。json.loads() 结果将是Python字典。 例子 从 JSON 转换为 Python</description>
    </item>
    
    <item>
      <title>Python基础：Python数学函数</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 25 Oct 2020 19:41:55 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/</guid>
      <description>Python数学函数 Python 有一组内置的数学函数，包括一个广泛的数学模块，允许您对数字执行数学任务。 内置数学函数 和 函数可用于查找可重复值中的最低值或最高值：min()``````max() 例子 x = min(5, 10, 25) y = max(5, 10, 25) print(x) print(y) 函数返回指定数字的绝对（正）值：abs() 例子 x = abs(-7.25) print(x) 函数将 x 的值返回</description>
    </item>
    
    <item>
      <title>Python基础：Python日期时间</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sun, 25 Oct 2020 19:39:52 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</guid>
      <description>Python日期时间 Python 日期 Python 中的日期不是它自己的数据类型，但我们可以导入名为的模块，以将日期用作日期对象。datetime 例子 导入日期时间模块并显示当前日期： import datetime x = datetime.datetime.now() print(x) 日期输出 当我们从上面的示例执行代码时，结果将是： &amp;lt;script&amp;gt;cc = &amp;quot;2018/05/06 09:30:20&amp;quot; var d = new Date(); var m = d.getMonth() + 1; if (m &amp;lt; 10) m = &amp;quot;0&amp;quot; + m var day = d.getDate(); if (day &amp;lt;</description>
    </item>
    
    <item>
      <title>Python基础：Python 模块</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 25 Oct 2020 19:38:23 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E6%A8%A1%E5%9D%97/</guid>
      <description>Python 模块 什么是模块？ 将模块视为与代码库相同。 包含要在应用程序中包含的一组函数的文件。 创建模块 若要创建模块，只需将要保存的代码保存在文件扩展名的文件中：.py 例子 将此代码保存在名为mymodule.py def greeting(name): print(&amp;quot;Hello, &amp;quot; + name) ## 使用模块 &amp;lt;font _mstmutation=&amp;quot;1&amp;quot; _msthash=&amp;quot;104507&amp;quot; _msttexthash=&amp;quot;17282946</description>
    </item>
    
    <item>
      <title>Python基础：Python 作用域</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Sun, 25 Oct 2020 19:36:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>Python 作用域 变量仅从创建它的地区内部可用。这称为** 作用域**。 本地 作用域 在函数内创建的变量属于_该函数的_本地 作用域，只能在该函数内使用。 例子 在函数内创建的变量在函数内可用： def myfunc(): x = 300 print(x) myfunc() 函数内函数 如上例所述，该变量在函数之外不可用，但它可用于函数内的任何函数：x 例子 可以从函数中的</description>
    </item>
    
    <item>
      <title>Python基础：Python iterators</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-iterators/</link>
      <pubDate>Sun, 25 Oct 2020 19:33:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-iterators/</guid>
      <description>Python iterators Python iterators 活动器是包含可计数值数的对象。 遍历器是可遍历的对象，这意味着您可以遍历所有值。 从技术上讲，在 Python 中，一个数据器是实现引用器协议的对象，它由方法和 组成。__iter__()``````__next__() 可移动器与可移动 列表、元组、字典和集都是可重复的对象。它们是可重复_的容</description>
    </item>
    
    <item>
      <title>Python基础：Python继承</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sun, 25 Oct 2020 19:26:56 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E7%BB%A7%E6%89%BF/</guid>
      <description>Python继承 Python 继承 继承允许我们定义一个类，该类从另一个类继承所有方法和属性。 父类是从继承的类，也称为基类。 子类是从另一个类继承的类，也称为派生类。 创建父类 任何类都可以是父类，因此语法与创建任何其他类相同： 例子 创建名为 的 类，带 和 属性，以及方法：Person``````first</description>
    </item>
    
    <item>
      <title>Python基础：Python类和对象</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 25 Oct 2020 19:25:18 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</guid>
      <description>Python类和对象 Python 类/对象 Python 是一种面向对象的编程语言。 Python 中的几乎所有内容都是一个对象，其属性和方法。 类就像对象构造函数，或用于创建对象的&amp;quot;蓝图&amp;quot;。 创建类 若要创建类，请使用 关键字 ：class 例子 创建名为 MyClass 的类，其属性名为 x： class MyClass: x = 5 创建对象 现在，我们可以使</description>
    </item>
    
    <item>
      <title>Python基础：Python 阵列</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E9%98%B5%E5%88%97/</link>
      <pubDate>Sun, 25 Oct 2020 19:08:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E9%98%B5%E5%88%97/</guid>
      <description>Python 阵列 **注：**Python 没有对数组的内置支持，但可以使用 Python列表。 阵 列 **注：**本页演示如何使用列表作为 ARRAYS，但是，要使用 Python 中的数组，您必须导入库，如NumPy 库。 数组用于在单个变量中存储多个值： 例子 创建包含车名的数组： cars = [&amp;quot;Ford&amp;quot;, &amp;quot;Volvo&amp;quot;, &amp;quot;BMW&amp;quot;] 什么是阵列？ 数组是一个特殊</description>
    </item>
    
    <item>
      <title>Python基础：Python 阵列</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E9%98%B5%E5%88%97_20201025191937-z7p701j.sy/</link>
      <pubDate>Sun, 25 Oct 2020 19:08:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E9%98%B5%E5%88%97_20201025191937-z7p701j.sy/</guid>
      <description>Python 阵列 **注：**Python 没有对数组的内置支持，但可以使用 Python列表。 阵 列 **注：**本页演示如何使用列表作为 ARRAYS，但是，要使用 Python 中的数组，您必须导入库，如NumPy 库。 数组用于在单个变量中存储多个值： 例子 创建包含车名的数组： cars = [&amp;quot;Ford&amp;quot;, &amp;quot;Volvo&amp;quot;, &amp;quot;BMW&amp;quot;] 什么是阵列？ 数组是一个特殊</description>
    </item>
    
    <item>
      <title>Python基础：Python Lambda</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Lambda/</link>
      <pubDate>Sun, 25 Oct 2020 18:56:31 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Lambda/</guid>
      <description>Python Lambda lambda 函数是一个小的匿名函数。 lambda 函数可以接受任何数量的参数，但只能有一个表达式。 语法 lambda arguments : expression 执行表达式并返回结果： 例子 向 参数 添加 10，并返回结果：a x = lambda a : a + 10 print(x(5)) Lambda 函数可以具有多数个参数： 例子 将参数与参数相乘并返回结果：a b x = lambda a, b : a * b print(x(5, 6)) 例子 总结参数 、和 并返回结果：a</description>
    </item>
    
    <item>
      <title>Python基础：Python Lambda</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Lambda_20201025191937-6f82fwz.sy/</link>
      <pubDate>Sun, 25 Oct 2020 18:56:31 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Lambda_20201025191937-6f82fwz.sy/</guid>
      <description>Python Lambda lambda 函数是一个小的匿名函数。 lambda 函数可以接受任何数量的参数，但只能有一个表达式。 语法 lambda arguments : expression 执行表达式并返回结果： 例子 向 参数 添加 10，并返回结果：a x = lambda a : a + 10 print(x(5)) Lambda 函数可以具有多数个参数： 例子 将参数与参数相乘并返回结果：a b x = lambda a, b : a * b print(x(5, 6)) 例子 总结参数 、和 并返回结果：a</description>
    </item>
    
    <item>
      <title>Python基础：Python函数</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 25 Oct 2020 18:53:55 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%87%BD%E6%95%B0/</guid>
      <description>Python函数 函数是仅在调用时运行的代码块。 您可以将数据（称为参数）传递到函数中。 因此，函数可以返回数据。 创建函数 在 Python 中，函数使用def 关键字定义： 例子 def my_function(): print(&amp;quot;Hello from a function&amp;quot;) 调用函数 若要调用函数，请使用函数名称后跟括号： 例子 def my_function(): print(&amp;quot;Hello from a function&amp;quot;) **my_function()** 参数 信息可以作为参数传递到函数中。 参数在函数名称之</description>
    </item>
    
    <item>
      <title>Python基础：Python函数</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%87%BD%E6%95%B0_20201025191937-m72qqkh.sy/</link>
      <pubDate>Sun, 25 Oct 2020 18:53:55 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%87%BD%E6%95%B0_20201025191937-m72qqkh.sy/</guid>
      <description>Python函数 函数是仅在调用时运行的代码块。 您可以将数据（称为参数）传递到函数中。 因此，函数可以返回数据。 创建函数 在 Python 中，函数使用def 关键字定义： 例子 def my_function(): print(&amp;quot;Hello from a function&amp;quot;) 调用函数 若要调用函数，请使用函数名称后跟括号： 例子 def my_function(): print(&amp;quot;Hello from a function&amp;quot;) **my_function()** 参数 信息可以作为参数传递到函数中。 参数在函数名称之</description>
    </item>
    
    <item>
      <title>Python基础：Python for 循环</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-for-%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 25 Oct 2020 18:51:51 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-for-%E5%BE%AA%E7%8E%AF/</guid>
      <description>Python for 循环 Python for 循环 for循环用于在序列（列表、元组、字典、集或字符串）上迭代。 这与其他编程语言中的 for关键字不同，它的工作方式更像其他面向对象的编程语言中的一个引用器方法。 使用for循环，我们可以执行一组语句，一次用于列表、元组、集等中的每一项。 例子 在水果列表中打印每个水果： fruits =</description>
    </item>
    
    <item>
      <title>Python基础：Python for 循环</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-for-%E5%BE%AA%E7%8E%AF_20201025191937-v7dsgtf.sy/</link>
      <pubDate>Sun, 25 Oct 2020 18:51:51 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-for-%E5%BE%AA%E7%8E%AF_20201025191937-v7dsgtf.sy/</guid>
      <description>Python for 循环 Python for 循环 for循环用于在序列（列表、元组、字典、集或字符串）上迭代。 这与其他编程语言中的 for关键字不同，它的工作方式更像其他面向对象的编程语言中的一个引用器方法。 使用for循环，我们可以执行一组语句，一次用于列表、元组、集等中的每一项。 例子 在水果列表中打印每个水果： fruits =</description>
    </item>
    
    <item>
      <title>Python基础：Python 循环</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 25 Oct 2020 18:50:04 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%BE%AA%E7%8E%AF/</guid>
      <description>Python 循环 Python 循环 Python 有两个基元循环命令： while loops for loops while 循环 使用while 循环，我们可以执行一组语句，只要条件为 true。 例子 打印 i 只要 i 小于 6： i = 1 while i &amp;lt; 6: print(i) i += 1 **注意：**请记住增加 i，否则循环将永远继续。 while 循环需要相关变量准备就绪，在此示例中，我们需要定义一个索引变量i，我们将其</description>
    </item>
    
    <item>
      <title>Python基础：Python 循环</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%BE%AA%E7%8E%AF_20201025191937-umw8hbc.sy/</link>
      <pubDate>Sun, 25 Oct 2020 18:50:04 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%BE%AA%E7%8E%AF_20201025191937-umw8hbc.sy/</guid>
      <description>Python 循环 Python 循环 Python 有两个基元循环命令： while loops for loops while 循环 使用while 循环，我们可以执行一组语句，只要条件为 true。 例子 打印 i 只要 i 小于 6： i = 1 while i &amp;lt; 6: print(i) i += 1 **注意：**请记住增加 i，否则循环将永远继续。 while 循环需要相关变量准备就绪，在此示例中，我们需要定义一个索引变量i，我们将其</description>
    </item>
    
    <item>
      <title>Python基础：Python If 语句</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-If-%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sun, 25 Oct 2020 18:48:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-If-%E8%AF%AD%E5%8F%A5/</guid>
      <description>Python If 语句 Python 条件和 If 语句 Python 支持数学中通常的逻辑条件： 等于： a = b 不等于： a ！ = b 小于： &amp;lt; b 小于或等于：&amp;lt;= b 大于：a &amp;gt; b 大于或等于：&amp;gt;= b 这些条件可以通过多种方式使用，最常见的是&amp;quot;if 语句&amp;quot;和循环。 使用 if 关键字编写&amp;quot;if语句&amp;quot;。 例</description>
    </item>
    
    <item>
      <title>Python基础：Python If 语句</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-If-%E8%AF%AD%E5%8F%A5_20201025191937-ohar3w0.sy/</link>
      <pubDate>Sun, 25 Oct 2020 18:48:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-If-%E8%AF%AD%E5%8F%A5_20201025191937-ohar3w0.sy/</guid>
      <description>Python If 语句 Python 条件和 If 语句 Python 支持数学中通常的逻辑条件： 等于： a = b 不等于： a ！ = b 小于： &amp;lt; b 小于或等于：&amp;lt;= b 大于：a &amp;gt; b 大于或等于：&amp;gt;= b 这些条件可以通过多种方式使用，最常见的是&amp;quot;if 语句&amp;quot;和循环。 使用 if 关键字编写&amp;quot;if语句&amp;quot;。 例</description>
    </item>
    
    <item>
      <title>Python基础：Python词典</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%AF%8D%E5%85%B8/</link>
      <pubDate>Sun, 25 Oct 2020 17:12:47 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%AF%8D%E5%85%B8/</guid>
      <description>Python词典 字典 字典是无序、可更改和索引的集合。在 Python 字典中，用大括号编写，它们具有键和值。 例子 创建和打印字典： thisdict = { &amp;quot;brand&amp;quot;: &amp;quot;Ford&amp;quot;, &amp;quot;model&amp;quot;: &amp;quot;Mustang&amp;quot;, &amp;quot;year&amp;quot;: 1964 } print(thisdict) 访问项目 您可以通过引用字典的键名称（方括号内）来访问字典的项： 例子 获取&amp;quot;模型&amp;quot;键的值： x = thisdict[&amp;quot;model&amp;quot;] 还有一种称为方法，该方法将为您提</description>
    </item>
    
    <item>
      <title>Python基础：Python词典</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%AF%8D%E5%85%B8_20201025191937-e8ryb6l.sy/</link>
      <pubDate>Sun, 25 Oct 2020 17:12:47 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%AF%8D%E5%85%B8_20201025191937-e8ryb6l.sy/</guid>
      <description>Python词典 字典 字典是无序、可更改和索引的集合。在 Python 字典中，用大括号编写，它们具有键和值。 例子 创建和打印字典： thisdict = { &amp;quot;brand&amp;quot;: &amp;quot;Ford&amp;quot;, &amp;quot;model&amp;quot;: &amp;quot;Mustang&amp;quot;, &amp;quot;year&amp;quot;: 1964 } print(thisdict) 访问项目 您可以通过引用字典的键名称（方括号内）来访问字典的项： 例子 获取&amp;quot;模型&amp;quot;键的值： x = thisdict[&amp;quot;model&amp;quot;] 还有一种称为方法，该方法将为您提</description>
    </item>
    
    <item>
      <title>Python基础：Python sets</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-sets/</link>
      <pubDate>Sun, 25 Oct 2020 17:10:41 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-sets/</guid>
      <description>Python sets 设置 sets是无序和未编制索引的 sets合。在 Python 中， sets用大括号编写。 例子 创建 sets： thisset = {&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;} print(thisset) 注： sets是无序的，因此您无法确定项目按什么顺序显示。 访问项目 不能通过引用索引或键来访问 sets合中的项。 但是，您可以使用 循环遍历 sets项，或使用 关键字询问 sets合中</description>
    </item>
    
    <item>
      <title>Python基础：Python sets</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-sets_20201025191937-u9sbpd0.sy/</link>
      <pubDate>Sun, 25 Oct 2020 17:10:41 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-sets_20201025191937-u9sbpd0.sy/</guid>
      <description>Python sets 设置 sets是无序和未编制索引的 sets合。在 Python 中， sets用大括号编写。 例子 创建 sets： thisset = {&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;} print(thisset) 注： sets是无序的，因此您无法确定项目按什么顺序显示。 访问项目 不能通过引用索引或键来访问 sets合中的项。 但是，您可以使用 循环遍历 sets项，或使用 关键字询问 sets合中</description>
    </item>
    
    <item>
      <title>Python基础：Python tuples</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-tuples/</link>
      <pubDate>Sun, 25 Oct 2020 16:31:24 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-tuples/</guid>
      <description>Python tuples tuples tuples组是有序且不可更改的集合。在 Python tuples对中，用圆形括号书写。 例子 创建tuples组： thistuple = (&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;) print(thistuple) 访问tuples组项目 您可以通过引用方括号内的索引号来访问tuples组项： 例子 打印tuples组中的第二个项目： thistuple = (&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;) print(thistuple[1]) 负索引 负索引表示从末尾开始，指最后一</description>
    </item>
    
    <item>
      <title>Python基础：Python tuples</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-tuples_20201025191937-mts7beo.sy/</link>
      <pubDate>Sun, 25 Oct 2020 16:31:24 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-tuples_20201025191937-mts7beo.sy/</guid>
      <description>Python tuples tuples tuples组是有序且不可更改的集合。在 Python tuples对中，用圆形括号书写。 例子 创建tuples组： thistuple = (&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;) print(thistuple) 访问tuples组项目 您可以通过引用方括号内的索引号来访问tuples组项： 例子 打印tuples组中的第二个项目： thistuple = (&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;) print(thistuple[1]) 负索引 负索引表示从末尾开始，指最后一</description>
    </item>
    
    <item>
      <title>Python基础：Python列表</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%88%97%E8%A1%A8/</link>
      <pubDate>Sun, 25 Oct 2020 16:28:55 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%88%97%E8%A1%A8/</guid>
      <description>Python列表 Python 集合（数组） Python 编程语言有四种集合数据类型： 列表是一个有序且可更改的集合。允许重复的成员。 元组是一个有序且不可更改的集合。允许重复的成员。 Set是无序和未编制索引的集合。没有重复的成员。 字典是无序、可更改和索引的集合。没有重复的成员。 选择集合类型时，了解该类型的属</description>
    </item>
    
    <item>
      <title>Python基础：Python列表</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%88%97%E8%A1%A8_20201025191937-bvfiirn.sy/</link>
      <pubDate>Sun, 25 Oct 2020 16:28:55 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%88%97%E8%A1%A8_20201025191937-bvfiirn.sy/</guid>
      <description>Python列表 Python 集合（数组） Python 编程语言有四种集合数据类型： 列表是一个有序且可更改的集合。允许重复的成员。 元组是一个有序且不可更改的集合。允许重复的成员。 Set是无序和未编制索引的集合。没有重复的成员。 字典是无序、可更改和索引的集合。没有重复的成员。 选择集合类型时，了解该类型的属</description>
    </item>
    
    <item>
      <title>Python基础：Python运算符</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sun, 25 Oct 2020 15:53:03 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>Python运算符 Python 运算符 运算符用于对变量和值执行操作。 Python 将运算符分为以下组： 算术运算符 分配运算符 比较运算符 逻辑运算符 标识运算符 会员运算符 位运算符 Python 算术运算符 算术运算符与数值一起使用，以执行常见的数学运算： | Operator | Name | Example | | + | Addition | x + y | | - | Subtraction | x - y | | * | Multiplication | x * y | | / |</description>
    </item>
    
    <item>
      <title>Python基础：Python运算符</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%BF%90%E7%AE%97%E7%AC%A6_20201025191937-ql8wcyv.sy/</link>
      <pubDate>Sun, 25 Oct 2020 15:53:03 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%BF%90%E7%AE%97%E7%AC%A6_20201025191937-ql8wcyv.sy/</guid>
      <description>Python运算符 Python 运算符 运算符用于对变量和值执行操作。 Python 将运算符分为以下组： 算术运算符 分配运算符 比较运算符 逻辑运算符 标识运算符 会员运算符 位运算符 Python 算术运算符 算术运算符与数值一起使用，以执行常见的数学运算： | Operator | Name | Example | | + | Addition | x + y | | - | Subtraction | x - y | | * | Multiplication | x * y | | / |</description>
    </item>
    
    <item>
      <title>Python基础：Python 布尔</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%B8%83%E5%B0%94/</link>
      <pubDate>Sun, 25 Oct 2020 14:44:34 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%B8%83%E5%B0%94/</guid>
      <description>Python 布尔 布尔表示两个值之一： 或 。True``````False 布尔值 在编程中，您经常需要知道表达式是 或 。True``````False 您可以计算 Python 中的任何表达式，并获取两个答案之一，或 。True``````False 比较两个值时，将计算表达式，Python 返回布尔答案： 例子 print(10 &amp;gt; 9) print(10</description>
    </item>
    
    <item>
      <title>Python基础：Python 布尔</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%B8%83%E5%B0%94_20201025191937-tqcrvoq.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:44:34 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%B8%83%E5%B0%94_20201025191937-tqcrvoq.sy/</guid>
      <description>Python 布尔 布尔表示两个值之一： 或 。True``````False 布尔值 在编程中，您经常需要知道表达式是 或 。True``````False 您可以计算 Python 中的任何表达式，并获取两个答案之一，或 。True``````False 比较两个值时，将计算表达式，Python 返回布尔答案： 例子 print(10 &amp;gt; 9) print(10</description>
    </item>
    
    <item>
      <title>Python基础：Python字符串</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sun, 25 Oct 2020 14:42:57 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>Python字符串 字符串 python 中的字符串文本由单个引号或双引号包围。 &amp;ldquo;你好&amp;quot;和&amp;rsquo;你好&amp;rsquo;是一样的。 您可以使用 以下函数显示字符串文本：print() 例子 print(&amp;quot;Hello&amp;quot;) print(&#39;Hello&#39;) 将字符串分配给变量 将字符串分配给变量使用变量名称后跟一个等号和字符串完成： 例子 a = &amp;quot;Hello&amp;quot; print(a)</description>
    </item>
    
    <item>
      <title>Python基础：Python字符串</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2_20201025191937-gjvueo0.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:42:57 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2_20201025191937-gjvueo0.sy/</guid>
      <description>Python字符串 字符串 python 中的字符串文本由单个引号或双引号包围。 &amp;ldquo;你好&amp;quot;和&amp;rsquo;你好&amp;rsquo;是一样的。 您可以使用 以下函数显示字符串文本：print() 例子 print(&amp;quot;Hello&amp;quot;) print(&#39;Hello&#39;) 将字符串分配给变量 将字符串分配给变量使用变量名称后跟一个等号和字符串完成： 例子 a = &amp;quot;Hello&amp;quot; print(a)</description>
    </item>
    
    <item>
      <title>Python基础：Python强转</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%BC%BA%E8%BD%AC/</link>
      <pubDate>Sun, 25 Oct 2020 14:39:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%BC%BA%E8%BD%AC/</guid>
      <description>Python强转 指定变量类型 有时可能需要为变量指定类型。这可以通过强转完成。Python 是一种面向对象的语言，因此它使用类来定义数据类型，包括其基元类型。 因此，使用构造函数在 python 中强制转换： int（） - 从整数文本、浮数字（通过向下舍入到上一个整数）或字符串文本（提供字符串表示整数）</description>
    </item>
    
    <item>
      <title>Python基础：Python强转</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%BC%BA%E8%BD%AC_20201025191937-jrevwbe.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:39:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%BC%BA%E8%BD%AC_20201025191937-jrevwbe.sy/</guid>
      <description>Python强转 指定变量类型 有时可能需要为变量指定类型。这可以通过强转完成。Python 是一种面向对象的语言，因此它使用类来定义数据类型，包括其基元类型。 因此，使用构造函数在 python 中强制转换： int（） - 从整数文本、浮数字（通过向下舍入到上一个整数）或字符串文本（提供字符串表示整数）</description>
    </item>
    
    <item>
      <title>Python基础：Python Numbers</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Numbers/</link>
      <pubDate>Sun, 25 Oct 2020 14:36:11 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Numbers/</guid>
      <description>Python Numbers Python Numbers Python 中有三种数字类型： int float complex 向数值分配值时，将创建数值类型的变量： 例子 x = 1 # int y = 2.8 # float z = 1j # complex 若要验证 Python 中任何对象的类型，请使用 以下函数：type() 例子 print(type(x)) print(type(y)) print(type(z)) Int int 或整数是长度无限的整数，正数或负数。没有小数。 例子 整数： x = 1 y = 35656222554887711 z = -3255522 print(type(x)) print(type(y)) print(type(z)) Float 浮动或&amp;quot;浮点</description>
    </item>
    
    <item>
      <title>Python基础：Python Numbers</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Numbers_20201025191937-6ky7br1.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:36:11 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-Numbers_20201025191937-6ky7br1.sy/</guid>
      <description>Python Numbers Python Numbers Python 中有三种数字类型： int float complex 向数值分配值时，将创建数值类型的变量： 例子 x = 1 # int y = 2.8 # float z = 1j # complex 若要验证 Python 中任何对象的类型，请使用 以下函数：type() 例子 print(type(x)) print(type(y)) print(type(z)) Int int 或整数是长度无限的整数，正数或负数。没有小数。 例子 整数： x = 1 y = 35656222554887711 z = -3255522 print(type(x)) print(type(y)) print(type(z)) Float 浮动或&amp;quot;浮点</description>
    </item>
    
    <item>
      <title>Python基础：Python数据类型</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 25 Oct 2020 14:34:10 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Python数据类型 内置数据类型 在编程中，数据类型是一个重要的概念。 变量可以存储不同类型的数据，不同类型的变量可以处理不同的事情。 默认情况下，Python 具有以下内置的数据类型，这些类别： | 文本类型： | str | | 数字类型： | int, ,float``````complex | | 序列类型： | list, ,tuple``````range | | 映射类型： | dict | | 设置类型： | set,frozenset</description>
    </item>
    
    <item>
      <title>Python基础：Python数据类型</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_20201025191937-xyavg30.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:34:10 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_20201025191937-xyavg30.sy/</guid>
      <description>Python数据类型 内置数据类型 在编程中，数据类型是一个重要的概念。 变量可以存储不同类型的数据，不同类型的变量可以处理不同的事情。 默认情况下，Python 具有以下内置的数据类型，这些类别： | 文本类型： | str | | 数字类型： | int, ,float``````complex | | 序列类型： | list, ,tuple``````range | | 映射类型： | dict | | 设置类型： | set,frozenset</description>
    </item>
    
    <item>
      <title>Python基础：Python变量</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%8F%98%E9%87%8F/</link>
      <pubDate>Sun, 25 Oct 2020 14:32:32 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%8F%98%E9%87%8F/</guid>
      <description>Python变量 创建变量 变量是用于存储数据值的容器。 与其他编程语言不同，Python 没有声明变量的命令。 变量在您首次为其分配值时创建。 例子 x = 5 y = &amp;quot;John&amp;quot; print(x) print(y) 变量不需要用任何特定类型声明_，_甚至可以在设置后更改类型。 例子 x = 4 # x is of type int x = &amp;quot;Sally&amp;quot; # x is now of type str print(x) 可以使用单引号或双引号</description>
    </item>
    
    <item>
      <title>Python基础：Python变量</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%8F%98%E9%87%8F_20201025191937-xec8pf1.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:32:32 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E5%8F%98%E9%87%8F_20201025191937-xec8pf1.sy/</guid>
      <description>Python变量 创建变量 变量是用于存储数据值的容器。 与其他编程语言不同，Python 没有声明变量的命令。 变量在您首次为其分配值时创建。 例子 x = 5 y = &amp;quot;John&amp;quot; print(x) print(y) 变量不需要用任何特定类型声明_，_甚至可以在设置后更改类型。 例子 x = 4 # x is of type int x = &amp;quot;Sally&amp;quot; # x is now of type str print(x) 可以使用单引号或双引号</description>
    </item>
    
    <item>
      <title>Python基础：Python注释</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Sun, 25 Oct 2020 14:29:22 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%B3%A8%E9%87%8A/</guid>
      <description>Python注释 注释可用于解释 Python 代码。 注释可用于使代码更具可读性。 注释可用于在测试代码时阻止执行。 创建注释 注释以 开头，Python 将忽略它们：# 例子 #This is a comment print(&amp;quot;Hello, World!&amp;quot;) 注释可以放在行的末尾，Python 将忽略行的其余部分： 例子 print(&amp;quot;Hello, World!&amp;quot;) #This is a comment 注释不必是文本来解释代码，它也可以用来防止 Python 执行代</description>
    </item>
    
    <item>
      <title>Python基础：Python注释</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%B3%A8%E9%87%8A_20201025191937-jektmye.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:29:22 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E6%B3%A8%E9%87%8A_20201025191937-jektmye.sy/</guid>
      <description>Python注释 注释可用于解释 Python 代码。 注释可用于使代码更具可读性。 注释可用于在测试代码时阻止执行。 创建注释 注释以 开头，Python 将忽略它们：# 例子 #This is a comment print(&amp;quot;Hello, World!&amp;quot;) 注释可以放在行的末尾，Python 将忽略行的其余部分： 例子 print(&amp;quot;Hello, World!&amp;quot;) #This is a comment 注释不必是文本来解释代码，它也可以用来防止 Python 执行代</description>
    </item>
    
    <item>
      <title>Python基础：Python语法</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 25 Oct 2020 14:27:46 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%AF%AD%E6%B3%95/</guid>
      <description>Python语法 执行 Python 语法 Python 缩进 Python 变量 Python 注释 练习 执行 Python 语法 正如我们在上一页中学到的，Python 语法可以通过直接在命令行中写入来执行： &amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Hello, World!&amp;quot;) Hello, World! 或者，在服务器上创建 python 文件，使用 .py 文件扩展名，并在命令行中运行该文件： C:\Users\_Your Name_&amp;gt;python myfile.py Python 缩进 缩进是指代码行开头的空格。 在其他编程语言中，代码中的缩</description>
    </item>
    
    <item>
      <title>Python基础：Python语法</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%AF%AD%E6%B3%95_20201025191937-jwjl0s6.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:27:46 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python%E8%AF%AD%E6%B3%95_20201025191937-jwjl0s6.sy/</guid>
      <description>Python语法 执行 Python 语法 Python 缩进 Python 变量 Python 注释 练习 执行 Python 语法 正如我们在上一页中学到的，Python 语法可以通过直接在命令行中写入来执行： &amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Hello, World!&amp;quot;) Hello, World! 或者，在服务器上创建 python 文件，使用 .py 文件扩展名，并在命令行中运行该文件： C:\Users\_Your Name_&amp;gt;python myfile.py Python 缩进 缩进是指代码行开头的空格。 在其他编程语言中，代码中的缩</description>
    </item>
    
    <item>
      <title>Python基础：Python 入门</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 25 Oct 2020 14:25:39 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%85%A5%E9%97%A8/</guid>
      <description>Python 入门 Python 安装 许多 PC 和 Mac 将安装 python。 要检查是否安装了 Python 在 Windows PC 上，请在开始栏中搜索 Python 或在命令行 （cmd.exe） 上运行以下内容： C:\Users\_Your Name_&amp;gt;python --version 要检查您是否在 Linux 或 Mac 上安装了 python，然后在 linux 上打开命令行或在 Mac 上打开终端并键入： python --version 如果您发现您的计算机上没有安装 python，那么您可</description>
    </item>
    
    <item>
      <title>Python基础：Python 入门</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%85%A5%E9%97%A8_20201025191937-h0sqbmg.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:25:39 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E5%85%A5%E9%97%A8_20201025191937-h0sqbmg.sy/</guid>
      <description>Python 入门 Python 安装 许多 PC 和 Mac 将安装 python。 要检查是否安装了 Python 在 Windows PC 上，请在开始栏中搜索 Python 或在命令行 （cmd.exe） 上运行以下内容： C:\Users\_Your Name_&amp;gt;python --version 要检查您是否在 Linux 或 Mac 上安装了 python，然后在 linux 上打开命令行或在 Mac 上打开终端并键入： python --version 如果您发现您的计算机上没有安装 python，那么您可</description>
    </item>
    
    <item>
      <title>Python基础：Python 语法</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 25 Oct 2020 14:02:27 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E8%AF%AD%E6%B3%95/</guid>
      <description>Python 语法 与其他编程语言相比，Python 语法 Python 旨在实现可读性，与受数学影响的英语有一些相似之处。 Python 使用新行来完成命令，而不是经常使用分号或括号的其他编程语言。 Python 依靠缩进，使用空格来定义范围;例如循环、函数和类的范围。其他编程语言通常使用大括号来用于此目的。 Python 缩进 在其他编程语言中，代</description>
    </item>
    
    <item>
      <title>Python基础：Python 语法</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E8%AF%AD%E6%B3%95_20201025191937-cmx7x8c.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:02:27 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80Python-%E8%AF%AD%E6%B3%95_20201025191937-cmx7x8c.sy/</guid>
      <description>Python 语法 与其他编程语言相比，Python 语法 Python 旨在实现可读性，与受数学影响的英语有一些相似之处。 Python 使用新行来完成命令，而不是经常使用分号或括号的其他编程语言。 Python 依靠缩进，使用空格来定义范围;例如循环、函数和类的范围。其他编程语言通常使用大括号来用于此目的。 Python 缩进 在其他编程语言中，代</description>
    </item>
    
    <item>
      <title>Python基础：什么是 Python</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80%E4%BB%80%E4%B9%88%E6%98%AF-Python/</link>
      <pubDate>Sun, 25 Oct 2020 13:50:05 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80%E4%BB%80%E4%B9%88%E6%98%AF-Python/</guid>
      <description>什么是 Python Python 是一种流行的编程语言。它由吉多·范·罗森于1991年创建。 Python 是一种易于学习、功能强大的编程语言。它有高效的高级数据结构，以及一种简单而有效的面向对象的编程方法。Python 优雅的语法和动态类型，加上其解释性，使其成为大多数平台上许多领域脚本编写和快速应用程序开发的理想语</description>
    </item>
    
    <item>
      <title>Python基础：什么是 Python</title>
      <link>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80%E4%BB%80%E4%B9%88%E6%98%AF-Python_20201025191937-0lc4hvr.sy/</link>
      <pubDate>Sun, 25 Oct 2020 13:50:05 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Python%E5%9F%BA%E7%A1%80%E4%BB%80%E4%B9%88%E6%98%AF-Python_20201025191937-0lc4hvr.sy/</guid>
      <description>什么是 Python Python 是一种流行的编程语言。它由吉多·范·罗森于1991年创建。 Python 是一种易于学习、功能强大的编程语言。它有高效的高级数据结构，以及一种简单而有效的面向对象的编程方法。Python 优雅的语法和动态类型，加上其解释性，使其成为大多数平台上许多领域脚本编写和快速应用程序开发的理想语</description>
    </item>
    
    <item>
      <title>机器学习：交互式机器学习体验</title>
      <link>https://geek.zshipu.com/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Sun, 25 Oct 2020 13:39:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BD%93%E9%AA%8C/</guid>
      <description>我已经在 GitHub 上🤖了新的交互式机器学习实验项目。虽然模型可能有点笨（记住，这些只是实验，而不是生产就绪的代码），他们会尽力： 🖌识别在浏览器中绘制的数字或草图 📸检测和识别要显示给相机的对象 🌅对上传的图像进行分类 📝一起写一首莎士比亚诗 ✊🖐✌️玩你在摇滚纸剪刀游戏 等。 我已经训练了_Pyth</description>
    </item>
    
    <item>
      <title>机器学习：交互式机器学习体验</title>
      <link>https://geek.zshipu.com/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BD%93%E9%AA%8C_20201025191937-y0itvel.sy/</link>
      <pubDate>Sun, 25 Oct 2020 13:39:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BD%93%E9%AA%8C_20201025191937-y0itvel.sy/</guid>
      <description>我已经在 GitHub 上🤖了新的交互式机器学习实验项目。虽然模型可能有点笨（记住，这些只是实验，而不是生产就绪的代码），他们会尽力： 🖌识别在浏览器中绘制的数字或草图 📸检测和识别要显示给相机的对象 🌅对上传的图像进行分类 📝一起写一首莎士比亚诗 ✊🖐✌️玩你在摇滚纸剪刀游戏 等。 我已经训练了_Pyth</description>
    </item>
    
    <item>
      <title>JavaScript基础：为初学者学习 JavaScript 中的数据结构</title>
      <link>https://geek.zshipu.com/post/JavaScript%E5%9F%BA%E7%A1%80%E4%B8%BA%E5%88%9D%E5%AD%A6%E8%80%85%E5%AD%A6%E4%B9%A0-JavaScript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 25 Oct 2020 13:32:14 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/JavaScript%E5%9F%BA%E7%A1%80%E4%B8%BA%E5%88%9D%E5%AD%A6%E8%80%85%E5%AD%A6%E4%B9%A0-JavaScript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>介绍 它是 JavaScript 中学习数据结构的注释。我研究了长途跋涉的Github 存储库的源代码表单。对于JavaScript开发人员和初学者来说，这是一个很好的材料来学习数据结构。除了Trekhleb的 Github， 我还提到《离开： 乌迪米编程和编码采访》和哈克兰克的视频。本课程使用 Java 实现和解释数据</description>
    </item>
    
    <item>
      <title>JavaScript基础：为初学者学习 JavaScript 中的数据结构</title>
      <link>https://geek.zshipu.com/post/JavaScript%E5%9F%BA%E7%A1%80%E4%B8%BA%E5%88%9D%E5%AD%A6%E8%80%85%E5%AD%A6%E4%B9%A0-JavaScript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_20201025191937-l9rec6e.sy/</link>
      <pubDate>Sun, 25 Oct 2020 13:32:14 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/JavaScript%E5%9F%BA%E7%A1%80%E4%B8%BA%E5%88%9D%E5%AD%A6%E8%80%85%E5%AD%A6%E4%B9%A0-JavaScript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_20201025191937-l9rec6e.sy/</guid>
      <description>介绍 它是 JavaScript 中学习数据结构的注释。我研究了长途跋涉的Github 存储库的源代码表单。对于JavaScript开发人员和初学者来说，这是一个很好的材料来学习数据结构。除了Trekhleb的 Github， 我还提到《离开： 乌迪米编程和编码采访》和哈克兰克的视频。本课程使用 Java 实现和解释数据</description>
    </item>
    
    <item>
      <title>MySql Text 类型大小</title>
      <link>https://geek.zshipu.com/post/MySql-Text-%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Wed, 21 Oct 2020 20:38:39 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/MySql-Text-%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F/</guid>
      <description>| TINYTEXT | 256 bytes | | | TEXT | 65,535 bytes | ~64kb | | MEDIUMTEXT | 16,777,215 bytes | ~16MB | | LONGTEXT | 4,294,967,295 bytes | ~4GB |</description>
    </item>
    
    <item>
      <title>MySql Text 类型大小</title>
      <link>https://geek.zshipu.com/post/MySql-Text-%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F_20201025191937-k26ptu2.sy/</link>
      <pubDate>Wed, 21 Oct 2020 20:38:39 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/MySql-Text-%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F_20201025191937-k26ptu2.sy/</guid>
      <description>| TINYTEXT | 256 bytes | | | TEXT | 65,535 bytes | ~64kb | | MEDIUMTEXT | 16,777,215 bytes | ~16MB | | LONGTEXT | 4,294,967,295 bytes | ~4GB |</description>
    </item>
    
    <item>
      <title>Java编程：你需要学习多少Java才能找到第一份工作？</title>
      <link>https://geek.zshipu.com/post/Java%E7%BC%96%E7%A8%8B%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%B0%91Java%E6%89%8D%E8%83%BD%E6%89%BE%E5%88%B0%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Mon, 19 Oct 2020 22:20:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Java%E7%BC%96%E7%A8%8B%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%B0%91Java%E6%89%8D%E8%83%BD%E6%89%BE%E5%88%B0%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C/</guid>
      <description>潜在的 Java 低年级学生需要了解什么才能获得第一份工作，甚至有资格获得好公司的实习生职位？哪些工具可以帮助Java程序员达到一个新的水平？您应该学习哪些技术，哪些技术最好推迟？ 这些问题没有标准答案，就像没有一个行动计划绝对适合每个人一样。一些公司正在争取开发，不断引进新技术，测试新版本</description>
    </item>
    
    <item>
      <title>Java编程：你需要学习多少Java才能找到第一份工作？</title>
      <link>https://geek.zshipu.com/post/Java%E7%BC%96%E7%A8%8B%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%B0%91Java%E6%89%8D%E8%83%BD%E6%89%BE%E5%88%B0%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C_20201025191937-up9f0ek.sy/</link>
      <pubDate>Mon, 19 Oct 2020 22:20:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Java%E7%BC%96%E7%A8%8B%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%B0%91Java%E6%89%8D%E8%83%BD%E6%89%BE%E5%88%B0%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C_20201025191937-up9f0ek.sy/</guid>
      <description>潜在的 Java 低年级学生需要了解什么才能获得第一份工作，甚至有资格获得好公司的实习生职位？哪些工具可以帮助Java程序员达到一个新的水平？您应该学习哪些技术，哪些技术最好推迟？ 这些问题没有标准答案，就像没有一个行动计划绝对适合每个人一样。一些公司正在争取开发，不断引进新技术，测试新版本</description>
    </item>
    
    <item>
      <title>高效的DevOps：2021 年要关注的关键 DevOps 原则</title>
      <link>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps2021-%E5%B9%B4%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%85%B3%E9%94%AE-DevOps-%E5%8E%9F%E5%88%99/</link>
      <pubDate>Tue, 13 Oct 2020 22:53:56 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps2021-%E5%B9%B4%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%85%B3%E9%94%AE-DevOps-%E5%8E%9F%E5%88%99/</guid>
      <description>2021 年 8个开发原则变革需要创新，创新需要进步。这是经过考验的方法，也是构建成功组织的关键。软件行业一次又一次地受到一波挑战性需求的打击，要求达到市场标准。为了跟上不断变化的趋势，组织开始采用新的流程。其中一种方法就是 DevOps。什么是 DevOps？ DevOps 背后的主要理念是将两个松散连接</description>
    </item>
    
    <item>
      <title>高效的DevOps：2021 年要关注的关键 DevOps 原则</title>
      <link>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps2021-%E5%B9%B4%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%85%B3%E9%94%AE-DevOps-%E5%8E%9F%E5%88%99_20201025191937-h39z8na.sy/</link>
      <pubDate>Tue, 13 Oct 2020 22:53:56 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps2021-%E5%B9%B4%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%85%B3%E9%94%AE-DevOps-%E5%8E%9F%E5%88%99_20201025191937-h39z8na.sy/</guid>
      <description>2021 年 8个开发原则变革需要创新，创新需要进步。这是经过考验的方法，也是构建成功组织的关键。软件行业一次又一次地受到一波挑战性需求的打击，要求达到市场标准。为了跟上不断变化的趋势，组织开始采用新的流程。其中一种方法就是 DevOps。什么是 DevOps？ DevOps 背后的主要理念是将两个松散连接</description>
    </item>
    
    <item>
      <title>高效的DevOps：30 多个开源工具，用于构建 DevOps 安全性。第 1 部分</title>
      <link>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps30-%E5%A4%9A%E4%B8%AA%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA-DevOps-%E5%AE%89%E5%85%A8%E6%80%A7%E7%AC%AC-1-%E9%83%A8%E5%88%86/</link>
      <pubDate>Tue, 13 Oct 2020 22:50:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps30-%E5%A4%9A%E4%B8%AA%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA-DevOps-%E5%AE%89%E5%85%A8%E6%80%A7%E7%AC%AC-1-%E9%83%A8%E5%88%86/</guid>
      <description>新的安全工具没有时间成为快速增长的实践集的一部分，这使我想将某个检查点设置为工具列表。实践意味着一组措施可以内置到 SDLC/DevOps 的阶段之一（威胁建模、SAST、DAST、SCA、Docker 图像扫描、Kubernetes 扫描、AWS 审核等）。 1.威胁建模 因此，安全开发生命周期环境中的威胁建模</description>
    </item>
    
    <item>
      <title>高效的DevOps：30 多个开源工具，用于构建 DevOps 安全性。第 1 部分</title>
      <link>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps30-%E5%A4%9A%E4%B8%AA%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA-DevOps-%E5%AE%89%E5%85%A8%E6%80%A7%E7%AC%AC-1-%E9%83%A8%E5%88%86_20201025191937-za4nsls.sy/</link>
      <pubDate>Tue, 13 Oct 2020 22:50:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps30-%E5%A4%9A%E4%B8%AA%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA-DevOps-%E5%AE%89%E5%85%A8%E6%80%A7%E7%AC%AC-1-%E9%83%A8%E5%88%86_20201025191937-za4nsls.sy/</guid>
      <description>新的安全工具没有时间成为快速增长的实践集的一部分，这使我想将某个检查点设置为工具列表。实践意味着一组措施可以内置到 SDLC/DevOps 的阶段之一（威胁建模、SAST、DAST、SCA、Docker 图像扫描、Kubernetes 扫描、AWS 审核等）。 1.威胁建模 因此，安全开发生命周期环境中的威胁建模</description>
    </item>
    
    <item>
      <title>高效的DevOps：业务开发操作的三种方式框架方法</title>
      <link>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A1%86%E6%9E%B6%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 13 Oct 2020 22:45:38 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A1%86%E6%9E%B6%E6%96%B9%E6%B3%95/</guid>
      <description>在寻求公司以提高 IT 交付服务的敏捷性时，出现了一种名为 DevOps 的 IT 行业趋势。在这里，我们将探讨在 IT 业务中应用树方法框架方法。什么是 DevOps？ 如前所述，DevOps 是 IT 行业旨在提高 IT 交付服务敏捷性的新趋势。此举强调透明通信、协作以及开发人员软件和 IT 运营之间的集成。 DevOps 认识到开发人员和 IT 操</description>
    </item>
    
    <item>
      <title>高效的DevOps：业务开发操作的三种方式框架方法</title>
      <link>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A1%86%E6%9E%B6%E6%96%B9%E6%B3%95_20201025191937-u7qj5tb.sy/</link>
      <pubDate>Tue, 13 Oct 2020 22:45:38 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E9%AB%98%E6%95%88%E7%9A%84DevOps%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A1%86%E6%9E%B6%E6%96%B9%E6%B3%95_20201025191937-u7qj5tb.sy/</guid>
      <description>在寻求公司以提高 IT 交付服务的敏捷性时，出现了一种名为 DevOps 的 IT 行业趋势。在这里，我们将探讨在 IT 业务中应用树方法框架方法。什么是 DevOps？ 如前所述，DevOps 是 IT 行业旨在提高 IT 交付服务敏捷性的新趋势。此举强调透明通信、协作以及开发人员软件和 IT 运营之间的集成。 DevOps 认识到开发人员和 IT 操</description>
    </item>
    
    <item>
      <title>Golang实践：使用 Go &#43; 第 2 部分创建 RESTful 服务</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go-&#43;-%E7%AC%AC-2-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA-RESTful-%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 13 Oct 2020 22:35:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go-&#43;-%E7%AC%AC-2-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA-RESTful-%E6%9C%8D%E5%8A%A1/</guid>
      <description>什么是 RESTful 服务？ REST 是一种用于设计 Web 服务的体系结构方法。REST API 是围绕_资源_设计的，资源是客户端可以访问的任何类型的对象、数据或服务。资源具有标识符_，_它是唯一标识该资源的 URI。例如，特定客户订单的 URI 可能是：https://adventure-works.com/orders</description>
    </item>
    
    <item>
      <title>Golang实践：使用 Go &#43; 第 2 部分创建 RESTful 服务</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go-&#43;-%E7%AC%AC-2-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA-RESTful-%E6%9C%8D%E5%8A%A1_20201025191937-tyggtc4.sy/</link>
      <pubDate>Tue, 13 Oct 2020 22:35:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go-&#43;-%E7%AC%AC-2-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA-RESTful-%E6%9C%8D%E5%8A%A1_20201025191937-tyggtc4.sy/</guid>
      <description>什么是 RESTful 服务？ REST 是一种用于设计 Web 服务的体系结构方法。REST API 是围绕_资源_设计的，资源是客户端可以访问的任何类型的对象、数据或服务。资源具有标识符_，_它是唯一标识该资源的 URI。例如，特定客户订单的 URI 可能是：https://adventure-works.com/orders</description>
    </item>
    
    <item>
      <title>Golang实践：使用 Go&#43; 第 1 部分创建微服务</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go&#43;-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 13 Oct 2020 22:32:37 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go&#43;-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>来自JavaScript的背景，我一直想学习一种静态类型的编程语言，今年早些时候，我拿起Golang后，阅读了有关语言的评论，Golang得到了谷歌的支持。哦， 当然， 流行的 Devops 工具， 如码头， 库伯内特， Terraform， 是用Golang建造的。在通过 freecodecamp 从这个令人敬畏的教程中选取基础</description>
    </item>
    
    <item>
      <title>Golang实践：使用 Go&#43; 第 1 部分创建微服务</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go&#43;-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1_20201025191937-kxxfdkp.sy/</link>
      <pubDate>Tue, 13 Oct 2020 22:32:37 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go&#43;-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1_20201025191937-kxxfdkp.sy/</guid>
      <description>来自JavaScript的背景，我一直想学习一种静态类型的编程语言，今年早些时候，我拿起Golang后，阅读了有关语言的评论，Golang得到了谷歌的支持。哦， 当然， 流行的 Devops 工具， 如码头， 库伯内特， Terraform， 是用Golang建造的。在通过 freecodecamp 从这个令人敬畏的教程中选取基础</description>
    </item>
    
    <item>
      <title>Golang实践：Golang的 3 个陷阱</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5Golang%E7%9A%84-3-%E4%B8%AA%E9%99%B7%E9%98%B1/</link>
      <pubDate>Tue, 13 Oct 2020 22:20:16 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5Golang%E7%9A%84-3-%E4%B8%AA%E9%99%B7%E9%98%B1/</guid>
      <description>在过去的一年里，我们一直在开发一个复杂的半实时生产系统。我们决定和Golang一起写。我们在 Go 中几乎没有经验，所以正如你想象的那样，这不是一件小事。快进一年：该系统在生产中运行，并成为CllimaCell产品的主要支柱之一。精通意味着你有足够的经验来知道你正在使用的平台的陷阱是什</description>
    </item>
    
    <item>
      <title>Golang实践：Golang的 3 个陷阱</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5Golang%E7%9A%84-3-%E4%B8%AA%E9%99%B7%E9%98%B1_20201025191937-l5xlcfk.sy/</link>
      <pubDate>Tue, 13 Oct 2020 22:20:16 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E8%B7%B5Golang%E7%9A%84-3-%E4%B8%AA%E9%99%B7%E9%98%B1_20201025191937-l5xlcfk.sy/</guid>
      <description>在过去的一年里，我们一直在开发一个复杂的半实时生产系统。我们决定和Golang一起写。我们在 Go 中几乎没有经验，所以正如你想象的那样，这不是一件小事。快进一年：该系统在生产中运行，并成为CllimaCell产品的主要支柱之一。精通意味着你有足够的经验来知道你正在使用的平台的陷阱是什</description>
    </item>
    
    <item>
      <title>Golang基础：go语言中的循环</title>
      <link>https://geek.zshipu.com/post/Golang%E5%9F%BA%E7%A1%80go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 11 Oct 2020 21:56:25 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%9F%BA%E7%A1%80go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF/</guid>
      <description>循环允许您重复代码。有不同类型的循环，其中之一是 for 循环。对于Go（golang）中的循环，与 Python 更类似于 C/Java。在 Python 中，语法是 for i in range(1,10):在 C/Java 中，语法为 for (i = 1; i &amp;lt;= 10; i++) {但在Golang for i := 1; i &amp;lt;= 10; i++ {因此，它受到这些语言的启发。 For 循环解释 在上面的程序中，</description>
    </item>
    
    <item>
      <title>Golang基础：go语言中的循环</title>
      <link>https://geek.zshipu.com/post/Golang%E5%9F%BA%E7%A1%80go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF_20201025191937-nwcl9gu.sy/</link>
      <pubDate>Sun, 11 Oct 2020 21:56:25 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%9F%BA%E7%A1%80go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF_20201025191937-nwcl9gu.sy/</guid>
      <description>{: id=&amp;ldquo;20201025191955-33qmhqd&amp;rdquo;} 循环允许您重复代码。有不同类型的循环，其中之一是 for 循环。对于Go（golang）中的循环，与 Python 更类似于 C/Java。在 Python 中，语法是 {: id=&amp;ldquo;20201025191940-f0d8dte&amp;rdquo;} span{: id=&amp;ldquo;20201025191940-2d3b7f7&amp;rdquo;} 在 C/Java 中，语法为 {: id=&amp;ldquo;20201025191940-pjyqhr9&amp;rdquo;} span{: id=&amp;ldquo;20201025191940-u2uwj8y&amp;rdquo;} 但在Golang {: id=&amp;ldquo;20201025191940-8uv8o0y&amp;rdquo;} span{: id=&amp;ldquo;20201025191940-us5z2x8&amp;rdquo;} 因此，它受到这些语言的启发。 {: id=&amp;ldquo;20201025191940-8gltg8n&amp;rdquo;} For 循环解释 {: id=&amp;ldquo;20201025191940-f8899wm&amp;rdquo;} 在上面的程序中，它是什么意思？ 首先变量 i 的初始</description>
    </item>
    
    <item>
      <title>Golang实战：细胞吞噬</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E6%88%98%E7%BB%86%E8%83%9E%E5%90%9E%E5%99%AC/</link>
      <pubDate>Sun, 11 Oct 2020 21:50:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E6%88%98%E7%BB%86%E8%83%9E%E5%90%9E%E5%99%AC/</guid>
      <description>细胞吞噬游戏是一_个细胞自动_机， 但这并没有意味着很多， 大多数人。想象一下，一个存在于两种状态的细胞网格：活着或死亡。您看到的&amp;quot;动画&amp;quot;实际上是连续几代呈现在屏幕上。有四个规则可以帮助决定下一代的状态。维基百科这样描述它们。 任何只有不到两个活邻居的活细胞死亡，好</description>
    </item>
    
    <item>
      <title>Golang实战：细胞吞噬</title>
      <link>https://geek.zshipu.com/post/Golang%E5%AE%9E%E6%88%98%E7%BB%86%E8%83%9E%E5%90%9E%E5%99%AC_20201025191937-rppz339.sy/</link>
      <pubDate>Sun, 11 Oct 2020 21:50:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E5%AE%9E%E6%88%98%E7%BB%86%E8%83%9E%E5%90%9E%E5%99%AC_20201025191937-rppz339.sy/</guid>
      <description>细胞吞噬游戏是一_个细胞自动_机， 但这并没有意味着很多， 大多数人。想象一下，一个存在于两种状态的细胞网格：活着或死亡。您看到的&amp;quot;动画&amp;quot;实际上是连续几代呈现在屏幕上。有四个规则可以帮助决定下一代的状态。维基百科这样描述它们。 任何只有不到两个活邻居的活细胞死亡，好</description>
    </item>
    
    <item>
      <title>开发日常：nginx ip_hash 作用</title>
      <link>https://geek.zshipu.com/post/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8nginx-ip_hash-%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Sat, 10 Oct 2020 17:41:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8nginx-ip_hash-%E4%BD%9C%E7%94%A8/</guid>
      <description>_nginx_负载均衡策略:ip_hash、url_hash_xqhys的博客-CS&amp;hellip; 2018年8月18日 上述是一个极简的监听8081端口的的_nginx_服务,其中当请求url 为/Upload/upload时,会走_ip_hash_策略; upstream是_ngi</description>
    </item>
    
    <item>
      <title>开发日常：nginx ip_hash 作用</title>
      <link>https://geek.zshipu.com/post/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8nginx-ip_hash-%E4%BD%9C%E7%94%A8_20201025191937-qkl1b8w.sy/</link>
      <pubDate>Sat, 10 Oct 2020 17:41:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8nginx-ip_hash-%E4%BD%9C%E7%94%A8_20201025191937-qkl1b8w.sy/</guid>
      <description>_nginx_负载均衡策略:ip_hash、url_hash_xqhys的博客-CS&amp;hellip; 2018年8月18日 上述是一个极简的监听8081端口的的_nginx_服务,其中当请求url 为/Upload/upload时,会走_ip_hash_策略; upstream是_ngi</description>
    </item>
    
    <item>
      <title>掘金 2020年10月09日技术热点</title>
      <link>https://geek.zshipu.com/post/%E6%8E%98%E9%87%91-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E7%83%AD%E7%82%B9/</link>
      <pubDate>Fri, 09 Oct 2020 22:05:06 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E6%8E%98%E9%87%91-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E7%83%AD%E7%82%B9/</guid>
      <description>[原理02] 权限控制 1天内 掘金是一个帮助开发者成长的社区,是给开发者用的 Hacker News,给设计师用的 Designer News,和给产品经理用的 Medium。掘金的技术文章由稀土上聚集的技&amp;hellip; 面试题 | 链表相交 &amp;amp; 成环 1天内 掘金是一个帮助开发者成长的社区,是给开发者用的 Hacker News,给设计师用</description>
    </item>
    
    <item>
      <title>掘金 2020年10月09日技术热点</title>
      <link>https://geek.zshipu.com/post/%E6%8E%98%E9%87%91-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E7%83%AD%E7%82%B9_20201025191937-isvga8i.sy/</link>
      <pubDate>Fri, 09 Oct 2020 22:05:06 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E6%8E%98%E9%87%91-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E7%83%AD%E7%82%B9_20201025191937-isvga8i.sy/</guid>
      <description>[原理02] 权限控制 1天内 掘金是一个帮助开发者成长的社区,是给开发者用的 Hacker News,给设计师用的 Designer News,和给产品经理用的 Medium。掘金的技术文章由稀土上聚集的技&amp;hellip; 面试题 | 链表相交 &amp;amp; 成环 1天内 掘金是一个帮助开发者成长的社区,是给开发者用的 Hacker News,给设计师用</description>
    </item>
    
    <item>
      <title>CSDN 2020年10月09日热门技术点</title>
      <link>https://geek.zshipu.com/post/CSDN-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF%E7%82%B9/</link>
      <pubDate>Fri, 09 Oct 2020 22:04:21 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/CSDN-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF%E7%82%B9/</guid>
      <description>【Docker介绍及简单操作】_追梦的博客-CSDN博客 6小时前 一、Docker1、简介Docker 是一个开源的容器引擎,它基于 LXC 容器技术,使用 Go 语言开发源代码托管在 GitHub 上,并遵从 Apache2.0 协议Docker 采用 C/S架构,其&amp;hellip; 全球顶级开源大神们现身 COSCon&#39;20-CSDN.NET 11小时前 业界最具影响力的</description>
    </item>
    
    <item>
      <title>CSDN 2020年10月09日热门技术点</title>
      <link>https://geek.zshipu.com/post/CSDN-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF%E7%82%B9_20201025191937-vrv2b68.sy/</link>
      <pubDate>Fri, 09 Oct 2020 22:04:21 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/CSDN-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF%E7%82%B9_20201025191937-vrv2b68.sy/</guid>
      <description>【Docker介绍及简单操作】_追梦的博客-CSDN博客 6小时前 一、Docker1、简介Docker 是一个开源的容器引擎,它基于 LXC 容器技术,使用 Go 语言开发源代码托管在 GitHub 上,并遵从 Apache2.0 协议Docker 采用 C/S架构,其&amp;hellip; 全球顶级开源大神们现身 COSCon&#39;20-CSDN.NET 11小时前 业界最具影响力的</description>
    </item>
    
    <item>
      <title>开源中国 2020年10月09日技术要点</title>
      <link>https://geek.zshipu.com/post/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9/</link>
      <pubDate>Fri, 09 Oct 2020 22:01:48 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9/</guid>
      <description>QSettings 自定义格式 - OSCHINA 5小时前 转自:http://hi.baidu.com/cyclone/blog/item/1bcb5edfed60d20348540320.html 早就注意到 QSettings 提供了自定义配置文件格式的功能,却一直没怎么看&amp;hellip; PHP 开源工作流引擎 Tpflow V3.2 正式版发布 - OSCHIN&amp;hellip; 1天内 PHP</description>
    </item>
    
    <item>
      <title>开源中国 2020年10月09日技术要点</title>
      <link>https://geek.zshipu.com/post/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9_20201025191937-2c9ptao.sy/</link>
      <pubDate>Fri, 09 Oct 2020 22:01:48 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9_20201025191937-2c9ptao.sy/</guid>
      <description>QSettings 自定义格式 - OSCHINA 5小时前 转自:http://hi.baidu.com/cyclone/blog/item/1bcb5edfed60d20348540320.html 早就注意到 QSettings 提供了自定义配置文件格式的功能,却一直没怎么看&amp;hellip; PHP 开源工作流引擎 Tpflow V3.2 正式版发布 - OSCHIN&amp;hellip; 1天内 PHP</description>
    </item>
    
    <item>
      <title>思否 2020年10月09日技术要点</title>
      <link>https://geek.zshipu.com/post/%E6%80%9D%E5%90%A6-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9/</link>
      <pubDate>Fri, 09 Oct 2020 22:00:27 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E6%80%9D%E5%90%A6-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9/</guid>
      <description>JavaScript计时器:你需要了解的所有内容_疯狂的技术宅&amp;hellip; 6小时前 作者:Samer Buna翻译:疯狂的技术宅原文:[链接]未经允许严禁转载先从一个面试题开始:JavaScript 面试题:setTimeout 和 setInterval 的源代码是在哪里实现的? (不&amp;hellip; 台达P</description>
    </item>
    
    <item>
      <title>思否 2020年10月09日技术要点</title>
      <link>https://geek.zshipu.com/post/%E6%80%9D%E5%90%A6-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9_20201025191937-2euokft.sy/</link>
      <pubDate>Fri, 09 Oct 2020 22:00:27 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E6%80%9D%E5%90%A6-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9_20201025191937-2euokft.sy/</guid>
      <description>JavaScript计时器:你需要了解的所有内容_疯狂的技术宅&amp;hellip; 6小时前 作者:Samer Buna翻译:疯狂的技术宅原文:[链接]未经允许严禁转载先从一个面试题开始:JavaScript 面试题:setTimeout 和 setInterval 的源代码是在哪里实现的? (不&amp;hellip; 台达P</description>
    </item>
    
    <item>
      <title>Java 线程 热点文章 2020年10月09日</title>
      <link>https://geek.zshipu.com/post/Java-%E7%BA%BF%E7%A8%8B-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A0-2020%E5%B9%B410%E6%9C%8809%E6%97%A5/</link>
      <pubDate>Fri, 09 Oct 2020 21:58:33 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/Java-%E7%BA%BF%E7%A8%8B-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A0-2020%E5%B9%B410%E6%9C%8809%E6%97%A5/</guid>
      <description>_Java_多_线程__yucan1234的博客-CSDN博客 11小时前 1.在第二种方法(Runnable)中,ticket输出的顺序并不是54321,这是因为_线程_执行的时机难以预测,ticket–并不是原子操作。 2.在第一种方法中,我们new了3个Thread对&amp;helli</description>
    </item>
    
    <item>
      <title>Java 线程 热点文章 2020年10月09日</title>
      <link>https://geek.zshipu.com/post/Java-%E7%BA%BF%E7%A8%8B-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A0-2020%E5%B9%B410%E6%9C%8809%E6%97%A5_20201025191937-1ugxb52.sy/</link>
      <pubDate>Fri, 09 Oct 2020 21:58:33 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/Java-%E7%BA%BF%E7%A8%8B-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A0-2020%E5%B9%B410%E6%9C%8809%E6%97%A5_20201025191937-1ugxb52.sy/</guid>
      <description>_Java_多_线程__yucan1234的博客-CSDN博客 11小时前 1.在第二种方法(Runnable)中,ticket输出的顺序并不是54321,这是因为_线程_执行的时机难以预测,ticket–并不是原子操作。 2.在第一种方法中,我们new了3个Thread对&amp;helli</description>
    </item>
    
    <item>
      <title>Java 热点文章 2020年10月09日</title>
      <link>https://geek.zshipu.com/post/java-2020-10-09_20201009212438-wf702tx.sy/</link>
      <pubDate>Fri, 09 Oct 2020 21:23:21 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/java-2020-10-09_20201009212438-wf702tx.sy/</guid>
      <description>{: id=&amp;ldquo;20201009212440-g983x85&amp;rdquo;} JAVA-概述_qdzjo的博客-CSDN博客 {: id=&amp;ldquo;20201009212440-tdal81b&amp;rdquo;} 7小时前 为什么是_java_?_java_语言用途广服务器程序:银行,证券交易平台,电子商务后台…Android应用:安卓手机,各种移动设备,智能家电…软件工具:开发工具eclipes,inetelijidea嵌入式&amp;hell</description>
    </item>
    
    <item>
      <title>CSS 热点文章：2020年9月第三周</title>
      <link>https://geek.zshipu.com/post/CSS-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A02020%E5%B9%B49%E6%9C%88%E7%AC%AC%E4%B8%89%E5%91%A8/</link>
      <pubDate>Sun, 20 Sep 2020 20:41:20 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/CSS-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A02020%E5%B9%B49%E6%9C%88%E7%AC%AC%E4%B8%89%E5%91%A8/</guid>
      <description>前端之_CSS_篇 - NQ31 - 博客园 1天前 /内部样式/ Title p{ background-color: red; } /外部样式 将_css_代码写在单独的文件中,再进行引用/ /行内样式/ hello world&amp;hellip; CSS-01入门和语法,选择器。_qq_44715164的博客-CSDN博客 2天前 css_简单介绍_CSS:Cascading Style Sheets:层叠样式</description>
    </item>
    
    <item>
      <title>CSS 热点文章：2020年9月第三周</title>
      <link>https://geek.zshipu.com/post/CSS-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A02020%E5%B9%B49%E6%9C%88%E7%AC%AC%E4%B8%89%E5%91%A8_20201025191937-d35umpt.sy/</link>
      <pubDate>Sun, 20 Sep 2020 20:41:20 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/CSS-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A02020%E5%B9%B49%E6%9C%88%E7%AC%AC%E4%B8%89%E5%91%A8_20201025191937-d35umpt.sy/</guid>
      <description>{: id=&amp;ldquo;20201025191946-c8avgoa&amp;rdquo;} 前端之_CSS_篇 - NQ31 - 博客园 {: id=&amp;ldquo;20201025191940-b0rernu&amp;rdquo;} 1天前 /内部样式/ Title p{ background-color: red; } /外部样式 将_css_代码写在单独的文件中,再进行引用/ /行内样式/ hello world&amp;hellip; {: id=&amp;ldquo;20201025191940-23hy4pj&amp;rdquo;} CSS-01入门和语法,选择器。_qq_44715164的博客-CSDN博客 {: id=&amp;ldquo;20201025191940-b7worjr&amp;rdquo;} 2天前 css_简单介绍_CSS:Cascading Style She</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（五）| 接收数组和 Map</title>
      <link>https://geek.zshipu.com/2019/12/18/golang-gin-query-parameters-array-map.html</link>
      <pubDate>Wed, 18 Dec 2019 21:55:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/2019/12/18/golang-gin-query-parameters-array-map.html</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（五）| 接收数组和 Map</title>
      <link>https://geek.zshipu.com/2019/12/18/golang-gin-query-parameters-array-map.html</link>
      <pubDate>Wed, 18 Dec 2019 21:55:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/2019/12/18/golang-gin-query-parameters-array-map.html</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（三）| 路由参数</title>
      <link>https://geek.zshipu.com/post/2019-12-13-golang-gin-parameters-in-path/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/2019-12-13-golang-gin-parameters-in-path/</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（三）| 路由参数</title>
      <link>https://geek.zshipu.com/post/2019-12-13-golang-gin-parameters-in-path_20201025191937-xduivd2.sy/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/2019-12-13-golang-gin-parameters-in-path_20201025191937-xduivd2.sy/</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（三）| 路由参数</title>
      <link>https://geek.zshipu.com/post/2019-12-15-golang-gin-query-parameters-source-code-analysis/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/2019-12-15-golang-gin-query-parameters-source-code-analysis/</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（三）| 路由参数</title>
      <link>https://geek.zshipu.com/post/2019-12-15-golang-gin-query-parameters-source-code-analysis_20201025191937-o2bkauc.sy/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/2019-12-15-golang-gin-query-parameters-source-code-analysis_20201025191937-o2bkauc.sy/</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://geek.zshipu.com/about/</link>
      <pubDate>Tue, 10 Mar 2015 00:13:27 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/about/</guid>
      <description>知识铺,一个知识分享，积累，整理的地方。</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://geek.zshipu.com/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://geek.zshipu.com/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
