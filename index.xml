<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>知识铺的博客</title>
    <link>https://geek.zshipu.com/</link>
    <description>Recent content on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 04 Oct 2021 14:11:10 +0000</lastBuildDate>
    
	<atom:link href="https://geek.zshipu.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DDD016-在开发软件中应用领域驱动设计</title>
      <link>https://geek.zshipu.com/post/DDD/DDD016-%E5%9C%A8%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BA%94%E7%94%A8%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 04 Oct 2021 14:11:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD016-%E5%9C%A8%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BA%94%E7%94%A8%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>领域驱动设计 （DDD）是开发代码库结构与业务领域结构非常匹配的软件的概念。 有关 DDD 的更多信息，您可以在此处找到它 我花了很多时间来理解和应用它到日常任务， 所以这篇文章是我的分享所有我所知道的关于 Ddd 。 规则 该规则规定，外圈中声明的某些&amp;gt;内圈不得在代码中提及。 &amp;mdash;干净的建筑</description>
    </item>
    
    <item>
      <title>Java 开发 架构模式 清洁架构</title>
      <link>https://geek.zshipu.com/post/java/Java-%E5%BC%80%E5%8F%91-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F-%E6%B8%85%E6%B4%81%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sat, 02 Oct 2021 11:33:33 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/Java-%E5%BC%80%E5%8F%91-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F-%E6%B8%85%E6%B4%81%E6%9E%B6%E6%9E%84/</guid>
      <description>虽然这些架构的细节都有些不同，但它们非常相似。它们都有相同的目标，即解耦。它们都通过将软件划分为层来实现这种分离。每个层至少有一层用于业务规则，另一层用于接口。 这些架构中的每一个都产生以下系统： 独立于框架。架构并不依赖于一些充满功能的软件库的存在。这允许您使用工具等框架，而不必将</description>
    </item>
    
    <item>
      <title>Java 开发 架构模式 从分层架构、洋葱架构到六边形架构</title>
      <link>https://geek.zshipu.com/post/java/Java-%E5%BC%80%E5%8F%91-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F-%E4%BB%8E%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84%E5%88%B0%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sat, 02 Oct 2021 11:22:22 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/Java-%E5%BC%80%E5%8F%91-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F-%E4%BB%8E%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84%E5%88%B0%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84/</guid>
      <description>经典分层 分层是打破复杂软件系统的最广为人知的技术之一。它已被推广到许多流行的书籍，如马丁·福勒*的企业应用架构模式*。 图层允许我们在不知道任何较低级别层的详细信息的情况下在较低级别层之上构建软件。在理想世界中，我们甚至可以用不同的实现替换低层。虽然层数可能有所不同，但我们在实践中</description>
    </item>
    
    <item>
      <title>吴恩达的 CS229的数学基础（线性代数）</title>
      <link>https://geek.zshipu.com/post/machinelearning/%E5%90%B4%E6%81%A9%E8%BE%BE%E7%9A%84-CS229%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</link>
      <pubDate>Fri, 01 Oct 2021 13:39:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/machinelearning/%E5%90%B4%E6%81%A9%E8%BE%BE%E7%9A%84-CS229%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>机器学习数学基础-01概率统计基础课程</title>
      <link>https://geek.zshipu.com/post/machinelearning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-01%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1%E5%9F%BA%E7%A1%80%E8%AF%BE/</link>
      <pubDate>Fri, 01 Oct 2021 13:39:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/machinelearning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-01%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1%E5%9F%BA%E7%A1%80%E8%AF%BE/</guid>
      <description>概率基础 概率例子 质地均匀 ，每个面按照古典概率，概率都一样 已知条件，发生的概率 ： 条件概率 条件概率 生活中就不是古典概型 分子 分母 同时除总数 转换成概率公式 例子 AB的概率 ，也就是B的概率 概率相除得到条件概率 例子 贝叶斯公式 利用新的证据修改已有的看法 联合概率 同时除 AB同时发生的概率 链式法则 先x</description>
    </item>
    
    <item>
      <title>关键词库-Go 语言高效分词, 支持英文、中文、日文等</title>
      <link>https://geek.zshipu.com/post/crawler/%E5%85%B3%E9%94%AE%E8%AF%8D%E5%BA%93-Go-%E8%AF%AD%E8%A8%80%E9%AB%98%E6%95%88%E5%88%86%E8%AF%8D-%E6%94%AF%E6%8C%81%E8%8B%B1%E6%96%87%E4%B8%AD%E6%96%87%E6%97%A5%E6%96%87%E7%AD%89/</link>
      <pubDate>Mon, 27 Sep 2021 14:03:10 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/crawler/%E5%85%B3%E9%94%AE%E8%AF%8D%E5%BA%93-Go-%E8%AF%AD%E8%A8%80%E9%AB%98%E6%95%88%E5%88%86%E8%AF%8D-%E6%94%AF%E6%8C%81%E8%8B%B1%E6%96%87%E4%B8%AD%E6%96%87%E6%97%A5%E6%96%87%E7%AD%89/</guid>
      <description>Go 语言高效分词, 支持英文、中文、日文等 词典用双数组trie（Double-Array Trie）实现， 分词器算法为基于词频的最短路径加动态规划。 支持普通和搜索引擎两种分词模式，支持用户词典、词性标注，可运行JSON RPC服务。 分词速度单线程9MB/s，goroutines并发42M</description>
    </item>
    
    <item>
      <title>关键词库-本地sqllit存储</title>
      <link>https://geek.zshipu.com/post/crawler/%E5%85%B3%E9%94%AE%E8%AF%8D%E5%BA%93-%E6%9C%AC%E5%9C%B0sqllite%E5%AD%98%E5%82%A8/</link>
      <pubDate>Mon, 27 Sep 2021 13:03:10 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/crawler/%E5%85%B3%E9%94%AE%E8%AF%8D%E5%BA%93-%E6%9C%AC%E5%9C%B0sqllite%E5%AD%98%E5%82%A8/</guid>
      <description>本地存储 package db import ( &amp;quot;database/sql&amp;quot; &amp;quot;fmt&amp;quot; _ &amp;quot;github.com/mattn/go-sqlite3&amp;quot; &amp;quot;log&amp;quot; &amp;quot;os&amp;quot; ) var db *sql.DB var err error func init() { if isExist(&amp;quot;./keybase.db&amp;quot;) { db, err = sql.Open(&amp;quot;sqlite3&amp;quot;, &amp;quot;./keybase.db&amp;quot;) if err != nil { log.Fatal(err) } }else{ db, err = sql.Open(&amp;quot;sqlite3&amp;quot;, &amp;quot;./keybase.db&amp;quot;) if err != nil { log.Fatal(err) } sqlStmt := ` create table keywords (id integer PRIMARY KEY autoincrement,keyword text, url text); ` _, err = db.Exec(sqlStmt) if err != nil { log.Printf(&amp;quot;%q: %s\n&amp;quot;, err, sqlStmt) return } } } func isExist(path string)(bool){ _, err := os.Stat(path) if err != nil{ if os.IsExist(err){ return true } if os.IsNotExist(err){ return false } fmt.Println(err) return false } return true } func AddKeyword(keyword,url string) { tx, err := db.Begin() if err != nil { log.Fatal(err) } stmt, err := tx.Prepare(&amp;quot;insert into keywords(keyword, url) values(?, ?)&amp;quot;) if err != nil</description>
    </item>
    
    <item>
      <title>关键词库-Go中使用爬虫框架</title>
      <link>https://geek.zshipu.com/post/crawler/%E5%85%B3%E9%94%AE%E8%AF%8D%E5%BA%93-Go%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sun, 26 Sep 2021 20:03:10 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/crawler/%E5%85%B3%E9%94%AE%E8%AF%8D%E5%BA%93-Go%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</guid>
      <description>简介 本项目基于golang开发，是一个开放的垂直领域的爬虫框架，框架中将各个功能模块区分开，方便使用者重新实现子模块，进而构建自己垂直方方向的爬虫。 本项目将爬虫的各个功能流程区分成Spider模块（主控），Downloader模块（下载器），PageProcesser模块（页面分</description>
    </item>
    
    <item>
      <title>DDD015-实现领域驱动设计：第四部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD015-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 25 Sep 2021 13:35:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD015-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86/</guid>
      <description>对象映射对象 当两个对象具有相同或相似属性时，自动对象到对象映射是将值从一个对象复制到另一个对象的有用方法。 DTO 和实体类通常具有相同的/类似的属性，您通常需要从实体创建 DTO 对象。 ABP 的对象对象映射系统与自动映射器集成使这些操作比手动映射容易得多。 仅使用自动对象映射进行实体输出 DTO 映射。 不要</description>
    </item>
    
    <item>
      <title>DDD014-实现领域驱动设计：第三部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD014-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 25 Sep 2021 12:27:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD014-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</guid>
      <description>需要外部服务的实体中的业务逻辑 当业务逻辑仅使用该实体的属性时，只需在实体方法中实施业务规则就很简单。 如果业务逻辑要求查询数据库或使用应从依赖性注入系统解决的任何外部服务，该怎么办？ 记住：实体不能注入服务！ 实现这种商业逻辑有两种常见方法： 在实体方法上实现业务逻辑，并获取外部依赖作为</description>
    </item>
    
    <item>
      <title>DDD013-实现领域驱动设计：第二部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD013-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 25 Sep 2021 11:27:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD013-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</guid>
      <description>实现：构建基块 这是本系列的重要组成部分。我们将用实例介绍和解释一些明确的规则。您可以遵循这些规则，并在实施域驱动设计时应用到您的解决方案中。 示例领域 示例将使用 GitHub 使用的一些概念，如问题、存储库、标签和用户，您已经熟悉。 下图显示了一些聚合、聚合根、实体、价值对象及其之间的关系： 问题聚</description>
    </item>
    
    <item>
      <title>DDD012-实现领域驱动设计：第一部分</title>
      <link>https://geek.zshipu.com/post/DDD/DDD012-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</link>
      <pubDate>Fri, 24 Sep 2021 23:27:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD012-%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</guid>
      <description>简单代码！ 踢足球很简单，但踢简单的足球是最难的。- 约翰 · 克鲁伊夫 如果我们把这个著名的名言作为编程，我们可以说： 编写代码非常简单，但编写简单的代码是最 难的事情。 什么是域驱动设计？ 域驱动设计 （DDD） 是将实现与 不断发展的模型连接起来，满足复杂需求的软件开发方法; DDD 适用于复杂的领域和大</description>
    </item>
    
    <item>
      <title>DDD011-子域和边界上下文</title>
      <link>https://geek.zshipu.com/post/DDD/DDD011-%E5%AD%90%E5%9F%9F%E5%92%8C%E8%BE%B9%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Fri, 24 Sep 2021 23:22:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD011-%E5%AD%90%E5%9F%9F%E5%92%8C%E8%BE%B9%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>这篇文章是一个摘要， 给自己一个关于子域和边界上下文的差异的说明。这些术语通常由域驱动设计从业者使用。曾经有段时间，我把它们混在一起一点点。希望你能发现这个有用。如果你发现任何不准确之处，请告诉我。我仍在改进我的 DDD 实践和知识。 子域 让我们从什么是亚多曼开始。子域位于问题空间中。一个大</description>
    </item>
    
    <item>
      <title>DDD010-领域驱动设计：实体、价值对象以及如何区分它们</title>
      <link>https://geek.zshipu.com/post/DDD/DDD010-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AE%9E%E4%BD%93%E4%BB%B7%E5%80%BC%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E5%AE%83%E4%BB%AC/</link>
      <pubDate>Fri, 24 Sep 2021 23:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD010-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AE%9E%E4%BD%93%E4%BB%B7%E5%80%BC%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E5%AE%83%E4%BB%AC/</guid>
      <description>DDD 可分为战略和战术设计，其中战术设计是关于 DDD 的构建基块的。这篇文章将是关于DDD的基本构建基块：*实体和价值对象（VOs）。*实体和 VO 是 DDD 中表示模型的两个构建基块。它们是域驱动设计（服务和域事件除外）的起点。 除了只看实体和VO的定义，我还将为您提供一些如何区分它们的指导。 DDD 的构建</description>
    </item>
    
    <item>
      <title>DDD009-领域驱动设计 （DDD） 的介绍</title>
      <link>https://geek.zshipu.com/post/DDD/DDD009-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-DDD-%E7%9A%84%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 24 Sep 2021 22:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD009-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-DDD-%E7%9A%84%E4%BB%8B%E7%BB%8D/</guid>
      <description>DDD 语境中什么是领域？ 知识、影响力或活动领域。用户应用程序的主题区域是软件的域。 我将向您提供 DDD 的概述。这篇文章是关于DDD 的 &amp;ldquo;为什么？我不会深入探讨这里的特定主题。不过，我会指出一些重要术语的定义，就像我刚才对&amp;rdquo;域&amp;rdquo;所做的那样。正如您将意识到共享</description>
    </item>
    
    <item>
      <title>DDD008-第 1 部分：领域驱动设计</title>
      <link>https://geek.zshipu.com/post/DDD/DDD008-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 24 Sep 2021 20:23:44 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD008-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>域建模是困难的。教学和学习域建模更加困难。因此，我的目标是帮助您学习这个巨大的主题，让您对领域驱动的意义有一个坚实的基本理解。概念概念和挖掘示例是本系列的意义。人们经常直接潜入开发带有代码的业务线应用程序 （LoB），但在实施可能导致灾难之前不知道 DDD 真正代表什么。从历史上看，单体建</description>
    </item>
    
    <item>
      <title>DDD007-领域动设计入门建模过程</title>
      <link>https://geek.zshipu.com/post/DDD/DDD007-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E5%BB%BA%E6%A8%A1%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Fri, 24 Sep 2021 18:23:44 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD007-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8%E5%BB%BA%E6%A8%A1%E8%BF%87%E7%A8%8B/</guid>
      <description>此过程为您提供了一个分步学习指南，并实际应用了领域驱动设计 （DDD） 的各个方面 - 从围绕组织的业务模式定位到编码域模型。 使用此过程将引导您完成设计具有 DDD 思维的软件系统的每一个基本步骤，这样您就可以专注于业务挑战，而不是同时学习 DDD 而不知所措。 一旦您经历了流程的几次迭代，您将拥有基础 DDD</description>
    </item>
    
    <item>
      <title>DDD006-领域驱动架构图</title>
      <link>https://geek.zshipu.com/post/DDD/DDD006-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%9E%B6%E6%9E%84%E5%9B%BE/</link>
      <pubDate>Thu, 23 Sep 2021 16:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD006-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%9E%B6%E6%9E%84%E5%9B%BE/</guid>
      <description>领域驱动设计是创建对问题空间的共同理解，通过对话、代码和图表无处不在地加强。DDD 的共享理解增强了协同效应和一致性，提高了可持续交付价值的能力 - 理想情况下，在产品的使用寿命内。正如一个系统的架构，通过图表表达，是一个有利可图的途径，以加强DD的共享模式。 以红色突出显示：其中架构图</description>
    </item>
    
    <item>
      <title>Typora&#43;PicGo自动上传图片到Github图床</title>
      <link>https://geek.zshipu.com/post/typora/Typora&#43;PicGo%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0Github%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Thu, 23 Sep 2021 15:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/typora/Typora&#43;PicGo%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0Github%E5%9B%BE%E5%BA%8A/</guid>
      <description>以前用Typora写东西，要插入图片url需要手动用PicGo将图片上传到图床，然后把链接粘贴到Typora中。之前重装系统以后也重装了Typora，虽然用PicGo上传图片的流程已经很简单了，但是今天打开发现插入图片可以直接调用PicGo上传到图床，立马就开始折腾了起来。 Typ</description>
    </item>
    
    <item>
      <title>DDD005-构建域驱动的微服务</title>
      <link>https://geek.zshipu.com/post/DDD/DDD005-%E6%9E%84%E5%BB%BA%E5%9F%9F%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 23 Sep 2021 11:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD005-%E6%9E%84%E5%BB%BA%E5%9F%9F%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>微服务 - 定义 微服务中的&amp;rdquo;微型&amp;rdquo;一词虽然表示服务的规模，但并不是使应用程序成为微服务的唯一标准。当团队转向基于微服务的架构时，他们的目标是提高其敏捷性 - 自主和频繁地部署功能。很难确定这种建筑风格的简明定义。我喜欢阿德里安·科克克罗夫特的这个简短定义——&amp;rd</description>
    </item>
    
    <item>
      <title>DDD004-域驱动设计初学者指南</title>
      <link>https://geek.zshipu.com/post/DDD/DDD004-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 23 Sep 2021 09:02:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD004-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97/</guid>
      <description>软件应用程序总是围绕构成公司业务的知识和活动领域发展。 域驱动设计是一种软件开发方法，通过将实现与不断发展的模型连接起来来解决复杂的问题：它提供了一套工具，旨在设计和实现具有高业务价值的代码。 需要注意的是，DDD 旨在解决复杂的问题，如果复杂性不足以证明其合理性，则可能过于过分。 DDD 提</description>
    </item>
    
    <item>
      <title>DDD003-域驱动设计：您一直想知道的一切，但不敢问</title>
      <link>https://geek.zshipu.com/post/DDD/DDD003-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%82%A8%E4%B8%80%E7%9B%B4%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87%E4%BD%86%E4%B8%8D%E6%95%A2%E9%97%AE/</link>
      <pubDate>Thu, 23 Sep 2021 08:59:57 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD003-%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%82%A8%E4%B8%80%E7%9B%B4%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87%E4%BD%86%E4%B8%8D%E6%95%A2%E9%97%AE/</guid>
      <description>随着代码基数的增长，其复杂性必然会增加。由于这种情况，它往往变得更加难以保持代码的组织和结构，因为最初的意图，这被称为软件熵。在多次迭代中，如果不执行严格的架构准则，保持良好的关注分离以及正确脱钩类和模块将更具挑战性。 在传统的模型视图控制器 （MVC） 架构中，&amp;rdquo;M&amp;rd</description>
    </item>
    
    <item>
      <title>DDD002-什么是域驱动设计？</title>
      <link>https://geek.zshipu.com/post/DDD/DDD002-%E4%BB%80%E4%B9%88%E6%98%AF%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 23 Sep 2021 08:46:32 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD002-%E4%BB%80%E4%B9%88%E6%98%AF%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>随着代码基数的增长，其复杂性必然会增加。由于这种情况，它往往变得更加难以保持代码的组织和结构，因为最初的意图，这被称为软件熵。在多次迭代中，如果不执行严格的架构准则，保持良好的关注分离以及正确脱钩类和模块将更具挑战性。 在传统的模型视图控制器 （MVC） 架构中，”M”层将掌握所有业务</description>
    </item>
    
    <item>
      <title>DDD001-解释域驱动设计的概念</title>
      <link>https://geek.zshipu.com/post/DDD/DDD001-%E8%A7%A3%E9%87%8A%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Wed, 22 Sep 2021 19:20:04 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/DDD/DDD001-%E8%A7%A3%E9%87%8A%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>使用微服务意味着从松散耦合服务创建应用程序。该应用程序由几个小型服务组成，每个服务代表一个单独的业务目标。它们可以在复杂的应用中结合后单独开发和轻松维护。 微服务是一种架构设计模型，具有特定的边界上下文、配置和依赖性。这些结果来自域驱动设计和 DevOps 的架构原理。域驱动设计是通过代码解决组</description>
    </item>
    
    <item>
      <title>Golang通过http.NewRequest实现模拟请求，添加请求头</title>
      <link>https://geek.zshipu.com/post/Golang%E9%80%9A%E8%BF%87http.NewRequest%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B41/</link>
      <pubDate>Wed, 22 Sep 2021 16:45:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E9%80%9A%E8%BF%87http.NewRequest%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B41/</guid>
      <description>Golang 通过 http.NewRequest 实现模拟请求，添加请求头和请求参数： func DownloadString(remoteUrl string,queryValues url.Values) (body []byte,err error){ client := &amp;amp;http.Client{}; body = nil; uri,err := url.Parse(remoteUrl); if(err != nil){ return ; } if(queryValues != nil){ values := uri.Query(); if(values != nil){ for k,v := range values { queryValues[k] = v; } } uri.RawQuery = queryValues.Encode(); } reqest, err := http.NewRequest(&amp;quot;GET&amp;quot;,uri.String(),nil); reqest.Header.Add(&amp;quot;Accept&amp;quot;, &amp;quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&amp;quot;); reqest.Header.Add(&amp;quot;Accept-Encoding&amp;quot;, &amp;quot;gzip, deflate&amp;quot;); reqest.Header.Add(&amp;quot;Accept-Language&amp;quot;, &amp;quot;zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3&amp;quot;); reqest.Header.Add(&amp;quot;Connection&amp;quot;, &amp;quot;keep-alive&amp;quot;); reqest.Header.Add(&amp;quot;Host&amp;quot;, uri.Host); reqest.Header.Add(&amp;quot;Referer&amp;quot;, uri.String()); reqest.Header.Add(&amp;quot;User-Agent&amp;quot;, &amp;quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0&amp;quot;); response, err := client.Do(reqest) defer response.Body.Close(); if(err != nil){ return ; } if response.StatusCode == 200 { switch response.Header.Get(&amp;quot;Content-Encoding&amp;quot;) { case &amp;quot;gzip&amp;quot;: reader, _ := gzip.NewReader(response.Body) for { buf := make([]byte, 1024) n, err := reader.Read(buf) if err != nil &amp;amp;&amp;amp; err != io.EOF { panic(err)</description>
    </item>
    
    <item>
      <title>Golang通过http.NewRequest实现模拟请求，添加请求头</title>
      <link>https://geek.zshipu.com/post/Golang%E9%80%9A%E8%BF%87http.NewRequest%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B4/</link>
      <pubDate>Wed, 22 Sep 2021 16:42:05 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/Golang%E9%80%9A%E8%BF%87http.NewRequest%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B4/</guid>
      <description>Golang通过http.NewRequest实现模拟请求，添加请求头和请求参数 func DownloadString(remoteUrl string,queryValues url.Values) (body []byte,err error){ 2. client := &amp;amp;http.Client{}; 3. body = nil; 4. uri,err := url.Parse(remoteUrl); 5. if(err != nil){ 6. return ; 7. } 8. if(queryValues != nil){ 9. values := uri.Query(); 10. if(values != nil){ 11. for k,v := range values { 12. queryValues[k] = v; 13. } 14. } 15. uri.RawQuery = queryValues.Encode(); 16. } 17. reqest, err := http.NewRequest(&amp;quot;GET&amp;quot;,uri.String(),nil); 18. reqest.Header.Add(&amp;quot;Accept&amp;quot;, &amp;quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&amp;quot;); 19. reqest.Header.Add(&amp;quot;Accept-Encoding&amp;quot;, &amp;quot;gzip, deflate&amp;quot;); 20. reqest.Header.Add(&amp;quot;Accept-Language&amp;quot;, &amp;quot;zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3&amp;quot;); 21. reqest.Header.Add(&amp;quot;Connection&amp;quot;, &amp;quot;keep-alive&amp;quot;); 22. reqest.Header.Add(&amp;quot;Host&amp;quot;, uri.Host); 23. reqest.Header.Add(&amp;quot;Referer&amp;quot;, uri.String()); 24. reqest.Header.Add(&amp;quot;User-Agent&amp;quot;, &amp;quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0&amp;quot;); 26. response, err := client.Do(reqest)</description>
    </item>
    
    <item>
      <title>程序员文摘：第四期</title>
      <link>https://geek.zshipu.com/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%96%87%E6%91%98%E7%AC%AC%E5%9B%9B%E6%9C%9F/</link>
      <pubDate>Wed, 22 Sep 2021 15:03:10 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%96%87%E6%91%98%E7%AC%AC%E5%9B%9B%E6%9C%9F/</guid>
      <description>1 - A categorized list of all Java and JVM features since JDK 8 to 17 (https://advancedweb.hu/a-categorized-list-of-all-java-and-jvm-features-since-jdk-8-to-17/)：从 Java 8 到 Java 17 一共 194 个 JEP（JDK Enhancement Proposals (http://openj</description>
    </item>
    
    <item>
      <title>2021 真香 7 Javascript 库</title>
      <link>https://geek.zshipu.com/post/2021-%E7%9C%9F%E9%A6%99-7-Javascript-%E5%BA%93/</link>
      <pubDate>Wed, 10 Mar 2021 14:55:14 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/2021-%E7%9C%9F%E9%A6%99-7-Javascript-%E5%BA%93/</guid>
      <description>这里有7个真棒JavaScript库来看看。 [](#fullpagejs)fullpagejs.js 此开源库可帮助您创建在上面 GIF 中看到的全屏幕滚动网站。 链接 [](#animejs)animejs.js 动画库之一，动漫.js是灵活和易于使用。它是完美的工具，帮助您添加一些很酷的动画到您的项目。 链接 [](#screenfulljs)screenfulljs.js 如果您还希望有一个全屏功能，我建议使用此库，而不是全屏API，因为它的跨浏览器</description>
    </item>
    
    <item>
      <title>样式中的 Web 组件</title>
      <link>https://geek.zshipu.com/post/%E6%A0%B7%E5%BC%8F%E4%B8%AD%E7%9A%84-Web-%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 10 Mar 2021 11:53:44 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/%E6%A0%B7%E5%BC%8F%E4%B8%AD%E7%9A%84-Web-%E7%BB%84%E4%BB%B6/</guid>
      <description>Web 组件非常易于样式。您可以以接近零的成本在它们之间共享样式，并且它们仍然可以从外部进行样式设计。它们易于设置和逐步增强。有一大堆使用 Web 组件的框架，如果你进入其中，你自然会知道这一切。但它真的很难理解来自React，Vue，角度等。因此，让我们来谈谈它。 [](#baseline)基</description>
    </item>
    
    <item>
      <title>Python 程序以查找两个列表的交集</title>
      <link>https://geek.zshipu.com/post/python/Python-%E7%A8%8B%E5%BA%8F%E4%BB%A5%E6%9F%A5%E6%89%BE%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E4%BA%A4%E9%9B%86/</link>
      <pubDate>Mon, 08 Mar 2021 10:34:46 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python-%E7%A8%8B%E5%BA%8F%E4%BB%A5%E6%9F%A5%E6%89%BE%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E4%BA%A4%E9%9B%86/</guid>
      <description>交叉操作意味着，我们必须从列表 1 和列表 2 中接收所有常见元素，并将所有元素存储在另一个第三个列表中。 List1::[1,2,3] List2::[2,3,6] List3::[2,3] 算法 Step 1: input lists. Step 2: first traverse all the elements in the first list and check with the elements in the second list. Step 3: if the elements are matched then store in third list. 示例代码 #Intersection of two lists def intertwolist(A, B): C = [i for i in A if i in B] return C # Driver Code A=list() B=list() n=int(input(&amp;quot;Enter the size of the List ::&amp;quot;)) print(&amp;quot;Enter the Element of first list::&amp;quot;) for i in range(int(n)): k=int(input(&amp;quot;&amp;quot;)) A.append(k) print(&amp;quot;Enter the</description>
    </item>
    
    <item>
      <title>使用Java找到两个链接列表的交叉点</title>
      <link>https://geek.zshipu.com/post/java/%E4%BD%BF%E7%94%A8Java%E6%89%BE%E5%88%B0%E4%B8%A4%E4%B8%AA%E9%93%BE%E6%8E%A5%E5%88%97%E8%A1%A8%E7%9A%84%E4%BA%A4%E5%8F%89%E7%82%B9/</link>
      <pubDate>Mon, 08 Mar 2021 10:24:44 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/%E4%BD%BF%E7%94%A8Java%E6%89%BE%E5%88%B0%E4%B8%A4%E4%B8%AA%E9%93%BE%E6%8E%A5%E5%88%97%E8%A1%A8%E7%9A%84%E4%BA%A4%E5%8F%89%E7%82%B9/</guid>
      <description>链接列表是一个线性数据结构，其中每个Node有两个块，这样一个块包含Node的值或数据，而另一个块包含下一个字段的地址。 让我们假设我们有一个链接列表，以便每个Node都包含指向列表中其他Node的随机指点。任务是找到两个链接列表相互交集的Node。如果他们不相交，然后返回空或空作</description>
    </item>
    
    <item>
      <title>UX 设计：如何开始（完整指南）</title>
      <link>https://geek.zshipu.com/post/ux/UX-%E8%AE%BE%E8%AE%A1%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 05 Mar 2021 22:14:35 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/ux/UX-%E8%AE%BE%E8%AE%A1%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</guid>
      <description>您是否希望在UX设计中开始，但不知道从哪里开始？这 6 个步骤将帮助您从一个完整的初学者到训练有素的 UX 设计师 （有工作！切通过所有的噪音在线和开始与此视频！在这段视频中，我们的 UX 设计师之一 Amr 分享了分步指南和时间表，包括要参加的关键在线课程、掌握的工具、要加入的社区、我们学到的教训以及您</description>
    </item>
    
    <item>
      <title>Vim 2021： 在 Vim 中添加上下文菜单</title>
      <link>https://geek.zshipu.com/post/linux/Vim-2021-%E5%9C%A8-Vim-%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E8%8F%9C%E5%8D%95/</link>
      <pubDate>Fri, 05 Mar 2021 09:00:58 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/linux/Vim-2021-%E5%9C%A8-Vim-%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E8%8F%9C%E5%8D%95/</guid>
      <description>当您与光标下的当前单词/行有关时，漂亮的上下文菜单非常有用。它还可以提醒你，当你忘记你的键盘图： [](#setup)设置 在ui扩展插件quickui的帮助下，它可以简单地定义为： Plug &amp;lsquo;skywind3000/vim-quickui&amp;rsquo; &amp;rdquo; define your context menu as a list of (text, command) pairs let g:context_menu_k = [ \ [&amp;rdquo;&amp;amp;Help Keyword\t\ch&amp;rdquo;, &amp;lsquo;echo expand(&amp;rdquo;&amp;rdquo;)&amp;rsquo; ], \ [&amp;rdquo;&amp;amp;Signature\t\cs&amp;rdquo;, &amp;lsquo;echo 101&amp;rsquo;], \ [&amp;lsquo;-&amp;rsquo;], \ [&amp;ldquo;Find in &amp;amp;File\t\cx&amp;rdquo;, &amp;lsquo;exec &amp;ldquo;/&amp;rdquo; . expand(&amp;rdquo;&amp;rdquo;)&amp;rsquo; ], \ [&amp;ldquo;Find in &amp;amp;Project\t\cp&amp;rdquo;, &amp;lsquo;exec &amp;ldquo;vimgrep &amp;rdquo; . expand(&amp;rdquo;&amp;rdquo;) . &amp;ldquo;*&amp;ldquo;&amp;rsquo; ],</description>
    </item>
    
    <item>
      <title>SSH - 配置</title>
      <link>https://geek.zshipu.com/post/linux/SSH-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 04 Mar 2021 20:30:08 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/linux/SSH-%E9%85%8D%E7%BD%AE/</guid>
      <description>[](#ssh-commands)SSH命令 生成 ssh-key 运行终端 中的命令，然后重命名您的密钥或键输入，以继续使用通用给定名称，该名称id_rsa用于私钥，id_rsa.pub 用于公共密钥 ssh-keygen -t rsa Enter fullscreen mode Exit fullscreen mode 添加标识 ssh-add /home/user/.ssh/id_rsa Enter fullscreen mode Exit fullscreen mode [](#add-the-identity-to-githu</description>
    </item>
    
    <item>
      <title>10 分钟内学到的东西，这将对您的编程生涯的其余部分有用</title>
      <link>https://geek.zshipu.com/post/news/10-%E5%88%86%E9%92%9F%E5%86%85%E5%AD%A6%E5%88%B0%E7%9A%84%E4%B8%9C%E8%A5%BF%E8%BF%99%E5%B0%86%E5%AF%B9%E6%82%A8%E7%9A%84%E7%BC%96%E7%A8%8B%E7%94%9F%E6%B6%AF%E7%9A%84%E5%85%B6%E4%BD%99%E9%83%A8%E5%88%86%E6%9C%89%E7%94%A8/</link>
      <pubDate>Fri, 26 Feb 2021 18:18:12 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/news/10-%E5%88%86%E9%92%9F%E5%86%85%E5%AD%A6%E5%88%B0%E7%9A%84%E4%B8%9C%E8%A5%BF%E8%BF%99%E5%B0%86%E5%AF%B9%E6%82%A8%E7%9A%84%E7%BC%96%E7%A8%8B%E7%94%9F%E6%B6%AF%E7%9A%84%E5%85%B6%E4%BD%99%E9%83%A8%E5%88%86%E6%9C%89%E7%94%A8/</guid>
      <description>有一个非常简单的技巧，你可以在短短几分钟内学习，这将是有用的，你的未来作为一个程序员。有一个关键的原因，为什么这一个小把戏是如此重要，是重要的理解 [](#the-10-tab-rule)10 选项卡规则 在编程中，您将遇到问题、错误消息以及程序没有执行您认为应该做的事情的情况。你对这些场景的React将是一个不错的程序员和一</description>
    </item>
    
    <item>
      <title>JUnit 4和5注释每个开发人员应该知道</title>
      <link>https://geek.zshipu.com/post/java/JUnit-4%E5%92%8C5%E6%B3%A8%E9%87%8A%E6%AF%8F%E4%B8%AA%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93/</link>
      <pubDate>Thu, 25 Feb 2021 20:32:12 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/JUnit-4%E5%92%8C5%E6%B3%A8%E9%87%8A%E6%AF%8F%E4%B8%AA%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93/</guid>
      <description>[](#a-summary-of-junit-4-amp-5-annotations-with%C2%A0examples)JUnit 4 +5 注释摘要，附有示例 在写这篇文章之前，我只知道一些常用的JUnit 4注释，如 @RunWith @Test @Before @After @BeforeClass @AfterClass 你不得不评论多少次测试？令我吃惊的是，有注释可以做到这一点。 @Ignore(&amp;quot;Reason for ignoring&amp;quot;) @Disabled(&amp;quot;Reason for disabling&amp;quot;) 嗯，事实证明，还有其他一些注释，特别是在JUnit 5，可以帮助编写更好和更有效的测试。 [](#what-to%C2%</description>
    </item>
    
    <item>
      <title>为什么你应该先学习 JavaScript 原理 （不是最热门的框架）</title>
      <link>https://geek.zshipu.com/post/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%85%88%E5%AD%A6%E4%B9%A0-JavaScript-%E5%8E%9F%E7%90%86-%E4%B8%8D%E6%98%AF%E6%9C%80%E7%83%AD%E9%97%A8%E7%9A%84%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Thu, 25 Feb 2021 20:24:15 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%85%88%E5%AD%A6%E4%B9%A0-JavaScript-%E5%8E%9F%E7%90%86-%E4%B8%8D%E6%98%AF%E6%9C%80%E7%83%AD%E9%97%A8%E7%9A%84%E6%A1%86%E6%9E%B6/</guid>
      <description>[](#no-winners-in-the-crazy-frameworks-race)疯狂框架竞赛中无优胜者 在过去的五年里，我一直在疯狂地追逐JavaScript图书馆和框架之间最热门的比赛。也许在某个时候，我们都问自己，我们应该学习哪个Javascript框架，评估利弊，为什</description>
    </item>
    
    <item>
      <title>网络浏览器引擎概述 ： 初学者</title>
      <link>https://geek.zshipu.com/post/web/%E7%BD%91%E7%BB%9C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%95%E6%93%8E%E6%A6%82%E8%BF%B0-%E5%88%9D%E5%AD%A6%E8%80%85/</link>
      <pubDate>Thu, 25 Feb 2021 20:14:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/web/%E7%BD%91%E7%BB%9C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%95%E6%93%8E%E6%A6%82%E8%BF%B0-%E5%88%9D%E5%AD%A6%E8%80%85/</guid>
      <description>作为一个人，当你在纸上写一个文档，或者让我们说打印一份报纸时，你会看到标题和它下面故事的某些部分，以及指向另一页上剩余故事的链接。一些头条新闻下面会有完整的故事。您会看到段落中断到一条新线，它们之间有空间。您可以在页面的不同位置看到不同的颜色、图像。您会看到不同的图像大小、不同的</description>
    </item>
    
    <item>
      <title>framework not found</title>
      <link>https://geek.zshipu.com/post/iOS/framework-bot-found/</link>
      <pubDate>Mon, 22 Feb 2021 16:04:55 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/iOS/framework-bot-found/</guid>
      <description>问题：在build的时候framework not found 解决： 添加需要的framework 确定framework齐全的情况下，就是系统添加了冗余的framework编译需求，找到require列表删除即可 project.xcodeproj文件---&amp;gt;显示包内容---&amp;gt;proje</description>
    </item>
    
    <item>
      <title>融云iOS无法接受语音视频消息</title>
      <link>https://geek.zshipu.com/post/flutter/rongcloud-cannot-receive-message-ios/</link>
      <pubDate>Wed, 27 Jan 2021 09:03:11 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/rongcloud-cannot-receive-message-ios/</guid>
      <description>安卓（李某测试）拨打 苹果（李朴2），进入对话界面， 弹出键盘，弹出报错,在chat_room.dart文件中 [VERBOSE-2:ui_dart_state.cc(177)] Unhandled Exception: &#39;package:flutter/src/widgets/scroll_controller.dart&#39;: Failed assertion: line 112 pos 12: &#39;_positions.isNotEmpty&#39;: ScrollController not attached to any scroll views. #0 _AssertionError._doThrowNew (dart:core-patch/errors_patch.dart:46:39) #1 _AssertionError._throwNew (dart:core-patch/errors_patch.dart:36:5) #2 ScrollController.position (package:flutter/src/widgets/scroll_controller.dart:112:12) #3 _ChatRoomState.didChangeMetrics (package:polars_app/pages/chat/chat_room.dart:708:27) #4 WidgetsBinding.handleMetricsChanged (package:flutter/src/widgets/binding.dart:571:16) #5 _rootRun (dart:async/zone.dart:1190:13) #6 _CustomZone.run (dart:async/zone.dart:1093:19) #7 _CustomZone.runGuarded (dart:async/zone.dart:997:7) #8 _invoke (dart:ui/hooks.dart:251:10) #9 _updateWindowMetrics (dart:ui/hooks.dart:53:3) 解决：在访问maxScrollExtent属性前一定要判断_scrollCon</description>
    </item>
    
    <item>
      <title>完整的入门vue指南</title>
      <link>https://geek.zshipu.com/post/vue/%E5%AE%8C%E6%95%B4%E7%9A%84%E5%85%A5%E9%97%A8vue%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 25 Jan 2021 22:39:08 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/vue/%E5%AE%8C%E6%95%B4%E7%9A%84%E5%85%A5%E9%97%A8vue%E6%8C%87%E5%8D%97/</guid>
      <description>Vue.js是一个前端框架，针对渐进式集成进行了优化。这意味着您可以拥有一个只集成了几个 Vue 组件的大型应用程序，或者您可以从头开始，在 Vue 生态系统中完全工作。 另一个让 Vue 与众不同的是与很多框架相比，学习曲线较低。如果您了解 HTML、CSS 和 JavaScript，那么您就已经非常接近了，</description>
    </item>
    
    <item>
      <title>完整的入门React指南</title>
      <link>https://geek.zshipu.com/post/react/%E5%AE%8C%E6%95%B4%E7%9A%84%E5%85%A5%E9%97%A8React%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 25 Jan 2021 22:35:34 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/react/%E5%AE%8C%E6%95%B4%E7%9A%84%E5%85%A5%E9%97%A8React%E6%8C%87%E5%8D%97/</guid>
      <description>[](#what-is-react)什么是React React 是 Facebook 开发团队在 2013 年构建的 JavaScript 库，用于使用户界面更加模块化（或可重用）且更易于维护。根据 React 的网站，它用于&amp;rdquo;构建管理自身状态的封装组件，然后组合它们以生成复杂的 UIs&amp;rdquo;。 我要在这篇文章中使用很多 Facebook 的例子， 因为</description>
    </item>
    
    <item>
      <title>学习React之前，JavaScript 基础知识</title>
      <link>https://geek.zshipu.com/post/react/%E5%AD%A6%E4%B9%A0React%E4%B9%8B%E5%89%8DJavaScript-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 25 Jan 2021 22:11:56 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/react/%E5%AD%A6%E4%B9%A0React%E4%B9%8B%E5%89%8DJavaScript-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>在深入了解 React 之前了解有关 JavaScript 和 Web 开发的所有信息。不幸的是， 我们生活在一个不完美的世界里， 所以在 React 之前对所有 JavaScript 进行大做笑只会让你流血。如果您已经拥有了一些 JavaScript 的经验，那么在 React 之前，您需要学习的只是用于开发 React 应用程序的 JavaScript 功能。关于JavaScript，在学习React之前，你应该对它感到</description>
    </item>
    
    <item>
      <title>React设计模式（第 2 部分）</title>
      <link>https://geek.zshipu.com/post/react/React%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%AC-2-%E9%83%A8%E5%88%86/</link>
      <pubDate>Mon, 25 Jan 2021 22:04:18 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/react/React%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%AC-2-%E9%83%A8%E5%88%86/</guid>
      <description>这一次，我们将讨论模式、模式和模式。ContextPresentational and Container ComponentsCompound Components [](#context)上下文 根据React文档： 上下文提供了一种通过组件树传递数据的方法，而无需在每个级别手动传递道具。 简单地说，如果您有一个需要通过多个组件级别的全局状态，可以使用 。例如：如</description>
    </item>
    
    <item>
      <title>React设计模式（第 1 部分）</title>
      <link>https://geek.zshipu.com/post/react/React%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%AC-1-%E9%83%A8%E5%88%86/</link>
      <pubDate>Mon, 25 Jan 2021 22:00:25 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/react/React%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%AC-1-%E9%83%A8%E5%88%86/</guid>
      <description>注：有些模式侧重于状态管理概念，但我们可以避免和其他第三方状态管理工具，因为它们与本文的主题无关。Redux,Mobx [](#render-props)渲染道具 响应文档比比皆是： 术语&amp;rdquo;呈现道具&amp;rdquo;是指使用其值为函数的 prop 在 React 组件之间共享代码的技术。 简单地说，它</description>
    </item>
    
    <item>
      <title>ssh避免重复输入密码</title>
      <link>https://geek.zshipu.com/post/unix/rsa-add/</link>
      <pubDate>Wed, 20 Jan 2021 11:52:44 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/unix/rsa-add/</guid>
      <description>解决方法：添加私钥 步骤： 切换到文件夹 cd ~/.ssh 添加秘钥 ssh-add id_rsa 查看秘钥 ssh-add -l 测试github仓库连接 git ls-remote -h -- git@github.com:zhangjk4859/jenkins-build-iOS.git 完。 参考：https://superuser.com/questions/988185/how-to-avoid-being-asked-enter-passphrase-for-k</description>
    </item>
    
    <item>
      <title>jenkins安装</title>
      <link>https://geek.zshipu.com/post/unix/jenkins-installation/</link>
      <pubDate>Wed, 20 Jan 2021 10:33:31 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/unix/jenkins-installation/</guid>
      <description>安装 brew install jenkins-lts 启动 brew services start jenkins-lts 停止 brew services stop jenkins-lts 重启 brew services restart jenkins-lts 更新 brew upgrade jenkins-lts 局域网访问配置 homebrew.mxcl.jenkins.plist里面httpListenAddress从127.0.0.1更改为0.0.0.0 两个地方 ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist /usr/local/Cellar/jenkins/版本号/home</description>
    </item>
    
    <item>
      <title>2021 年跨平台应用框架将选什么</title>
      <link>https://geek.zshipu.com/post/framework/2021-%E5%B9%B4%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%B0%86%E9%80%89%E4%BB%80%E4%B9%88/</link>
      <pubDate>Sun, 10 Jan 2021 10:50:25 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/framework/2021-%E5%B9%B4%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%B0%86%E9%80%89%E4%BB%80%E4%B9%88/</guid>
      <description>在当今具有高度颠覆性且达尔文式移动应用开发世界中，企业不会冒险错过在两个平台上的存在：谷歌Play商店或苹果应用商店。 但是，如果企业使用本机应用，预算通常是个问题。这就是为什么跨平台应用程序开发已成为无与伦比的企业选择，旨在出现在Android以及iOS。 在继续了解 2021 年这一类框架</description>
    </item>
    
    <item>
      <title>libstdc&#43;&#43;缺失问题</title>
      <link>https://geek.zshipu.com/post/iOS/libstdc/</link>
      <pubDate>Thu, 07 Jan 2021 16:04:55 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/iOS/libstdc/</guid>
      <description>问题：libstdc++ not found 原因：libstdc++ was deprecated 5 years ago,we should update project to use libc++ 解决：更新工程或者下载库到当前工程，下载地址 https://github.com/zhangjk4859/zhangjk4859.github.io/raw/zjk/files/libstdc--master.zip 下载完成以后执行对应.sh文件即可 参考：1.https://github.com/devdawei/libstdc- 2.https://www.jianshu.com/p/e694782b8740</description>
    </item>
    
    <item>
      <title>Xcode12,iOS14，app启动慢</title>
      <link>https://geek.zshipu.com/post/iOS/slow-app-launch-time-after-updating-to-ios-14-and-xcode-12/</link>
      <pubDate>Thu, 07 Jan 2021 12:38:38 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/iOS/slow-app-launch-time-after-updating-to-ios-14-and-xcode-12/</guid>
      <description>问题：启动app会白屏很长一段时间，即使是一个全新的app 解决方案： In the Xcode menu,go to product &amp;gt; scheme &amp;gt; edit scheme open the info tab Uncheck the debug executables checkbox 参考：1. https://stackoverflow.com/questions/63929122/slow-app-launch-time-after-updating-to-ios-14-and-xcode-12 2.https://developer.apple.com/forums/thread/651012</description>
    </item>
    
    <item>
      <title>Mac环境下朗文词典</title>
      <link>https://geek.zshipu.com/post/unix/mac-dictionary/</link>
      <pubDate>Thu, 07 Jan 2021 11:55:31 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/unix/mac-dictionary/</guid>
      <description>原理：原生的dictionary加朗文的词库，词库需要转换，转换过程见参考链接2 参考：1. https://www.zhihu.com/question/21964466 https://kaihao.io/2018/mdict-to-macos-dictionary/ 3.https://www.zhihu.com/question/20428599/answer/223511099</description>
    </item>
    
    <item>
      <title>链表是什么</title>
      <link>https://geek.zshipu.com/post/iOS/what-is-link-list/</link>
      <pubDate>Wed, 06 Jan 2021 00:23:22 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/iOS/what-is-link-list/</guid>
      <description>链表了解吗 Linked list is a sequence of links which contains items Link - Each link of a linked list can store a data called an element Next - Each link of a linked list contains a link to the next link called Next LinkedList - A Linked List contains the connection link to the first link called First Linked list can be visualized as a chain of nodes,where every node points to hte next node ![image]( Simple linked list -item navigation is forward only doubly linked list - items can be navigated forward and backward circular linked list - last item contains link of the first element as next and the first element has a link to the last element as previous. 双向链表是什么 同上，节点有前</description>
    </item>
    
    <item>
      <title>hexo给目录分类</title>
      <link>https://geek.zshipu.com/post/unix/hexo-categories/</link>
      <pubDate>Tue, 05 Jan 2021 13:55:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/unix/hexo-categories/</guid>
      <description>创建分类功能 hexo new page categories 打开index文件 /source/categories/index.md 文件添加字段 title: categories date: 2021-01-05 12:19:59 type: &amp;quot;categories&amp;quot; 写文章的时候加上分类标签 title: mac android studio flutter 打包 apk date: 2020-11-16 20:16:07 categories: - unix tags: 添加标签同理 完。 参考：https://www.cnblogs.com/hankleo/p/11606224.html</description>
    </item>
    
    <item>
      <title>flutter中的websocket概念</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-websocket/</link>
      <pubDate>Tue, 05 Jan 2021 11:44:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-websocket/</guid>
      <description>目的：实现客户端与服务端的实时通讯，基于TCP协议 与keep-alive区别：keep-alive机制会连接一小段时间，最终会断开，ws协议不会断开 原理：通过一条特殊的http协议请求进行握手后，服务端支持ws协议，则进行协议升级，利用http创建的tcp连接，实现长连接。 步骤分</description>
    </item>
    
    <item>
      <title>《flutter实战》电子书</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-book/</link>
      <pubDate>Tue, 05 Jan 2021 11:15:43 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-book/</guid>
      <description>国内第一本开源的电子书，也有实体书，特此记录 在线编辑步骤 npm i -g gitbook-cli gitbook install #安装本书构建所要依赖的插件 gitbook serve 来源：https://github.com/flutterchina/flutter-in-action</description>
    </item>
    
    <item>
      <title>flutter网络三方库Flutter-Net</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-dio-net/</link>
      <pubDate>Tue, 05 Jan 2021 10:54:40 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-dio-net/</guid>
      <description>在给app的网络请求添加loading过程中，发现一个封装更加完善的网络三方库，里面有很多值得借鉴的细节，特此记录 优点： 默认自带loading，如果单个请求不想要loading，可以传递参不显示，自己封装的目前全部显示loading 更加友好的控制台json打印 封装了公共参数 响应拦</description>
    </item>
    
    <item>
      <title>flutter中一个好用的三方库loading</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-loading/</link>
      <pubDate>Tue, 05 Jan 2021 10:47:15 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-loading/</guid>
      <description>地址：https://github.com/kokohuang/flutter_easyloading 用法，添加到materialApp的builder属性中 class MyApp extends StatelessWidget { // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: &#39;Flutter EasyLoading&#39;, theme: ThemeData( primarySwatch: Colors.blue, ), home: MyHomePage(title: &#39;Flutter EasyLoading&#39;), builder: EasyLoading.init(), ); } } 接下来在任何地方调用 EasyLoading.show(status: &#39;loading...&#39;); EasyLoading.showProgress(0.3, status: &#39;downloading...&#39;); EasyLoading.showSuccess(&#39;Great Success!&#39;); EasyLoading.showError(&#39;Failed with Error&#39;); EasyLoading.showInfo(&#39;Useful Information.&#39;); EasyLoading.showToast(&#39;Toast&#39;);</description>
    </item>
    
    <item>
      <title>flutter padding组件</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-padding/</link>
      <pubDate>Tue, 05 Jan 2021 10:43:56 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-padding/</guid>
      <description>如果一个组件没有调整内边距的属性，那么可以在它的外层加一层Padding，达到调整位置的效果，效果等同于放到Container里，比Container更轻量级 Padding( padding: EdgeInsets.all(10), child: Text(&#39;这是一段测试文字&#39;), )</description>
    </item>
    
    <item>
      <title>flutter ListTitle组件</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-list-title/</link>
      <pubDate>Tue, 05 Jan 2021 10:34:14 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-list-title/</guid>
      <description>该组件可以用在container和card组件里，默认有大标题和小标题属性，无需再进行text上下排列组合 Card( margin: EdgeInsets.all(10), child: Column( children: &amp;lt;Widget&amp;gt;[ ListTile( title: Text(&amp;quot;张三&amp;quot;,style: TextStyle(fontSize: 28)), subtitle: Text(&amp;quot;董事长&amp;quot;), ), Divider(), ListTile( title: Text(&amp;quot;电话:123456789</description>
    </item>
    
    <item>
      <title>flutter card组件</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-card-widget/</link>
      <pubDate>Tue, 05 Jan 2021 10:27:30 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-card-widget/</guid>
      <description>在开发过程中，Container组件使用多了，会有一些重复的代码，比如矩形边框和圆角，需要额外加decoration,使用card已经默认加上了边框和阴影 Card( margin: EdgeInsets.all(10), child: ... )</description>
    </item>
    
    <item>
      <title>flutter中radio单选使用</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-radio/</link>
      <pubDate>Tue, 05 Jan 2021 10:10:26 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-radio/</guid>
      <description>在一个数组容器里放置两个及其以上radio，当radio的group value和自己value相等时，便是选中状态 int groupValue = 1; _onChange(value){ if(mounted) setState(() { groupValue = value; }); } Row( mainAxisAlignment: MainAxisAlignment.center, children: &amp;lt;Widget&amp;gt;[ Radio( value: 1, groupValue: groupValue, onChanged: (T) =&amp;gt; _onChange(T), ), Radio( value: 2, groupValue: groupValue, onChanged: (T) =&amp;gt; _onChange(T), ), Radio( value: 3, groupValue: groupValue, onChanged: (T) =&amp;gt; _onChange(T), ), ], ) 参考：https://blog.csdn.net/zhangwes</description>
    </item>
    
    <item>
      <title>flutter个别圆角切割</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-only-border/</link>
      <pubDate>Tue, 05 Jan 2021 10:06:41 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-only-border/</guid>
      <description>取用圆角类的only属性，左上，右上，左下，右下，此处圆角半径也是一个类 BorderRadius.only( topLeft: Radius.circular(8.w), topRight: Radius.circular(8.w), ) 全部圆角则取all BorderRadius.all( Radius.circular(8.w) )</description>
    </item>
    
    <item>
      <title>flutter随机颜色生成</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-random-color/</link>
      <pubDate>Tue, 05 Jan 2021 10:00:03 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-random-color/</guid>
      <description>在listview或gridview中，用index去获颜色，挨个取一遍 Colors.primaries[index % Colors.primaries.length]</description>
    </item>
    
    <item>
      <title>flutter模型生成</title>
      <link>https://geek.zshipu.com/post/flutter/generate-gdart-file/</link>
      <pubDate>Fri, 25 Dec 2020 13:17:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/generate-gdart-file/</guid>
      <description>首先自己写好模型类模板代码 import &#39;package:json_annotation/json_annotation.dart&#39;; part &#39;buy_record_data.g.dart&#39;; ///标志class需要实现json序列化功能 @JsonSerializable() class BuyRecordData { ///属性 List&amp;lt;BuyRecordEntity&amp;gt; entities; /// 构造函数 BuyRecordData(this.entities); /// 这个函数在.g.dart中，命名就是类名+FromJson /// 直接写就行 报错也没关系 生成.g.dart文件之后就好了 factory BuyRecordData.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$BuyRecordDataFromJson(json); Map&amp;lt;String, dynamic&amp;gt; toJson() =&amp;gt; _$BuyRecordDataToJson(this); } 然后在终端运行，生成.g.</description>
    </item>
    
    <item>
      <title>flutter渲染原理要点</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-render-theory/</link>
      <pubDate>Wed, 02 Dec 2020 23:35:58 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-render-theory/</guid>
      <description>渲染过程会生成三棵树 widget树 element树 render object树 提高buid效率，在build方法中尽量少做事，层级越简单越好 setState方法尽量下放到底层节点 尽量减少重绘区域，使用repaint boundry 减少离屏渲染 比如save layer，clip path， 减少透明度使用，因为每</description>
    </item>
    
    <item>
      <title>dart枚举</title>
      <link>https://geek.zshipu.com/post/flutter/dart-enum/</link>
      <pubDate>Wed, 02 Dec 2020 08:03:53 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/dart-enum/</guid>
      <description>enum MediaType { movie, //0 shortVideo, //1 other, //2 } var videoType = MediaType.values[0]; // videoType == movie 定义枚举和OC差别不大，取值的时候不可以直接和int比较，需要从枚举数组中根据index拿出来，比OC多了一步</description>
    </item>
    
    <item>
      <title>flutter组件</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-components/</link>
      <pubDate>Fri, 27 Nov 2020 11:14:54 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-components/</guid>
      <description>sliverList A sliver that places multiple box children in a linear array along the main axis. Each child is forced to have the SliverConstraints.crossAxisExtent in the cross axis but determines its own main axis extent. SliverList determines its scroll offset by &amp;ldquo;dead reckoning&amp;rdquo; because children outside the visible part of the sliver are not materialized, which means SliverList cannot learn their main axis extent.Instead,newly materialized children are placed adjacent to existing children.</description>
    </item>
    
    <item>
      <title>flutter actionSheet使用方法</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-action-sheet/</link>
      <pubDate>Thu, 26 Nov 2020 18:51:55 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-action-sheet/</guid>
      <description>//函数 _showCupertinoActionSheet() async{ var result = await showCupertinoModalPopup( context: context, builder: (context) { return CupertinoActionSheet( title: Text(&#39;标题&#39;), message: Text(&#39;内容&#39;), actions: &amp;lt;Widget&amp;gt;[ CupertinoActionSheetAction( child: Text( &#39;标题一&#39;, style: TextStyle( color: Color(0xFF00C599) ), ), onPressed: () { Navigator.of(context).pop(&#39;delete&#39;); }, isDefaultAction: true, ), CupertinoActionSheetAction( child: Text(&#39;标题二&#39;), onPressed: () { Navigator.of(context).pop(&#39;not delete&#39;); }, isDestructiveAction: true, ), ], cancelButton: CupertinoActionSheetAction( child: Text( &#39;取消&#39;, style: TextStyle( color: Colors.white ), ), onPressed: () { Navigator.of(context).pop(&#39;cancel&#39;); }, ), ); }); print(&#39;$result&#39;); } 总结：在showCupertinoModalPo</description>
    </item>
    
    <item>
      <title>无法打开&#34;xxx&#34;,因为无法确认开发者的身份</title>
      <link>https://geek.zshipu.com/post/unix/cannot-open-app-on-mac/</link>
      <pubDate>Wed, 25 Nov 2020 23:55:41 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/unix/cannot-open-app-on-mac/</guid>
      <description>处理方法 加权限,同意任何来源 sudo spctl --master-disable //用完还原 sudo spctl --master-enable 按住command键，鼠标右键菜单选择打开app，出现窗口会出现打开按钮，正常情况下不会出现 参考：https://huajiakeji.com/macos/2019-07/2793.html 完。</description>
    </item>
    
    <item>
      <title>fijkplayer播放期间屏幕熄灭处理</title>
      <link>https://geek.zshipu.com/post/flutter/fijkplayer-off/</link>
      <pubDate>Wed, 25 Nov 2020 23:49:43 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/fijkplayer-off/</guid>
      <description>两种方案 1.借用第三方插件，让当前页面保持常量，别的页面跟随系统 wakelock: ^0.1.4+2 Wakelock.enable(); Wakelock.disable(); 2.调用fijkplayer自身的常量参数 二选一 await player.setOption(FijkOption.hostCategory, &amp;quot;request-screen-on&amp;quot;, 1); FijkPlugin.keepScreenOn ; 参考：https://www.jianshu.com/p/8750de450850 https://fijkplayer.befovy.com/docs/zh/host-option.html#gsc.tab=0</description>
    </item>
    
    <item>
      <title>pubspec.lock坑</title>
      <link>https://geek.zshipu.com/post/flutter/pubspec-error/</link>
      <pubDate>Wed, 25 Nov 2020 09:27:09 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/pubspec-error/</guid>
      <description>昨天以为pubspec.lock文件和cocoapods的profile.lock文件性质一样，可以生成，所以删除，结果遇见了编译报错，即使在执行了 flutter pub get 命令重新生成后，经过一番研究和队友协助，找到是这个问题，把老的恢复回来工程编译正常，下面是报错的关键字 Execution failed for task &#39;:app:processDebugManifest&#39;. &amp;gt; Manifest merger failed : Attribute provider...</description>
    </item>
    
    <item>
      <title>flutter启动页</title>
      <link>https://geek.zshipu.com/post/flutter/splash-page/</link>
      <pubDate>Tue, 24 Nov 2020 14:09:04 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/splash-page/</guid>
      <description>在main.dart文件的materialAPP.home属性返回一个UI，这个UI就是启动页，启动页的scanffold的body，返回一张图片 in main.dart return MaterialApp( home: SplashPage(), ); in SplashPage @override Widget build(BuildContext context) { return Scaffold( body: Container( child: Image.asset( &#39;assets/images/launch_image.png&#39;, fit: BoxFit.fill, width: double.infinity, height: double.infinity, ), ), ); }</description>
    </item>
    
    <item>
      <title>flutter工程注意事项</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-tips/</link>
      <pubDate>Tue, 24 Nov 2020 11:50:49 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-tips/</guid>
      <description>在工程文件夹内，git管理，忽略pubspec.lock文件 ，运行 flutter pub get /ios文件夹里，忽略Pods文件夹，Podfile.lock文件，*.xcworkspace文件,运行 pod install</description>
    </item>
    
    <item>
      <title>enter passphrase for key询问解决</title>
      <link>https://geek.zshipu.com/post/unix/ssh-issue/</link>
      <pubDate>Tue, 24 Nov 2020 11:47:58 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/unix/ssh-issue/</guid>
      <description>ssh-add ~/.ssh/id_rsa ssh添加id_rsa文件即可</description>
    </item>
    
    <item>
      <title>zsh的挽救</title>
      <link>https://geek.zshipu.com/post/unix/zsh-problem/</link>
      <pubDate>Mon, 23 Nov 2020 18:36:03 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/unix/zsh-problem/</guid>
      <description>今天配置环境变量的时候，因为失误不小心让zsh整个失效了， zsh: command not found:xxx 补救办法，在命令行输入 PATH=/bin:/usr/bin:/usr/local/bin:${PATH} 恢复正常 失误的地方在于配置flutter时路径少输入一个$符号，在$HOME/.zshrc文件中 //正确 export PATH=&amp;quot;$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin&amp;quot; //错误 export PATH=&amp;quot;PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin&amp;quot; //注意 PATH_TO_FLUTTER_GIT_DIRECTORY 是需要输入全路径的，/User/xxx/xxx,不是~符号！</description>
    </item>
    
    <item>
      <title>LRU cache implementation</title>
      <link>https://geek.zshipu.com/post/arithmetic/lru-cache/</link>
      <pubDate>Fri, 20 Nov 2020 23:39:09 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/arithmetic/lru-cache/</guid>
      <description>LRU cache stand for Least Recently Used Cache,which evict least recently used entry.As Cache purpose is to provide fast and efficient way of retrieving data, it need to meet certain requirement. Some of the Requirement are fixed size:cache need to have some bounds to limit memory usages. Fast Access:Cache Inert and lookup operation should be fast, preferably O(1) time Replacement of Entry in case,Memory Limit is reached:A cache shoule have efficient algorithm to evict when memory is full. In case of LRU cache we evict least recently used entry so we have to keep track of recently used entries, entries which have not been used from long time and which have been used recently, plus lookup and insertion operation should be fast enough . When we think about O(1) lookup, obvious data structure comes in our mind is HashMap.HashMap provide</description>
    </item>
    
    <item>
      <title>flutter中list view加一个header view</title>
      <link>https://geek.zshipu.com/post/flutter/listview-headerview/</link>
      <pubDate>Fri, 20 Nov 2020 23:24:35 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/listview-headerview/</guid>
      <description>body: CustomScrollView( slivers: &amp;lt;Widget&amp;gt;[ SliverGrid.count( //具体的配置 ), //列表 SliverFixedExtentList( delegate: SliverChildBuilderDelegate( (context, index) =&amp;gt; ConversationListItem( delegate: this, conversation: conList[index] ), childCount: conList.length, ), itemExtent: 100, ), ], ), 解析：大的容器叫做custom scroll view,子控件叫做slivers，是一个数组，在数组里面从上到下排布sliver控件，有sliver grid，有sliver fixed extent list 效果大概长这样</description>
    </item>
    
    <item>
      <title>flutter按钮点击事件传给delegate</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-btn-delegate/</link>
      <pubDate>Thu, 19 Nov 2020 22:43:34 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-btn-delegate/</guid>
      <description>在ios中，通常用block或者代理去实现，在flutter中，外部实现一个方法，把这个方法传给按钮，按钮内部用callback接受，ontap方法调用即可，实现如下 import &#39;package:flutter/cupertino.dart&#39;; import &#39;package:flutter/material.dart&#39;; //定义函数类型 typedef StringValue = void Function(String); class ImageBtn extends StatelessWidget { //作为属性 StringValue callback; ImageBtn({Key key,this.callback}) : super(key: key); @override Widget build(BuildContext context) { return new GestureDetector( onTap: () { print(&#39;MyButton was tappedq!&#39;); //调用 this.callback(&amp;quot;testString&amp;quot;); }, child: ...</description>
    </item>
    
    <item>
      <title>flutter控件从上到下居中排列</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-expanded/</link>
      <pubDate>Thu, 19 Nov 2020 22:30:23 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-expanded/</guid>
      <description>Column( children: &amp;lt;Widget&amp;gt;[ Expanded(child: Image.asset(&#39;assets/images/$imageName.png&#39;) ), Text( this.model.title, style: TextStyle( fontSize: 15, color: Colors.white, ), ), ], ), 注解： - column是一个垂直的容器，子控件放在children里面 - 要想让图片居中，需要放在expanded容器里面,官方定义：expanded is a widget that expands a child of a row,column,or flex so that the child fills the available space. -</description>
    </item>
    
    <item>
      <title>flutter判断页面是否在屏幕上</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-page-is-current/</link>
      <pubDate>Thu, 19 Nov 2020 22:18:51 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-page-is-current/</guid>
      <description>ModalRoute.of(context).isCurrent 解析：由于页面的组合都是由路由管理的，所以把当前的context传给路由，让路由去判断是否在最顶端，这个路由叫做模态路由</description>
    </item>
    
    <item>
      <title>图片引发的思考</title>
      <link>https://geek.zshipu.com/post/arithmetic/babylon/</link>
      <pubDate>Wed, 18 Nov 2020 22:48:43 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/arithmetic/babylon/</guid>
      <description>在博客中看到这张有趣的图片，自己加了点扩展 自动证明了 - (a+b)^2 = a^2 + 2ab + b^2 - (a-b)^2 = a^2 - 2ab + b^2</description>
    </item>
    
    <item>
      <title>flutter tabcontroller监听点击调用两次</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-tabbar-click-bug/</link>
      <pubDate>Wed, 18 Nov 2020 16:14:48 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-tabbar-click-bug/</guid>
      <description>原因：点击本身出发一次监听，随之产生的动画效果再次出发监听，如果是滑动，仅触发一次监听 解决：看下点击的索引和动画值对不对，过滤掉点击的listen，只显示动画的listen _tabController.addListener(() { if(_tabController.index == _tabController.animation.value){ int index = _tabController.index; print(&amp;quot;====================当前点击了$index==</description>
    </item>
    
    <item>
      <title>flutter延迟执行方法</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-thread-delay/</link>
      <pubDate>Wed, 18 Nov 2020 12:21:12 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-thread-delay/</guid>
      <description>延迟加载 //延迟1秒加载 Future.delayed(Duration(seconds: 1), (){ //do sth }); 使用场景： &amp;gt; 同时执行toast和导航栏页面切换，会导致卡顿，可用延迟其中一个方法，避免同时执行</description>
    </item>
    
    <item>
      <title>flutter渐变处理</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-gradient/</link>
      <pubDate>Wed, 18 Nov 2020 12:20:54 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-gradient/</guid>
      <description>线性渐变 开始位置 结束位置 开始结束点 颜色 LinearGradient( //渐变位置 begin: Alignment.topLeft, //左上 end: Alignment.bottomRight, //右下 stops: [0.0, 1.0], //[渐变起始点, 渐变结束点] //渐变颜色[始点颜色, 结束颜色] colors: [Color.fromRGBO(253, 1, 129, 1), Color.fromRGBO(206, 21, 240, 1)] )</description>
    </item>
    
    <item>
      <title>flutter基础知识</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-layout/</link>
      <pubDate>Tue, 17 Nov 2020 17:38:24 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-layout/</guid>
      <description>基本上由widget组成，widget有stateless和stateful两种，常用的基础widget有 - container：矩形元素，可以设置背景边框阴影 - row，column：让子控件水平和垂直布局，flex布局原理 - stack：可以堆砌widget，用上下左右来定位 - te</description>
    </item>
    
    <item>
      <title>mac android studio flutter 打包 apk</title>
      <link>https://geek.zshipu.com/post/unix/build-apk/</link>
      <pubDate>Mon, 16 Nov 2020 20:16:07 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/unix/build-apk/</guid>
      <description>Create a keystore keytool -genkey -v -keystore ~/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key /android文件夹下生成属性文件关联秘钥 key.properties storePassword=&amp;lt;password from previous step&amp;gt; keyPassword=&amp;lt;password from previous step&amp;gt; keyAlias=key storeFile=&amp;lt;location of the key store file, such as /Users/&amp;lt;user name&amp;gt;/key.jks&amp;gt; /android/app/build.gradle文件里增加load代码 def keystoreProperties = new Properties() def keystorePropertiesFile = rootProject.file(&#39;key.properties&#39;) if (keystorePropertiesFile.exists()) { keystoreProperties.load(new FileInputStream(keystorePropertiesFile)) } android { ... } 在buildTypes之前增加签名配置代码 signingConfigs { release { keyAlias keystoreProperties[&#39;keyAlias&#39;]</description>
    </item>
    
    <item>
      <title>寻找下一个数</title>
      <link>https://geek.zshipu.com/post/arithmetic/find-next-numnber/</link>
      <pubDate>Sun, 15 Nov 2020 23:03:38 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/arithmetic/find-next-numnber/</guid>
      <description>寻找下一个数字，例如输入345，输出354 &amp;gt;思路：从最右边位和上一位对比，如果大，就往前移，移动完，尾数排序，从大到小，保证次大 -代码 //字符串逆序 NSString *reverseStr(NSString *str){ NSMutableString *string=[[NSMutableString alloc] init]; for(int i=0;i&amp;lt;str.length;i++){ [string appendString:[str substringWithRange:NSMakeRange(str.length-1-i, 1)]]; } return string; } //字符串分成数组 NSMutableArray *separateStringToArray(NSString *str){ NSMutableArray *marr = [NSMutableArray array]; for (NSInteger i = 0; i &amp;lt; str.length; i++) { [marr addObject:[str substringWithRange:NSMakeRange(i, 1)]]; } return marr; } NSString *findNextLargerNum(NSString *oriNum){ NSMutableString *finalStr = [NSMutableString string]; NSMutableArray *marr =</description>
    </item>
    
    <item>
      <title>字典取值为空崩溃问题</title>
      <link>https://geek.zshipu.com/post/iOS/dic-nil/</link>
      <pubDate>Fri, 13 Nov 2020 10:24:39 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/iOS/dic-nil/</guid>
      <description>今天后台报错 [_NSPlaceholderData initWithBase64Encoding:]: nil string argument Foundation -[NSData(NSData) base64Encoding] 经过检查问题发生在字典取出值没有判空就传递给方法使用，细节也要注意，养成良好的编码习惯 NSString *urlstr = dic[@&amp;quot;imgBase64&amp;quot;]; NSData *data = [[NSData alloc] initWithBase64Encoding:urlstr]; 正确的代码 id obj = dic[@&amp;quot;imgBase64&amp;quot;]; if (obj &amp;amp;&amp;amp; [obj isKindOfClass:[NSString class]]) { NSString *urlstr = (NSString *)obj; NSData *data = [[NSData alloc] initWithBase64Encoding:urlstr]; }</description>
    </item>
    
    <item>
      <title>flutter和ffmpeg的资源</title>
      <link>https://geek.zshipu.com/post/flutter/fluter-source/</link>
      <pubDate>Thu, 12 Nov 2020 21:31:18 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/fluter-source/</guid>
      <description>咸鱼flutter技术文章集合：https://www.yuque.com/xytech/flutter 关于ffmpeg一位老师的博客：https://blog.csdn.net/leixiaohua1020 b站老师视频相关https://yinwenjie.blog.csdn.</description>
    </item>
    
    <item>
      <title>跑flutter工程的坑</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-points/</link>
      <pubDate>Thu, 12 Nov 2020 21:05:29 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-points/</guid>
      <description>下载过来，一定要把pod和workspace删掉重新安装，否则会出现奇奇怪怪的问题，比如目标系统不对应，不适配arm64架构等： The iOS deployment target &amp;lsquo;IPHONEOS_DEPLOYMENT_TARGET&amp;rsquo; is set to 8.0 undefined symbols for architecture arm</description>
    </item>
    
    <item>
      <title>flutter pub get慢</title>
      <link>https://geek.zshipu.com/post/flutter/pub-get-is-slow/</link>
      <pubDate>Thu, 12 Nov 2020 19:30:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/pub-get-is-slow/</guid>
      <description>分析：从开发者仓库网站下载依赖比较慢，网络问题 解决： 更换数据源地址 export PUB_HOSTED_URL=https://pub.flutter-io.cn export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn 最后翻墙运行 参考：https://www.askmaclean.com/archives/flutter-pub-get-slow.html</description>
    </item>
    
    <item>
      <title>2020-11安装cocoapods问题</title>
      <link>https://geek.zshipu.com/post/iOS/cocoapods/</link>
      <pubDate>Thu, 12 Nov 2020 18:48:08 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/iOS/cocoapods/</guid>
      <description>今天安装pods发生无法下载问题， Unable to download data from XXX 切换了镜像源解决 查看镜像源 gem sources -l 删除淘宝镜像源 -r remove sudo gem sources -r https://ruby.taobao.org/ 添加新的镜像源 -a add sudo gem sources -a https://rubygems.org 安装 sudo gem install cocoapods 成功 Successfully installed cocoapods-1.10.0 Parsing documentation for cocoapods-1.10.0 Done installing documentation for cocoapods after 2 seconds 参考：https://blog.csdn.net/li_ph/article/details/438</description>
    </item>
    
    <item>
      <title>catalina系统的zsh配置</title>
      <link>https://geek.zshipu.com/post/unix/zsh/</link>
      <pubDate>Thu, 12 Nov 2020 18:13:26 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/unix/zsh/</guid>
      <description>catalina系统默认的终端是zsh，如果没有找到配置文件，需要自己创建 vim ~/.zshrc 保存运行使之生效 source $HOME/.zshrc 看一下是否成功 echo $PATH 参考：https://stackoverflow.com/questions/10574684/where-to-place-path-variable-asser</description>
    </item>
    
    <item>
      <title>static-lib</title>
      <link>https://geek.zshipu.com/post/iOS/static-lib/</link>
      <pubDate>Thu, 12 Nov 2020 12:35:48 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/iOS/static-lib/</guid>
      <description>static lib a unit of code linked at compile time,which does not change
Dynamic lib a unit of code and/or assets linked at runtime that may change only Apple is allowed to create dynamic libraries for iOS
Software Framework a compiled set of code that accomplished a task,hence,you can actually have a static framework or a dynamic framework,which are typically just the compiled versions of the above.
source：https://stackoverflow.com/questions/15331056/library-static-dynamic-or-framework-project-inside-another-project</description>
    </item>
    
    <item>
      <title>Go规范：Uber Go 语言编码规范</title>
      <link>https://geek.zshipu.com/post/go/Go%E8%A7%84%E8%8C%83Uber-Go-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Fri, 06 Nov 2020 21:20:59 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E8%A7%84%E8%8C%83Uber-Go-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description>[](#uber-goguide-的中文翻译)uber-go/guide 的中文翻译 [](#english)English [](#uber-go-语言编码规范)Uber Go 语言编码规范 Uber 是一家美国硅谷的科技公司，也是 Go 语言的早期 adopter。其开源了很多 golang 项目，诸如被 Gopher 圈熟知的 zap、jaeger 等。2018 年年末 Uber</description>
    </item>
    
    <item>
      <title>Go实战：Go语言实战笔记</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%AE%9E%E6%88%98Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 04 Nov 2020 21:20:40 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%AE%9E%E6%88%98Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</guid>
      <description>[](#go语言实战笔记)Go语言实战笔记 Go语言环境搭建详解 《Go语言实战》笔记(一) | Go包管理 《Go语言实战》笔记(二) Go开发工具 《Go语言实战》笔记(三) | Go Doc 文档 《Go语言实战》笔记(四) | Go 数组 《Go语言实战》笔记(五) | Go 切片 《Go语言实战》笔记(六) | Go Map 《Go</description>
    </item>
    
    <item>
      <title>程序员：读书系列推荐书一</title>
      <link>https://geek.zshipu.com/post/news/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%AF%BB%E4%B9%A6%E7%B3%BB%E5%88%97%E6%8E%A8%E8%8D%90%E4%B9%A6%E4%B8%80/</link>
      <pubDate>Sun, 01 Nov 2020 14:07:47 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/news/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%AF%BB%E4%B9%A6%E7%B3%BB%E5%88%97%E6%8E%A8%E8%8D%90%E4%B9%A6%E4%B8%80/</guid>
      <description>语言类 python源码剖析 这本书讲解了python2.5版本的cpython实现，大致分为3个部分，分别讲解了python中基本对象python虚拟机和python的runtime的实现和原理。个人感觉这本书可以帮助你理解python执行时候的行为，为什么代码会有这样的表现，比如</description>
    </item>
    
    <item>
      <title>Go汇总 2：最优秀的Go博客</title>
      <link>https://geek.zshipu.com/post/go/Go%E6%B1%87%E6%80%BB-2%E6%9C%80%E4%BC%98%E7%A7%80%E7%9A%84Go%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 01 Nov 2020 13:58:20 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E6%B1%87%E6%80%BB-2%E6%9C%80%E4%BC%98%E7%A7%80%E7%9A%84Go%E5%8D%9A%E5%AE%A2/</guid>
      <description>[](#go优秀博客)Go优秀博客 [](#周刊类)周刊类 [](#golang-weekly)Golang weekly Golang Weekly https://golangweekly.com/ https://golangweekly.com/issues/254 [](#go夜读)Go夜读 Go 每日阅读和 Go 夜读 &amp;gt; Daily Reading Go and Night Reading Go - Go source reading and offline technical or another articles or discussion on every night. https://github.com/developer-learning/reading-go Go 夜读 https://reading.developerlearning.cn/ Go夜读 at Bilibili https://space.bilibili.com/326749661 [](#个人类)个人类 [](#tony-bai)Tony Bai Tony Bai 一个程序员的心路历程 https://tonybai.com/ 理解Golang包导入 https://tonybai.com/2015/03/09/understanding-import-packages/ &amp;ldquo;实际测试</description>
    </item>
    
    <item>
      <title>Go汇总 1：最全面的go语言学习圣地</title>
      <link>https://geek.zshipu.com/post/go/Go%E6%B1%87%E6%80%BB-1%E6%9C%80%E5%85%A8%E9%9D%A2%E7%9A%84go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E5%9C%A3%E5%9C%B0/</link>
      <pubDate>Sun, 01 Nov 2020 13:57:03 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E6%B1%87%E6%80%BB-1%E6%9C%80%E5%85%A8%E9%9D%A2%E7%9A%84go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E5%9C%A3%E5%9C%B0/</guid>
      <description>[](#go-general)Go general 怎么学习 Golang？ https://www.zhihu.com/question/23486344 怎么学习 Golang？ - 知乎用户的回答 - 知乎 https://www.zhihu.com/question/23486344/answer/24785991 Project Euler https://projecteuler.net/ 怎么学习 Golang？ - cholerae的回答 - 知乎 https://www.zhihu.com/question/23486344/answer/130837179 The Go Programming Language https://golang.org/doc/ A Tour of Go https://tour.golang.org/welcome/ Go語言聖經（中文版） https://www.gitbook.com/book/wizardforcel/gopl-zh/details https://www.gitbook.com/@wizardforcel 系统学习GO，推荐几本靠谱的书? - 飞雪无情的回答 - 知乎 https://www.zhihu.com/question/30461290/answer/210414739 Go编程语言 https://go-zh.org/doc/ Go指南 https://tour.go-zh.org/welcome/ Go语言圣经 https://www.gitbook.com/book/yar999/gopl-zh/details 然后通</description>
    </item>
    
    <item>
      <title>Monorepo：Monorepo 是什么，为什么大家都在用</title>
      <link>https://geek.zshipu.com/post/framework/MonorepoMonorepo-%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%A7%E5%AE%B6%E9%83%BD%E5%9C%A8%E7%94%A8/</link>
      <pubDate>Sun, 01 Nov 2020 12:53:27 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/framework/MonorepoMonorepo-%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%A7%E5%AE%B6%E9%83%BD%E5%9C%A8%E7%94%A8/</guid>
      <description>Monorepo 是什么，为什么大家都在用？ Dan Luu 很早很早就写了篇文章，给大家介绍 monorepo 。在我之前那篇推荐 Buck / Bazel 的文章之后就想讲讲 monorepo，结果一直没来得及写。 Monorepo 的概念要和互联网公司里怎样训练新人上手一起讲。很多公司要花超过半个月的时间才能让新人开始动手干活，并不是内部系统要学的东西很多，只是</description>
    </item>
    
    <item>
      <title>Go基础系列：保持模块兼容</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BF%9D%E6%8C%81%E6%A8%A1%E5%9D%97%E5%85%BC%E5%AE%B9/</link>
      <pubDate>Sun, 01 Nov 2020 11:11:00 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BF%9D%E6%8C%81%E6%A8%A1%E5%9D%97%E5%85%BC%E5%AE%B9/</guid>
      <description>随着您添加新功能、更改行为和重新考虑模块公共表面的某些部分，模块将随着时间的推移而演变。如Go 模块：v2 和以后，对 v1+ 模块的中断更改必须作为主要版本颠簸的一部分（或采用新的模块路径）发生。 但是，发布新的主要版本对用户来说很难。他们必须找到新版本，学习新的 API，并更改他们的代码。有</description>
    </item>
    
    <item>
      <title>Go基础系列：Go模块v2 和 Beyond</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97Go%E6%A8%A1%E5%9D%97v2-%E5%92%8C-Beyond/</link>
      <pubDate>Sun, 01 Nov 2020 11:10:05 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97Go%E6%A8%A1%E5%9D%97v2-%E5%92%8C-Beyond/</guid>
      <description>随着成功的项目的成熟和新的要求被添加，过去的功能和设计决策可能会停止意义。开发人员可能希望通过删除已弃用函数、重命名类型或将复杂包拆分为可管理部分来整合他们学到的经验教训。这些类型的更改需要下游用户努力将代码迁移到新的 API，因此不应在不考虑收益大于成本的情况下进行这些更改。 对于</description>
    </item>
    
    <item>
      <title>Go基础系列：发布 Go 模块</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E5%8F%91%E5%B8%83-Go-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 01 Nov 2020 11:08:22 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E5%8F%91%E5%B8%83-Go-%E6%A8%A1%E5%9D%97/</guid>
      <description>请注意：这篇文章涵盖了开发，包括。如果你有兴趣，请参阅去模块：v2和Beyond。v1v2 这篇文章在示例中使用了 Gitmercurialbazaar，和其他人也得到支持。 项目设置 对于此帖子，您需要一个现有项目作为示例。因此，从&amp;rdquo;使用转到模块&amp;rdquo;文章末尾的文件</description>
    </item>
    
    <item>
      <title>Go基础系列：迁移转到模块</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E8%BF%81%E7%A7%BB%E8%BD%AC%E5%88%B0%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 01 Nov 2020 11:05:44 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E8%BF%81%E7%A7%BB%E8%BD%AC%E5%88%B0%E6%A8%A1%E5%9D%97/</guid>
      <description>Go 项目使用各种依赖项管理策略。dep和滑翔等供应商工具很受欢迎，但它们在行为上存在很大差异，而且并不总是很好地协同工作。某些项目将其整个 GOPATH 目录存储在单个 Git 存储库中。其他人只是依赖并期望在 GOPATH 中安装相当新版本的依赖项。go get Go 的模块系统在 Go 1.11 中引入，它提供了命令中内置的官方依赖管理解</description>
    </item>
    
    <item>
      <title>Go基础系列：使用 Go 模块</title>
      <link>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8-Go-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 01 Nov 2020 11:03:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Go%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8-Go-%E6%A8%A1%E5%9D%97/</guid>
      <description>Go 1.11 和 1.12 包括对模块的初步支持，Go 的新依赖项管理系统使依赖关系版本信息明确且更易于管理。本文介绍了开始使用模块所需的基本操作。 模块是存储在文件树中的 Go包的集合，其根目录有文件。该文件定义了模块的模块_路径_，这也是用于根目录的导入路径，以及其依赖项_要求_，这是成功生成所需的其</description>
    </item>
    
    <item>
      <title>NPM起步：将私有 NPM 包发布到 Nexus</title>
      <link>https://geek.zshipu.com/post/npm/NPM%E8%B5%B7%E6%AD%A5%E5%B0%86%E7%A7%81%E6%9C%89-NPM-%E5%8C%85%E5%8F%91%E5%B8%83%E5%88%B0-Nexus/</link>
      <pubDate>Fri, 30 Oct 2020 18:15:02 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/npm/NPM%E8%B5%B7%E6%AD%A5%E5%B0%86%E7%A7%81%E6%9C%89-NPM-%E5%8C%85%E5%8F%91%E5%B8%83%E5%88%B0-Nexus/</guid>
      <description>我们都在项目上工作，这让我们有机会构建可重用的组件。大多数时候，这些组件最终出现在项目的文件夹中。然后，此文件夹被复制粘贴到多个项目中，随着时间的推移，这成为更新的噩梦，因为我们不能轻易地拥有多个版本的组件，并且在多个分支上维护相同的代码库，因为版本是解决这个问题的一种棘手解决方</description>
    </item>
    
    <item>
      <title>Python基础：Python文件打开</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80/</link>
      <pubDate>Sun, 25 Oct 2020 20:23:38 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80/</guid>
      <description>Python文件打开 打开服务器上的文件 假设我们有以下文件，位于与 Python 相同的文件夹中： test. txt Hello! Welcome to demofile.txt This file is for testing purposes. Good Luck! 若要打开文件，请使用内置函数。open() 函数返回一个文件对象，该对象具有读取文件内容的方法：open()read() 例子 f = open(&amp;quot;demofile.txt&amp;quot;, &amp;quot;r&amp;quot;) print(f.read()) 如果文件位于其他位置，则必须指定文件路</description>
    </item>
    
    <item>
      <title>Python基础：Python文件操作</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 25 Oct 2020 20:09:11 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>Python文件操作 文件处理是任何 Web 应用程序的重要组成部分。 Python 具有多个用于创建、读取、更新和删除文件的函数。 文件处理 使用 Python 中的文件的关键功能是该函数。open() 函数采用两个参数;_文件名_和_模式_。open() 打开文件有四种不同的方法（模式）： &amp;ldquo;a&amp;rdquo;```- 追加 - 打开文件进行追加，如果文</description>
    </item>
    
    <item>
      <title>Python基础：Python字符串格式</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Sun, 25 Oct 2020 20:05:49 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F/</guid>
      <description>Python字符串格式 若要确保字符串将像预期的那样显示，我们可以使用 方法对结果进行格式设置。format() 字符串格式（） 该方法允许您格式化字符串的选定部分。format() 有时，有些文本部分您无法控制，可能它们来自数据库，或者用户输入？ 若要控制这些值，请添加文本中的占位符（卷曲</description>
    </item>
    
    <item>
      <title>Python基础：Python user input 接收</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-user-input-%E6%8E%A5%E6%94%B6/</link>
      <pubDate>Sun, 25 Oct 2020 20:04:39 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-user-input-%E6%8E%A5%E6%94%B6/</guid>
      <description>Python user input 接收 user_input Python 允许用户输入。 这意味着我们可以向用户请求输入。 在 Python 3.6 中，该方法与 Python 2.7 方法略有不同。 Python 3.6 使用该方法。input() Python 2.7 使用该方法。raw_input() 下面的示例要求使用用户名，当您输入用户名时，它会在屏幕上打印出来： Python 3.6 username = input(&amp;quot;Enter username:&amp;quot;) print(&amp;quot;Username is: &amp;quot; + username) Python 2.7 username = raw_input(&amp;quot;Enter username:&amp;quot;) print(&amp;quot;Username is: &amp;quot; + username) Python 在函</description>
    </item>
    
    <item>
      <title>Python基础：Python try except</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-try-except/</link>
      <pubDate>Sun, 25 Oct 2020 20:03:01 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-try-except/</guid>
      <description>Python try except 该块允许您测试代码块的错误。try 该块允许您处理错误。except 该块允许您执行代码，而不管 try- 和除块的结果如何。finally 异常处理 当发生错误或我们称之为异常时，Python 通常会停止并生成错误消息。 可以使用 语句处理这些异常：try 例子 块将生成异常，因为未定义：tryx try:</description>
    </item>
    
    <item>
      <title>Python基础：Python pip 包管理器</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-pip-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</link>
      <pubDate>Sun, 25 Oct 2020 19:49:50 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-pip-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</guid>
      <description>Python Pip 什么是 PIP？ PIP 是 Python 包的包管理器，或者如果您喜欢，也可以是模块。 注：如果您有 Python 版本 3.4 或更晚，则默认情况下包括 PIP。 什么是Package？ 包包含模块所需的所有文件。 模块是 Python 代码库，您可以在项目中包含。 检查 PIP 是否已安装 将命令行导航到 Python 的脚本目录的位置，然后键入以下内容： 例子 检查</description>
    </item>
    
    <item>
      <title>Python基础：Python Regx 正则表达式</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Regx-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-/</link>
      <pubDate>Sun, 25 Oct 2020 19:47:09 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Regx-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-/</guid>
      <description>Python RegEx RegEx 或正则表达式是组成搜索模式的字符序列。 RegEx 可用于检查字符串是否包含指定的搜索模式。 正则表达式模块 Python 有一个名为 的内置包，可用于使用正则表达式。re 导入模块：re import re Python 中的 RegEx 导入模块后，可以开始使用正则表达式：re 例子 搜索字符串以查看其是否以&amp;rdquo;The&amp;rdquo;开头</description>
    </item>
    
    <item>
      <title>Python基础：Python Json</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Json/</link>
      <pubDate>Sun, 25 Oct 2020 19:44:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Json/</guid>
      <description>Python Json JSON 是一种用于存储和交换数据的语法。 JSON 是文本，使用 JavaScript 对象表示法编写。 Python 中的 Json Python 有一个名为 的内置包，可用于处理 JSON 数据。json 例子 导入 json 模块： import json 解析 Json - 从 Json 转换为 Python 如果您有 JSON 字符串，可以使用 方法分析它。json.loads() 结果将是Python字典。 例子 从 JSON 转换为 Python</description>
    </item>
    
    <item>
      <title>Python基础：Python数学函数</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 25 Oct 2020 19:41:55 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/</guid>
      <description>Python数学函数 Python 有一组内置的数学函数，包括一个广泛的数学模块，允许您对数字执行数学任务。 内置数学函数 和 函数可用于查找可重复值中的最低值或最高值：min()max() 例子 x = min(5, 10, 25) y = max(5, 10, 25) print(x) print(y) 函数返回指定数字的绝对（正）值：abs() 例子 x = abs(-7.25) print(x) 函数将 x 的值返回到 y （x） 的</description>
    </item>
    
    <item>
      <title>Python基础：Python日期时间</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sun, 25 Oct 2020 19:39:52 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</guid>
      <description>Python日期时间 Python 日期 Python 中的日期不是它自己的数据类型，但我们可以导入名为的模块，以将日期用作日期对象。datetime 例子 导入日期时间模块并显示当前日期： import datetime x = datetime.datetime.now() print(x) 日期输出 当我们从上面的示例执行代码时，结果将是： 日期包含年、月、日、小时、分钟、秒和微秒。 &amp;lt;font _mstmutation=&amp;quot;1&amp;quot; _msthash=&amp;quot;104507&amp;quot; _msttex</description>
    </item>
    
    <item>
      <title>Python基础：Python 模块</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 25 Oct 2020 19:38:23 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E6%A8%A1%E5%9D%97/</guid>
      <description>Python 模块 什么是模块？ 将模块视为与代码库相同。 包含要在应用程序中包含的一组函数的文件。 创建模块 若要创建模块，只需将要保存的代码保存在文件扩展名的文件中：.py 例子 将此代码保存在名为mymodule.py def greeting(name): print(&amp;quot;Hello, &amp;quot; + name) ## 使用模块 &amp;lt;font _mstmutation=&amp;quot;1&amp;quot; _msthash=&amp;quot;104507&amp;quot; _msttexthash=&amp;quot;17282946</description>
    </item>
    
    <item>
      <title>Python基础：Python 作用域</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Sun, 25 Oct 2020 19:36:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>Python 作用域 变量仅从创建它的地区内部可用。这称为** 作用域**。 本地 作用域 在函数内创建的变量属于_该函数的_本地 作用域，只能在该函数内使用。 例子 在函数内创建的变量在函数内可用： def myfunc(): x = 300 print(x) myfunc() 函数内函数 如上例所述，该变量在函数之外不可用，但它可用于函数内的任何函数：x 例子 可以从函数中的</description>
    </item>
    
    <item>
      <title>Python基础：Python iterators</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-iterators/</link>
      <pubDate>Sun, 25 Oct 2020 19:33:42 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-iterators/</guid>
      <description>Python iterators Python iterators 活动器是包含可计数值数的对象。 遍历器是可遍历的对象，这意味着您可以遍历所有值。 从技术上讲，在 Python 中，一个数据器是实现引用器协议的对象，它由方法和 组成。__iter__()__next__() 可移动器与可移动 列表、元组、字典和集都是可重复的对象。它们是可重复_的容器_，您可以</description>
    </item>
    
    <item>
      <title>Python基础：Python继承</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sun, 25 Oct 2020 19:26:56 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E7%BB%A7%E6%89%BF/</guid>
      <description>Python继承 Python 继承 继承允许我们定义一个类，该类从另一个类继承所有方法和属性。 父类是从继承的类，也称为基类。 子类是从另一个类继承的类，也称为派生类。 创建父类 任何类都可以是父类，因此语法与创建任何其他类相同： 例子 创建名为 的 类，带 和 属性，以及方法：Personfirstnamela</description>
    </item>
    
    <item>
      <title>Python基础：Python类和对象</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 25 Oct 2020 19:25:18 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</guid>
      <description>Python类和对象 Python 类/对象 Python 是一种面向对象的编程语言。 Python 中的几乎所有内容都是一个对象，其属性和方法。 类就像对象构造函数，或用于创建对象的&amp;rdquo;蓝图&amp;rdquo;。 创建类 若要创建类，请使用 关键字 ：class 例子 创建名为 MyClass 的类，其属性名为 x： class MyClass: x = 5 创建对象 现在，我们可</description>
    </item>
    
    <item>
      <title>Python基础：Python 阵列</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E9%98%B5%E5%88%97/</link>
      <pubDate>Sun, 25 Oct 2020 19:08:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E9%98%B5%E5%88%97/</guid>
      <description>Python 阵列 注：Python 没有对数组的内置支持，但可以使用 Python列表。 阵 列 注：本页演示如何使用列表作为 ARRAYS，但是，要使用 Python 中的数组，您必须导入库，如NumPy 库。 数组用于在单个变量中存储多个值： 例子 创建包含车名的数组： cars = [&amp;quot;Ford&amp;quot;, &amp;quot;Volvo&amp;quot;, &amp;quot;BMW&amp;quot;] 什么是阵列？ 数组是一个特殊的变量，一次可以</description>
    </item>
    
    <item>
      <title>Python基础：Python 阵列</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E9%98%B5%E5%88%97_20201025191937-z7p701j.sy/</link>
      <pubDate>Sun, 25 Oct 2020 19:08:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E9%98%B5%E5%88%97_20201025191937-z7p701j.sy/</guid>
      <description>Python 阵列 注：Python 没有对数组的内置支持，但可以使用 Python列表。 阵 列 注：本页演示如何使用列表作为 ARRAYS，但是，要使用 Python 中的数组，您必须导入库，如NumPy 库。 数组用于在单个变量中存储多个值： 例子 创建包含车名的数组： cars = [&amp;quot;Ford&amp;quot;, &amp;quot;Volvo&amp;quot;, &amp;quot;BMW&amp;quot;] 什么是阵列？ 数组是一个特殊的变量，一次可以</description>
    </item>
    
    <item>
      <title>Python基础：Python Lambda</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Lambda/</link>
      <pubDate>Sun, 25 Oct 2020 18:56:31 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Lambda/</guid>
      <description>Python Lambda lambda 函数是一个小的匿名函数。 lambda 函数可以接受任何数量的参数，但只能有一个表达式。 语法 lambda arguments : expression 执行表达式并返回结果： 例子 向 参数 添加 10，并返回结果：a x = lambda a : a + 10 print(x(5)) Lambda 函数可以具有多数个参数： 例子 将参数与参数相乘并返回结果：a b x = lambda a, b : a * b print(x(5, 6)) 例子 总结参数 、和 并返回结果：a</description>
    </item>
    
    <item>
      <title>Python基础：Python Lambda</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Lambda_20201025191937-6f82fwz.sy/</link>
      <pubDate>Sun, 25 Oct 2020 18:56:31 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Lambda_20201025191937-6f82fwz.sy/</guid>
      <description>Python Lambda lambda 函数是一个小的匿名函数。 lambda 函数可以接受任何数量的参数，但只能有一个表达式。 语法 lambda arguments : expression 执行表达式并返回结果： 例子 向 参数 添加 10，并返回结果：a x = lambda a : a + 10 print(x(5)) Lambda 函数可以具有多数个参数： 例子 将参数与参数相乘并返回结果：a b x = lambda a, b : a * b print(x(5, 6)) 例子 总结参数 、和 并返回结果：a</description>
    </item>
    
    <item>
      <title>Python基础：Python函数</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 25 Oct 2020 18:53:55 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%87%BD%E6%95%B0/</guid>
      <description>Python函数 函数是仅在调用时运行的代码块。 您可以将数据（称为参数）传递到函数中。 因此，函数可以返回数据。 创建函数 在 Python 中，函数使用def 关键字定义： 例子 def my_function(): print(&amp;quot;Hello from a function&amp;quot;) 调用函数 若要调用函数，请使用函数名称后跟括号： 例子 def my_function(): print(&amp;quot;Hello from a function&amp;quot;) **my_function()** 参数 信息可以作为参数传递到函数中。 参数在函数名称之</description>
    </item>
    
    <item>
      <title>Python基础：Python函数</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%87%BD%E6%95%B0_20201025191937-m72qqkh.sy/</link>
      <pubDate>Sun, 25 Oct 2020 18:53:55 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%87%BD%E6%95%B0_20201025191937-m72qqkh.sy/</guid>
      <description>Python函数 函数是仅在调用时运行的代码块。 您可以将数据（称为参数）传递到函数中。 因此，函数可以返回数据。 创建函数 在 Python 中，函数使用def 关键字定义： 例子 def my_function(): print(&amp;quot;Hello from a function&amp;quot;) 调用函数 若要调用函数，请使用函数名称后跟括号： 例子 def my_function(): print(&amp;quot;Hello from a function&amp;quot;) **my_function()** 参数 信息可以作为参数传递到函数中。 参数在函数名称之</description>
    </item>
    
    <item>
      <title>Python基础：Python for 循环</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-for-%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 25 Oct 2020 18:51:51 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-for-%E5%BE%AA%E7%8E%AF/</guid>
      <description>Python for 循环 Python for 循环 for循环用于在序列（列表、元组、字典、集或字符串）上迭代。 这与其他编程语言中的 for关键字不同，它的工作方式更像其他面向对象的编程语言中的一个引用器方法。 使用for循环，我们可以执行一组语句，一次用于列表、元组、集等中的每一项。 例子 在水果列表中打印每个水果： fruits =</description>
    </item>
    
    <item>
      <title>Python基础：Python for 循环</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-for-%E5%BE%AA%E7%8E%AF_20201025191937-v7dsgtf.sy/</link>
      <pubDate>Sun, 25 Oct 2020 18:51:51 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-for-%E5%BE%AA%E7%8E%AF_20201025191937-v7dsgtf.sy/</guid>
      <description>Python for 循环 Python for 循环 for循环用于在序列（列表、元组、字典、集或字符串）上迭代。 这与其他编程语言中的 for关键字不同，它的工作方式更像其他面向对象的编程语言中的一个引用器方法。 使用for循环，我们可以执行一组语句，一次用于列表、元组、集等中的每一项。 例子 在水果列表中打印每个水果： fruits =</description>
    </item>
    
    <item>
      <title>Python基础：Python 循环</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 25 Oct 2020 18:50:04 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%BE%AA%E7%8E%AF/</guid>
      <description>Python 循环 Python 循环 Python 有两个基元循环命令： while loops for loops while 循环 使用while 循环，我们可以执行一组语句，只要条件为 true。 例子 打印 i 只要 i 小于 6： i = 1 while i &amp;lt; 6: print(i) i += 1 注意：请记住增加 i，否则循环将永远继续。 while 循环需要相关变量准备就绪，在此示例中，我们需要定义一个索引变量i，我们将其设置为 1</description>
    </item>
    
    <item>
      <title>Python基础：Python 循环</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%BE%AA%E7%8E%AF_20201025191937-umw8hbc.sy/</link>
      <pubDate>Sun, 25 Oct 2020 18:50:04 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%BE%AA%E7%8E%AF_20201025191937-umw8hbc.sy/</guid>
      <description>Python 循环 Python 循环 Python 有两个基元循环命令： while loops for loops while 循环 使用while 循环，我们可以执行一组语句，只要条件为 true。 例子 打印 i 只要 i 小于 6： i = 1 while i &amp;lt; 6: print(i) i += 1 注意：请记住增加 i，否则循环将永远继续。 while 循环需要相关变量准备就绪，在此示例中，我们需要定义一个索引变量i，我们将其设置为 1</description>
    </item>
    
    <item>
      <title>Python基础：Python If 语句</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-If-%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sun, 25 Oct 2020 18:48:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-If-%E8%AF%AD%E5%8F%A5/</guid>
      <description>Python If 语句 Python 条件和 If 语句 Python 支持数学中通常的逻辑条件： 等于： a = b 不等于： a ！ = b 小于： &amp;lt; b 小于或等于：&amp;lt;= b 大于：a &amp;gt; b 大于或等于：&amp;gt;= b 这些条件可以通过多种方式使用，最常见的是&amp;rdquo;if 语句&amp;rdquo;和循环。 使用 if 关键字编写&amp;rdquo;if语句&amp;rdqu</description>
    </item>
    
    <item>
      <title>Python基础：Python If 语句</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-If-%E8%AF%AD%E5%8F%A5_20201025191937-ohar3w0.sy/</link>
      <pubDate>Sun, 25 Oct 2020 18:48:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-If-%E8%AF%AD%E5%8F%A5_20201025191937-ohar3w0.sy/</guid>
      <description>Python If 语句 Python 条件和 If 语句 Python 支持数学中通常的逻辑条件： 等于： a = b 不等于： a ！ = b 小于： &amp;lt; b 小于或等于：&amp;lt;= b 大于：a &amp;gt; b 大于或等于：&amp;gt;= b 这些条件可以通过多种方式使用，最常见的是&amp;rdquo;if 语句&amp;rdquo;和循环。 使用 if 关键字编写&amp;rdquo;if语句&amp;rdqu</description>
    </item>
    
    <item>
      <title>Python基础：Python词典</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%AF%8D%E5%85%B8/</link>
      <pubDate>Sun, 25 Oct 2020 17:12:47 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%AF%8D%E5%85%B8/</guid>
      <description>Python词典 字典 字典是无序、可更改和索引的集合。在 Python 字典中，用大括号编写，它们具有键和值。 例子 创建和打印字典： thisdict = { &amp;quot;brand&amp;quot;: &amp;quot;Ford&amp;quot;, &amp;quot;model&amp;quot;: &amp;quot;Mustang&amp;quot;, &amp;quot;year&amp;quot;: 1964 } print(thisdict) 访问项目 您可以通过引用字典的键名称（方括号内）来访问字典的项： 例子 获取&amp;rdquo;模型&amp;rdquo;键的值： x = thisdict[&amp;quot;model&amp;quot;] 还有一种称为方法，该方法将为</description>
    </item>
    
    <item>
      <title>Python基础：Python词典</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%AF%8D%E5%85%B8_20201025191937-e8ryb6l.sy/</link>
      <pubDate>Sun, 25 Oct 2020 17:12:47 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%AF%8D%E5%85%B8_20201025191937-e8ryb6l.sy/</guid>
      <description>Python词典 字典 字典是无序、可更改和索引的集合。在 Python 字典中，用大括号编写，它们具有键和值。 例子 创建和打印字典： thisdict = { &amp;quot;brand&amp;quot;: &amp;quot;Ford&amp;quot;, &amp;quot;model&amp;quot;: &amp;quot;Mustang&amp;quot;, &amp;quot;year&amp;quot;: 1964 } print(thisdict) 访问项目 您可以通过引用字典的键名称（方括号内）来访问字典的项： 例子 获取&amp;rdquo;模型&amp;rdquo;键的值： x = thisdict[&amp;quot;model&amp;quot;] 还有一种称为方法，该方法将为</description>
    </item>
    
    <item>
      <title>Python基础：Python sets</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-sets/</link>
      <pubDate>Sun, 25 Oct 2020 17:10:41 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-sets/</guid>
      <description>Python sets 设置 sets是无序和未编制索引的 sets合。在 Python 中， sets用大括号编写。 例子 创建 sets： thisset = {&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;} print(thisset) 注： sets是无序的，因此您无法确定项目按什么顺序显示。 访问项目 不能通过引用索引或键来访问 sets合中的项。 但是，您可以使用 循环遍历 sets项，或使用 关键字询问 sets合中</description>
    </item>
    
    <item>
      <title>Python基础：Python sets</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-sets_20201025191937-u9sbpd0.sy/</link>
      <pubDate>Sun, 25 Oct 2020 17:10:41 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-sets_20201025191937-u9sbpd0.sy/</guid>
      <description>Python sets 设置 sets是无序和未编制索引的 sets合。在 Python 中， sets用大括号编写。 例子 创建 sets： thisset = {&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;} print(thisset) 注： sets是无序的，因此您无法确定项目按什么顺序显示。 访问项目 不能通过引用索引或键来访问 sets合中的项。 但是，您可以使用 循环遍历 sets项，或使用 关键字询问 sets合中</description>
    </item>
    
    <item>
      <title>Python基础：Python tuples</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-tuples/</link>
      <pubDate>Sun, 25 Oct 2020 16:31:24 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-tuples/</guid>
      <description>Python tuples tuples tuples组是有序且不可更改的集合。在 Python tuples对中，用圆形括号书写。 例子 创建tuples组： thistuple = (&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;) print(thistuple) 访问tuples组项目 您可以通过引用方括号内的索引号来访问tuples组项： 例子 打印tuples组中的第二个项目： thistuple = (&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;) print(thistuple[1]) 负索引 负索引表示从末尾开始，指最后一</description>
    </item>
    
    <item>
      <title>Python基础：Python tuples</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-tuples_20201025191937-mts7beo.sy/</link>
      <pubDate>Sun, 25 Oct 2020 16:31:24 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-tuples_20201025191937-mts7beo.sy/</guid>
      <description>Python tuples tuples tuples组是有序且不可更改的集合。在 Python tuples对中，用圆形括号书写。 例子 创建tuples组： thistuple = (&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;) print(thistuple) 访问tuples组项目 您可以通过引用方括号内的索引号来访问tuples组项： 例子 打印tuples组中的第二个项目： thistuple = (&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;) print(thistuple[1]) 负索引 负索引表示从末尾开始，指最后一</description>
    </item>
    
    <item>
      <title>Python基础：Python列表</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%88%97%E8%A1%A8/</link>
      <pubDate>Sun, 25 Oct 2020 16:28:55 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%88%97%E8%A1%A8/</guid>
      <description>Python列表 Python 集合（数组） Python 编程语言有四种集合数据类型： 列表是一个有序且可更改的集合。允许重复的成员。 元组是一个有序且不可更改的集合。允许重复的成员。 Set是无序和未编制索引的集合。没有重复的成员。 字典是无序、可更改和索引的集合。没有重复的成员。 选择集合类型时，了解该类型的属</description>
    </item>
    
    <item>
      <title>Python基础：Python列表</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%88%97%E8%A1%A8_20201025191937-bvfiirn.sy/</link>
      <pubDate>Sun, 25 Oct 2020 16:28:55 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%88%97%E8%A1%A8_20201025191937-bvfiirn.sy/</guid>
      <description>Python列表 Python 集合（数组） Python 编程语言有四种集合数据类型： 列表是一个有序且可更改的集合。允许重复的成员。 元组是一个有序且不可更改的集合。允许重复的成员。 Set是无序和未编制索引的集合。没有重复的成员。 字典是无序、可更改和索引的集合。没有重复的成员。 选择集合类型时，了解该类型的属</description>
    </item>
    
    <item>
      <title>Python基础：Python运算符</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sun, 25 Oct 2020 15:53:03 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>Python运算符 Python 运算符 运算符用于对变量和值执行操作。 Python 将运算符分为以下组： 算术运算符 分配运算符 比较运算符 逻辑运算符 标识运算符 会员运算符 位运算符 Python 算术运算符 算术运算符与数值一起使用，以执行常见的数学运算： | Operator | Name | Example | | + | Addition | x + y | | - | Subtraction | x - y | | * | Multiplication | x * y | | / |</description>
    </item>
    
    <item>
      <title>Python基础：Python运算符</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%BF%90%E7%AE%97%E7%AC%A6_20201025191937-ql8wcyv.sy/</link>
      <pubDate>Sun, 25 Oct 2020 15:53:03 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%BF%90%E7%AE%97%E7%AC%A6_20201025191937-ql8wcyv.sy/</guid>
      <description>Python运算符 Python 运算符 运算符用于对变量和值执行操作。 Python 将运算符分为以下组： 算术运算符 分配运算符 比较运算符 逻辑运算符 标识运算符 会员运算符 位运算符 Python 算术运算符 算术运算符与数值一起使用，以执行常见的数学运算： | Operator | Name | Example | | + | Addition | x + y | | - | Subtraction | x - y | | * | Multiplication | x * y | | / |</description>
    </item>
    
    <item>
      <title>Python基础：Python 布尔</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%B8%83%E5%B0%94/</link>
      <pubDate>Sun, 25 Oct 2020 14:44:34 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%B8%83%E5%B0%94/</guid>
      <description>Python 布尔 布尔表示两个值之一： 或 。TrueFalse 布尔值 在编程中，您经常需要知道表达式是 或 。TrueFalse 您可以计算 Python 中的任何表达式，并获取两个答案之一，或 。TrueFalse 比较两个值时，将计算表达式，Python 返回布尔答案： 例子 print(10 &amp;gt; 9) print(10 == 9) print(10 &amp;lt; 9) 在 if 语句中运行条件时，Py</description>
    </item>
    
    <item>
      <title>Python基础：Python 布尔</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%B8%83%E5%B0%94_20201025191937-tqcrvoq.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:44:34 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%B8%83%E5%B0%94_20201025191937-tqcrvoq.sy/</guid>
      <description>Python 布尔 布尔表示两个值之一： 或 。True``False 布尔值 在编程中，您经常需要知道表达式是 或 。True``False 您可以计算 Python 中的任何表达式，并获取两个答案之一，或 。True``False 比较两个值时，将计算表达式，Python 返回布尔答案： 例子 print(10 &amp;gt; 9) print(10 == 9) print(10 &amp;lt; 9) 在 if 语句中运行</description>
    </item>
    
    <item>
      <title>Python基础：Python字符串</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sun, 25 Oct 2020 14:42:57 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>Python字符串 字符串 python 中的字符串文本由单个引号或双引号包围。 &amp;ldquo;你好&amp;rdquo;和&amp;rsquo;你好&amp;rsquo;是一样的。 您可以使用 以下函数显示字符串文本：print() 例子 print(&amp;quot;Hello&amp;quot;) print(&#39;Hello&#39;) 将字符串分配给变量 将字符串分配给变量使用变量名称后跟一个等号和字符串完成： 例子 a = &amp;quot;Hello&amp;quot;</description>
    </item>
    
    <item>
      <title>Python基础：Python字符串</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2_20201025191937-gjvueo0.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:42:57 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%AD%97%E7%AC%A6%E4%B8%B2_20201025191937-gjvueo0.sy/</guid>
      <description>Python字符串 字符串 python 中的字符串文本由单个引号或双引号包围。 &amp;ldquo;你好&amp;rdquo;和&amp;rsquo;你好&amp;rsquo;是一样的。 您可以使用 以下函数显示字符串文本：print() 例子 print(&amp;quot;Hello&amp;quot;) print(&#39;Hello&#39;) 将字符串分配给变量 将字符串分配给变量使用变量名称后跟一个等号和字符串完成： 例子 a = &amp;quot;Hello&amp;quot;</description>
    </item>
    
    <item>
      <title>Python基础：Python强转</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%BC%BA%E8%BD%AC/</link>
      <pubDate>Sun, 25 Oct 2020 14:39:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%BC%BA%E8%BD%AC/</guid>
      <description>Python强转 指定变量类型 有时可能需要为变量指定类型。这可以通过强转完成。Python 是一种面向对象的语言，因此它使用类来定义数据类型，包括其基元类型。 因此，使用构造函数在 python 中强制转换： int（） - 从整数文本、浮数字（通过向下舍入到上一个整数）或字符串文本（提供字符串表示整数）</description>
    </item>
    
    <item>
      <title>Python基础：Python强转</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%BC%BA%E8%BD%AC_20201025191937-jrevwbe.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:39:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%BC%BA%E8%BD%AC_20201025191937-jrevwbe.sy/</guid>
      <description>Python强转 指定变量类型 有时可能需要为变量指定类型。这可以通过强转完成。Python 是一种面向对象的语言，因此它使用类来定义数据类型，包括其基元类型。 因此，使用构造函数在 python 中强制转换： int（） - 从整数文本、浮数字（通过向下舍入到上一个整数）或字符串文本（提供字符串表示整数）</description>
    </item>
    
    <item>
      <title>Python基础：Python Numbers</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Numbers/</link>
      <pubDate>Sun, 25 Oct 2020 14:36:11 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Numbers/</guid>
      <description>Python Numbers Python Numbers Python 中有三种数字类型： * ```float``` * ```complex``` 向数值分配值时，将创建数值类型的变量： ### 例子 x = 1 # int y = 2.8 # float z = 1j # complex &amp;lt;font _mstmutation=&amp;quot;1&amp;quot; _msthash=&amp;quot;103727&amp;quot; _msttexthash=&amp;quot;185478917&amp;quot;&amp;gt;若要验证 Python 中任何对象的类型，请使用 以下函数：&amp;lt;/font&amp;gt;```type()</description>
    </item>
    
    <item>
      <title>Python基础：Python Numbers</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Numbers_20201025191937-6ky7br1.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:36:11 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-Numbers_20201025191937-6ky7br1.sy/</guid>
      <description>Python Numbers Python Numbers Python 中有三种数字类型： int float complex 向数值分配值时，将创建数值类型的变量： 例子 x = 1 # int y = 2.8 # float z = 1j # complex 若要验证 Python 中任何对象的类型，请使用 以下函数：type() 例子 print(type(x)) print(type(y)) print(type(z)) Int int 或整数是长度无限的整数，正数或负数。没有小数。 例子 整数： x = 1 y = 35656222554887711 z = -3255522 print(type(x)) print(type(y)) print(type(z)) Float 浮动或&amp;rdquo;浮</description>
    </item>
    
    <item>
      <title>Python基础：Python数据类型</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 25 Oct 2020 14:34:10 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Python数据类型 内置数据类型 在编程中，数据类型是一个重要的概念。 变量可以存储不同类型的数据，不同类型的变量可以处理不同的事情。 默认情况下，Python 具有以下内置的数据类型，这些类别： | 文本类型： | str | | 数字类型： | int, ,floatcomplex | | 序列类型： | list, ,tuplerange | | 映射类型： | dict | | 设置类型： | set,frozenset</description>
    </item>
    
    <item>
      <title>Python基础：Python数据类型</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_20201025191937-xyavg30.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:34:10 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_20201025191937-xyavg30.sy/</guid>
      <description>Python数据类型 内置数据类型 在编程中，数据类型是一个重要的概念。 变量可以存储不同类型的数据，不同类型的变量可以处理不同的事情。 默认情况下，Python 具有以下内置的数据类型，这些类别： | 文本类型： | str | | 数字类型： | int, ,floatcomplex`` | | 序列类型： | ``list``&amp;lt;font _mstmutation=&amp;quot;1&amp;quot; _msthash=&amp;quot;752700&amp;quot; _msttexthash=&amp;quot;8580&amp;quot;&amp;gt;, ,&amp;lt;/font&amp;gt;``tuplerange | | 映射类型： | dict | | 设置类型</description>
    </item>
    
    <item>
      <title>Python基础：Python变量</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%8F%98%E9%87%8F/</link>
      <pubDate>Sun, 25 Oct 2020 14:32:32 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%8F%98%E9%87%8F/</guid>
      <description>Python变量 创建变量 变量是用于存储数据值的容器。 与其他编程语言不同，Python 没有声明变量的命令。 变量在您首次为其分配值时创建。 例子 x = 5 y = &amp;quot;John&amp;quot; print(x) print(y) 变量不需要用任何特定类型声明_，_甚至可以在设置后更改类型。 例子 x = 4 # x is of type int x = &amp;quot;Sally&amp;quot; # x is now of type str print(x) 可以使用单引号或双引号</description>
    </item>
    
    <item>
      <title>Python基础：Python变量</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%8F%98%E9%87%8F_20201025191937-xec8pf1.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:32:32 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E5%8F%98%E9%87%8F_20201025191937-xec8pf1.sy/</guid>
      <description>Python变量 创建变量 变量是用于存储数据值的容器。 与其他编程语言不同，Python 没有声明变量的命令。 变量在您首次为其分配值时创建。 例子 x = 5 y = &amp;quot;John&amp;quot; print(x) print(y) 变量不需要用任何特定类型声明_，_甚至可以在设置后更改类型。 例子 x = 4 # x is of type int x = &amp;quot;Sally&amp;quot; # x is now of type str print(x) 可以使用单引号或双引号</description>
    </item>
    
    <item>
      <title>Python基础：Python注释</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Sun, 25 Oct 2020 14:29:22 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%B3%A8%E9%87%8A/</guid>
      <description>Python注释 注释可用于解释 Python 代码。 注释可用于使代码更具可读性。 注释可用于在测试代码时阻止执行。 创建注释 注释以 开头，Python 将忽略它们：# 例子 #This is a comment print(&amp;quot;Hello, World!&amp;quot;) 注释可以放在行的末尾，Python 将忽略行的其余部分： 例子 print(&amp;quot;Hello, World!&amp;quot;) #This is a comment 注释不必是文本来解释代码，它也可以用来防止 Python 执行代</description>
    </item>
    
    <item>
      <title>Python基础：Python注释</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%B3%A8%E9%87%8A_20201025191937-jektmye.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:29:22 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E6%B3%A8%E9%87%8A_20201025191937-jektmye.sy/</guid>
      <description>Python注释 注释可用于解释 Python 代码。 注释可用于使代码更具可读性。 注释可用于在测试代码时阻止执行。 创建注释 注释以 开头，Python 将忽略它们：# 例子 #This is a comment print(&amp;quot;Hello, World!&amp;quot;) 注释可以放在行的末尾，Python 将忽略行的其余部分： 例子 print(&amp;quot;Hello, World!&amp;quot;) #This is a comment 注释不必是文本来解释代码，它也可以用来防止 Python 执行代</description>
    </item>
    
    <item>
      <title>Python基础：Python语法</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 25 Oct 2020 14:27:46 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%AF%AD%E6%B3%95/</guid>
      <description>Python语法 执行 Python 语法 Python 缩进 Python 变量 Python 注释 练习 执行 Python 语法 正如我们在上一页中学到的，Python 语法可以通过直接在命令行中写入来执行： &amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Hello, World!&amp;quot;) Hello, World! 或者，在服务器上创建 python 文件，使用 .py 文件扩展名，并在命令行中运行该文件： C:\Users\_Your Name_&amp;gt;python myfile.py Python 缩进 缩进是指代码行开头的空格。 在其他编程语言中，代码中的缩</description>
    </item>
    
    <item>
      <title>Python基础：Python语法</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%AF%AD%E6%B3%95_20201025191937-jwjl0s6.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:27:46 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python%E8%AF%AD%E6%B3%95_20201025191937-jwjl0s6.sy/</guid>
      <description>Python语法 执行 Python 语法 Python 缩进 Python 变量 Python 注释 练习 执行 Python 语法 正如我们在上一页中学到的，Python 语法可以通过直接在命令行中写入来执行： &amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Hello, World!&amp;quot;) Hello, World! 或者，在服务器上创建 python 文件，使用 .py 文件扩展名，并在命令行中运行该文件： C:\Users\_Your Name_&amp;gt;python myfile.py Python 缩进 缩进是指代码行开头的空格。 在其他编程语言中，代码中的缩</description>
    </item>
    
    <item>
      <title>Python基础：Python 入门</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 25 Oct 2020 14:25:39 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%85%A5%E9%97%A8/</guid>
      <description>Python 入门 Python 安装 许多 PC 和 Mac 将安装 python。 要检查是否安装了 Python 在 Windows PC 上，请在开始栏中搜索 Python 或在命令行 （cmd.exe） 上运行以下内容： C:\Users\_Your Name_&amp;gt;python --version 要检查您是否在 Linux 或 Mac 上安装了 python，然后在 linux 上打开命令行或在 Mac 上打开终端并键入： python --version 如果您发现您的计算机上没有安装 python，那么您可</description>
    </item>
    
    <item>
      <title>Python基础：Python 入门</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%85%A5%E9%97%A8_20201025191937-h0sqbmg.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:25:39 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E5%85%A5%E9%97%A8_20201025191937-h0sqbmg.sy/</guid>
      <description>Python 入门 Python 安装 许多 PC 和 Mac 将安装 python。 要检查是否安装了 Python 在 Windows PC 上，请在开始栏中搜索 Python 或在命令行 （cmd.exe） 上运行以下内容： C:\Users\_Your Name_&amp;gt;python --version 要检查您是否在 Linux 或 Mac 上安装了 python，然后在 linux 上打开命令行或在 Mac 上打开终端并键入： python --version 如果您发现您的计算机上没有安装 python，那么您可</description>
    </item>
    
    <item>
      <title>Python基础：Python 语法</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 25 Oct 2020 14:02:27 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E8%AF%AD%E6%B3%95/</guid>
      <description>[](#python-syntax)Python 语法 与其他编程语言相比，Python 语法 Python 旨在实现可读性，与受数学影响的英语有一些相似之处。 Python 使用新行来完成命令，而不是经常使用分号或括号的其他编程语言。 Python 依靠缩进，使用空格来定义范围;例如循环、函数和类的范围。其他编程语言通常使用大括号来用于此目的。 [](#python-indentations)Python 缩进 在其他编程语言中，代</description>
    </item>
    
    <item>
      <title>Python基础：Python 语法</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E8%AF%AD%E6%B3%95_20201025191937-cmx7x8c.sy/</link>
      <pubDate>Sun, 25 Oct 2020 14:02:27 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80Python-%E8%AF%AD%E6%B3%95_20201025191937-cmx7x8c.sy/</guid>
      <description>[](#python-syntax)Python 语法 与其他编程语言相比，Python 语法 Python 旨在实现可读性，与受数学影响的英语有一些相似之处。 Python 使用新行来完成命令，而不是经常使用分号或括号的其他编程语言。 Python 依靠缩进，使用空格来定义范围;例如循环、函数和类的范围。其他编程语言通常使用大括号来用于此目的。 [](#python-indentations)Python 缩进 在其他编程语言中，代</description>
    </item>
    
    <item>
      <title>Python基础：什么是 Python</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80%E4%BB%80%E4%B9%88%E6%98%AF-Python/</link>
      <pubDate>Sun, 25 Oct 2020 13:50:05 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80%E4%BB%80%E4%B9%88%E6%98%AF-Python/</guid>
      <description>[](#what-is-python)什么是 Python Python 是一种流行的编程语言。它由吉多·范·罗森于1991年创建。 Python 是一种易于学习、功能强大的编程语言。它有高效的高级数据结构，以及一种简单而有效的面向对象的编程方法。Python 优雅的语法和动态类型，加上其解释性，使其成为大多数平台上许多</description>
    </item>
    
    <item>
      <title>Python基础：什么是 Python</title>
      <link>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80%E4%BB%80%E4%B9%88%E6%98%AF-Python_20201025191937-0lc4hvr.sy/</link>
      <pubDate>Sun, 25 Oct 2020 13:50:05 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/python/Python%E5%9F%BA%E7%A1%80%E4%BB%80%E4%B9%88%E6%98%AF-Python_20201025191937-0lc4hvr.sy/</guid>
      <description>[](#what-is-python)什么是 Python Python 是一种流行的编程语言。它由吉多·范·罗森于1991年创建。 Python 是一种易于学习、功能强大的编程语言。它有高效的高级数据结构，以及一种简单而有效的面向对象的编程方法。Python 优雅的语法和动态类型，加上其解释性，使其成为大多数平台上许多</description>
    </item>
    
    <item>
      <title>机器学习：交互式机器学习体验</title>
      <link>https://geek.zshipu.com/post/machinelearning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Sun, 25 Oct 2020 13:39:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/machinelearning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BD%93%E9%AA%8C/</guid>
      <description>我已经在 GitHub 上🤖了新的交互式机器学习实验项目。 虽然模型可能有点笨（记住，这些只是实验，而不是生产就绪的代码），他们会尽力： 🖌识别在浏览器中绘制的数字或草图 📸检测和识别要显示给相机的对象 🌅对上传的图像进行分类 📝一起写一首莎士比亚诗 ✊🖐✌️玩你在摇滚纸剪刀游戏 等。 我已经训练了_Pyth</description>
    </item>
    
    <item>
      <title>机器学习：交互式机器学习体验</title>
      <link>https://geek.zshipu.com/post/machinelearning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BD%93%E9%AA%8C_20201025191937-y0itvel.sy/</link>
      <pubDate>Sun, 25 Oct 2020 13:39:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/machinelearning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BD%93%E9%AA%8C_20201025191937-y0itvel.sy/</guid>
      <description>我已经在 GitHub 上🤖了新的交互式机器学习实验项目。 虽然模型可能有点笨（记住，这些只是实验，而不是生产就绪的代码），他们会尽力： 🖌识别在浏览器中绘制的数字或草图 📸检测和识别要显示给相机的对象 🌅对上传的图像进行分类 📝一起写一首莎士比亚诗 ✊🖐✌️玩你在摇滚纸剪刀游戏 等。 我已经训练了_Pyth</description>
    </item>
    
    <item>
      <title>JavaScript基础：为初学者学习 JavaScript 中的数据结构</title>
      <link>https://geek.zshipu.com/post/java/JavaScript%E5%9F%BA%E7%A1%80%E4%B8%BA%E5%88%9D%E5%AD%A6%E8%80%85%E5%AD%A6%E4%B9%A0-JavaScript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 25 Oct 2020 13:32:14 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/JavaScript%E5%9F%BA%E7%A1%80%E4%B8%BA%E5%88%9D%E5%AD%A6%E8%80%85%E5%AD%A6%E4%B9%A0-JavaScript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>介绍 它是 JavaScript 中学习数据结构的注释。我研究了长途跋涉的Github 存储库的源代码表单。对于JavaScript开发人员和初学者来说，这是一个很好的材料来学习数据结构。 除了Trekhleb的 Github， 我还提到《离开： 乌迪米编程和编码采访》和哈克兰克的视频。本课程使用 Java 实现和解释数据</description>
    </item>
    
    <item>
      <title>JavaScript基础：为初学者学习 JavaScript 中的数据结构</title>
      <link>https://geek.zshipu.com/post/java/JavaScript%E5%9F%BA%E7%A1%80%E4%B8%BA%E5%88%9D%E5%AD%A6%E8%80%85%E5%AD%A6%E4%B9%A0-JavaScript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_20201025191937-l9rec6e.sy/</link>
      <pubDate>Sun, 25 Oct 2020 13:32:14 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/JavaScript%E5%9F%BA%E7%A1%80%E4%B8%BA%E5%88%9D%E5%AD%A6%E8%80%85%E5%AD%A6%E4%B9%A0-JavaScript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_20201025191937-l9rec6e.sy/</guid>
      <description>介绍 它是 JavaScript 中学习数据结构的注释。我研究了长途跋涉的Github 存储库的源代码表单。对于JavaScript开发人员和初学者来说，这是一个很好的材料来学习数据结构。 除了Trekhleb的 Github， 我还提到《离开： 乌迪米编程和编码采访》和哈克兰克的视频。本课程使用 Java 实现和解释数据</description>
    </item>
    
    <item>
      <title>MySql Text 类型大小</title>
      <link>https://geek.zshipu.com/post/mysql/MySql-Text-%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Wed, 21 Oct 2020 20:38:39 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/mysql/MySql-Text-%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F/</guid>
      <description>| TINYTEXT | 256 bytes | | | TEXT | 65,535 bytes | ~64kb | | MEDIUMTEXT | 16,777,215 bytes | ~16MB | | LONGTEXT | 4,294,967,295 bytes | ~4GB |</description>
    </item>
    
    <item>
      <title>MySql Text 类型大小</title>
      <link>https://geek.zshipu.com/post/mysql/MySql-Text-%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F_20201025191937-k26ptu2.sy/</link>
      <pubDate>Wed, 21 Oct 2020 20:38:39 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/mysql/MySql-Text-%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F_20201025191937-k26ptu2.sy/</guid>
      <description>| TINYTEXT | 256 bytes | | | TEXT | 65,535 bytes | ~64kb | | MEDIUMTEXT | 16,777,215 bytes | ~16MB | | LONGTEXT | 4,294,967,295 bytes | ~4GB |</description>
    </item>
    
    <item>
      <title>Java编程：你需要学习多少Java才能找到第一份工作？</title>
      <link>https://geek.zshipu.com/post/java/Java%E7%BC%96%E7%A8%8B%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%B0%91Java%E6%89%8D%E8%83%BD%E6%89%BE%E5%88%B0%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Mon, 19 Oct 2020 22:20:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/Java%E7%BC%96%E7%A8%8B%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%B0%91Java%E6%89%8D%E8%83%BD%E6%89%BE%E5%88%B0%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C/</guid>
      <description>潜在的 Java 低年级学生需要了解什么才能获得第一份工作，甚至有资格获得好公司的实习生职位？哪些工具可以帮助Java程序员达到一个新的水平？您应该学习哪些技术，哪些技术最好推迟？ 这些问题没有标准答案，就像没有一个行动计划绝对适合每个人一样。一些公司正在争取开发，不断引进新技术，测试新版本</description>
    </item>
    
    <item>
      <title>Java编程：你需要学习多少Java才能找到第一份工作？</title>
      <link>https://geek.zshipu.com/post/java/Java%E7%BC%96%E7%A8%8B%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%B0%91Java%E6%89%8D%E8%83%BD%E6%89%BE%E5%88%B0%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C_20201025191937-up9f0ek.sy/</link>
      <pubDate>Mon, 19 Oct 2020 22:20:45 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/Java%E7%BC%96%E7%A8%8B%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E5%A4%9A%E5%B0%91Java%E6%89%8D%E8%83%BD%E6%89%BE%E5%88%B0%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C_20201025191937-up9f0ek.sy/</guid>
      <description>潜在的 Java 低年级学生需要了解什么才能获得第一份工作，甚至有资格获得好公司的实习生职位？哪些工具可以帮助Java程序员达到一个新的水平？您应该学习哪些技术，哪些技术最好推迟？ 这些问题没有标准答案，就像没有一个行动计划绝对适合每个人一样。一些公司正在争取开发，不断引进新技术，测试新版本</description>
    </item>
    
    <item>
      <title>高效的DevOps：2021 年要关注的关键 DevOps 原则</title>
      <link>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps2021-%E5%B9%B4%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%85%B3%E9%94%AE-DevOps-%E5%8E%9F%E5%88%99/</link>
      <pubDate>Tue, 13 Oct 2020 22:53:56 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps2021-%E5%B9%B4%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%85%B3%E9%94%AE-DevOps-%E5%8E%9F%E5%88%99/</guid>
      <description>2021 年 8个开发原则 变革需要创新，创新需要进步。这是经过考验的方法，也是构建成功组织的关键。软件行业一次又一次地受到一波挑战性需求的打击，要求达到市场标准。为了跟上不断变化的趋势，组织开始采用新的流程。其中一种方法就是 DevOps。 什么是 DevOps？ DevOps 背后的主要理念是将两个松散连接</description>
    </item>
    
    <item>
      <title>高效的DevOps：2021 年要关注的关键 DevOps 原则</title>
      <link>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps2021-%E5%B9%B4%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%85%B3%E9%94%AE-DevOps-%E5%8E%9F%E5%88%99_20201025191937-h39z8na.sy/</link>
      <pubDate>Tue, 13 Oct 2020 22:53:56 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps2021-%E5%B9%B4%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%85%B3%E9%94%AE-DevOps-%E5%8E%9F%E5%88%99_20201025191937-h39z8na.sy/</guid>
      <description>2021 年 8个开发原则 变革需要创新，创新需要进步。这是经过考验的方法，也是构建成功组织的关键。软件行业一次又一次地受到一波挑战性需求的打击，要求达到市场标准。为了跟上不断变化的趋势，组织开始采用新的流程。其中一种方法就是 DevOps。 什么是 DevOps？ DevOps 背后的主要理念是将两个松散连接</description>
    </item>
    
    <item>
      <title>高效的DevOps：30 多个开源工具，用于构建 DevOps 安全性。第 1 部分</title>
      <link>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps30-%E5%A4%9A%E4%B8%AA%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA-DevOps-%E5%AE%89%E5%85%A8%E6%80%A7%E7%AC%AC-1-%E9%83%A8%E5%88%86/</link>
      <pubDate>Tue, 13 Oct 2020 22:50:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps30-%E5%A4%9A%E4%B8%AA%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA-DevOps-%E5%AE%89%E5%85%A8%E6%80%A7%E7%AC%AC-1-%E9%83%A8%E5%88%86/</guid>
      <description>新的安全工具没有时间成为快速增长的实践集的一部分，这使我想将某个检查点设置为工具列表。 实践意味着一组措施可以内置到 SDLC/DevOps 的阶段之一（威胁建模、SAST、DAST、SCA、Docker 图像扫描、Kubernetes 扫描、AWS 审核等）。 1.威胁建模 因此，安全开发生命周期环境中的威胁建模</description>
    </item>
    
    <item>
      <title>高效的DevOps：30 多个开源工具，用于构建 DevOps 安全性。第 1 部分</title>
      <link>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps30-%E5%A4%9A%E4%B8%AA%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA-DevOps-%E5%AE%89%E5%85%A8%E6%80%A7%E7%AC%AC-1-%E9%83%A8%E5%88%86_20201025191937-za4nsls.sy/</link>
      <pubDate>Tue, 13 Oct 2020 22:50:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps30-%E5%A4%9A%E4%B8%AA%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA-DevOps-%E5%AE%89%E5%85%A8%E6%80%A7%E7%AC%AC-1-%E9%83%A8%E5%88%86_20201025191937-za4nsls.sy/</guid>
      <description>新的安全工具没有时间成为快速增长的实践集的一部分，这使我想将某个检查点设置为工具列表。 实践意味着一组措施可以内置到 SDLC/DevOps 的阶段之一（威胁建模、SAST、DAST、SCA、Docker 图像扫描、Kubernetes 扫描、AWS 审核等）。 ![Image for post](https://miro.medium.com/max/3960/0*RPwsDSA6nOOOkcn3.png) 1.威胁建模 因此，安全开发生命周期环境中的威</description>
    </item>
    
    <item>
      <title>高效的DevOps：业务开发操作的三种方式框架方法</title>
      <link>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A1%86%E6%9E%B6%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 13 Oct 2020 22:45:38 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A1%86%E6%9E%B6%E6%96%B9%E6%B3%95/</guid>
      <description>在寻求公司以提高 IT 交付服务的敏捷性时，出现了一种名为 DevOps 的 IT 行业趋势。在这里，我们将探讨在 IT 业务中应用树方法框架方法。 什么是 DevOps？ 如前所述，DevOps 是 IT 行业旨在提高 IT 交付服务敏捷性的新趋势。此举强调透明通信、协作以及开发人员软件和 IT 运营之间的集成。 DevOps 认识到开发人员和 IT 操</description>
    </item>
    
    <item>
      <title>高效的DevOps：业务开发操作的三种方式框架方法</title>
      <link>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A1%86%E6%9E%B6%E6%96%B9%E6%B3%95_20201025191937-u7qj5tb.sy/</link>
      <pubDate>Tue, 13 Oct 2020 22:45:38 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/devops/%E9%AB%98%E6%95%88%E7%9A%84DevOps%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A1%86%E6%9E%B6%E6%96%B9%E6%B3%95_20201025191937-u7qj5tb.sy/</guid>
      <description>在寻求公司以提高 IT 交付服务的敏捷性时，出现了一种名为 DevOps 的 IT 行业趋势。在这里，我们将探讨在 IT 业务中应用树方法框架方法。 什么是 DevOps？ 如前所述，DevOps 是 IT 行业旨在提高 IT 交付服务敏捷性的新趋势。此举强调透明通信、协作以及开发人员软件和 IT 运营之间的集成。 DevOps 认识到开发人员和 IT 操</description>
    </item>
    
    <item>
      <title>Golang实践：使用 Go &#43; 第 2 部分创建 RESTful 服务</title>
      <link>https://geek.zshipu.com/post/go/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go-&#43;-%E7%AC%AC-2-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA-RESTful-%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 13 Oct 2020 22:35:06 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go-&#43;-%E7%AC%AC-2-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA-RESTful-%E6%9C%8D%E5%8A%A1/</guid>
      <description>什么是 RESTful 服务？ REST 是一种用于设计 Web 服务的体系结构方法。REST API 是围绕_资源_设计的，资源是客户端可以访问的任何类型的对象、数据或服务。资源具有标识符_，_它是唯一标识该资源的 URI。例如，特定客户订单的 URI 可能是： https://adventure-works.com/orders/1 客户端通过交换资源表示形式_与服务_交互。许多 Web API 使用 JSON（当</description>
    </item>
    
    <item>
      <title>Golang实践：使用 Go&#43; 第 1 部分创建微服务</title>
      <link>https://geek.zshipu.com/post/go/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go&#43;-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 13 Oct 2020 22:32:37 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Golang%E5%AE%9E%E8%B7%B5%E4%BD%BF%E7%94%A8-Go&#43;-%E7%AC%AC-1-%E9%83%A8%E5%88%86%E5%88%9B%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>来自JavaScript的背景，我一直想学习一种静态类型的编程语言，今年早些时候，我拿起Golang后，阅读了有关语言的评论，Golang得到了谷歌的支持。哦， 当然， 流行的 Devops 工具， 如码头， 库伯内特， Terraform， 是用Golang建造的。在通过 freecodecamp 从这个令人敬畏的教程中选取基础</description>
    </item>
    
    <item>
      <title>Golang实践：Golang的 3 个陷阱</title>
      <link>https://geek.zshipu.com/post/go/Golang%E5%AE%9E%E8%B7%B5Golang%E7%9A%84-3-%E4%B8%AA%E9%99%B7%E9%98%B1/</link>
      <pubDate>Tue, 13 Oct 2020 22:20:16 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Golang%E5%AE%9E%E8%B7%B5Golang%E7%9A%84-3-%E4%B8%AA%E9%99%B7%E9%98%B1/</guid>
      <description>在过去的一年里，我们一直在开发一个复杂的半实时生产系统。我们决定和Golang一起写。我们在 Go 中几乎没有经验，所以正如你想象的那样，这不是一件小事。 快进一年：该系统在生产中运行，并成为CllimaCell产品的主要支柱之一。 精通意味着你有足够的经验来知道你正在使用的平台的陷阱是什</description>
    </item>
    
    <item>
      <title>Golang基础：go语言中的循环</title>
      <link>https://geek.zshipu.com/post/go/Golang%E5%9F%BA%E7%A1%80go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 11 Oct 2020 21:56:25 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Golang%E5%9F%BA%E7%A1%80go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF/</guid>
      <description>循环允许您重复代码。有不同类型的循环，其中之一是 for 循环。对于Go（golang）中的循环，与 Python 更类似于 C/Java。在 Python 中，语法是 for i in range(1,10): 在 C/Java 中，语法为 for (i = 1; i &amp;lt;= 10; i++) { 但在Golang for i := 1; i &amp;lt;= 10; i++ { 因此，它受到这些语言的启发。 [](#for-loop-explained)For 循环解释 在上面的程序中，它是什么意思？ 首先变量</description>
    </item>
    
    <item>
      <title>Golang实战：细胞吞噬</title>
      <link>https://geek.zshipu.com/post/go/Golang%E5%AE%9E%E6%88%98%E7%BB%86%E8%83%9E%E5%90%9E%E5%99%AC/</link>
      <pubDate>Sun, 11 Oct 2020 21:50:17 +0800</pubDate>
      
      <guid>https://geek.zshipu.com/post/go/Golang%E5%AE%9E%E6%88%98%E7%BB%86%E8%83%9E%E5%90%9E%E5%99%AC/</guid>
      <description>细胞吞噬游戏是一_个细胞自动_机， 但这并没有意味着很多， 大多数人。想象一下，一个存在于两种状态的细胞网格：活着或死亡。您看到的&amp;rdquo;动画&amp;rdquo;实际上是连续几代呈现在屏幕上。有四个规则可以帮助决定下一代的状态。维基百科这样描述它们。 任何只有不到两个活邻居的活细胞死亡</description>
    </item>
    
    <item>
      <title>开发日常：nginx ip_hash 作用</title>
      <link>https://geek.zshipu.com/post/linux/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8nginx-ip_hash-%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Sat, 10 Oct 2020 17:41:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/linux/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8nginx-ip_hash-%E4%BD%9C%E7%94%A8/</guid>
      <description>_nginx_负载均衡策略:_ip_hash_、url_hash_xqhys的博客-CS&amp;hellip; 2018年8月18日 上述是一个极简的监听8081端口的的_nginx_服务,其中当请求url 为/Upload/upload时,会走_ip_hash_策略; upstream是_n</description>
    </item>
    
    <item>
      <title>开发日常：nginx ip_hash 作用</title>
      <link>https://geek.zshipu.com/post/linux/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8nginx-ip_hash-%E4%BD%9C%E7%94%A8_20201025191937-qkl1b8w.sy/</link>
      <pubDate>Sat, 10 Oct 2020 17:41:10 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/linux/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8nginx-ip_hash-%E4%BD%9C%E7%94%A8_20201025191937-qkl1b8w.sy/</guid>
      <description>_nginx_负载均衡策略:_ip_hash_、url_hash_xqhys的博客-CS&amp;hellip; 2018年8月18日 上述是一个极简的监听8081端口的的_nginx_服务,其中当请求url 为/Upload/upload时,会走_ip_hash_策略; upstream是_n</description>
    </item>
    
    <item>
      <title>掘金 2020年10月09日技术热点</title>
      <link>https://geek.zshipu.com/post/news/%E6%8E%98%E9%87%91-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E7%83%AD%E7%82%B9/</link>
      <pubDate>Fri, 09 Oct 2020 22:05:06 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/news/%E6%8E%98%E9%87%91-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E7%83%AD%E7%82%B9/</guid>
      <description>[原理02] 权限控制 1天内 掘金是一个帮助开发者成长的社区,是给开发者用的 Hacker News,给设计师用的 Designer News,和给产品经理用的 Medium。掘金的技术文章由稀土上聚集的技&amp;hellip; 面试题 | 链表相交 &amp;amp; 成环 1天内 掘金是一个帮助开发者成长的社区,是给开发者用的 Hacker News,给设计师用</description>
    </item>
    
    <item>
      <title>掘金 2020年10月09日技术热点</title>
      <link>https://geek.zshipu.com/post/news/%E6%8E%98%E9%87%91-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E7%83%AD%E7%82%B9_20201025191937-isvga8i.sy/</link>
      <pubDate>Fri, 09 Oct 2020 22:05:06 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/news/%E6%8E%98%E9%87%91-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E7%83%AD%E7%82%B9_20201025191937-isvga8i.sy/</guid>
      <description>[原理02] 权限控制 1天内 掘金是一个帮助开发者成长的社区,是给开发者用的 Hacker News,给设计师用的 Designer News,和给产品经理用的 Medium。掘金的技术文章由稀土上聚集的技&amp;hellip; 面试题 | 链表相交 &amp;amp; 成环 1天内 掘金是一个帮助开发者成长的社区,是给开发者用的 Hacker News,给设计师用</description>
    </item>
    
    <item>
      <title>CSDN 2020年10月09日热门技术点</title>
      <link>https://geek.zshipu.com/post/news/CSDN-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF%E7%82%B9/</link>
      <pubDate>Fri, 09 Oct 2020 22:04:21 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/news/CSDN-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF%E7%82%B9/</guid>
      <description>【Docker介绍及简单操作】_追梦的博客-CSDN博客 6小时前 一、Docker1、简介Docker 是一个开源的容器引擎,它基于 LXC 容器技术,使用 Go 语言开发源代码托管在 GitHub 上,并遵从 Apache2.0 协议Docker 采用 C/S架构,其&amp;hellip; 全球顶级开源大神们现身 COSCon&amp;rsquo;20-CSDN.NET 11小时前 业界最具影响力的</description>
    </item>
    
    <item>
      <title>CSDN 2020年10月09日热门技术点</title>
      <link>https://geek.zshipu.com/post/news/CSDN-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF%E7%82%B9_20201025191937-vrv2b68.sy/</link>
      <pubDate>Fri, 09 Oct 2020 22:04:21 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/news/CSDN-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF%E7%82%B9_20201025191937-vrv2b68.sy/</guid>
      <description>【Docker介绍及简单操作】_追梦的博客-CSDN博客 6小时前 一、Docker1、简介Docker 是一个开源的容器引擎,它基于 LXC 容器技术,使用 Go 语言开发源代码托管在 GitHub 上,并遵从 Apache2.0 协议Docker 采用 C/S架构,其&amp;hellip; 全球顶级开源大神们现身 COSCon&amp;rsquo;20-CSDN.NET 11小时前 业界最具影响力的</description>
    </item>
    
    <item>
      <title>开源中国 2020年10月09日技术要点</title>
      <link>https://geek.zshipu.com/post/news/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9/</link>
      <pubDate>Fri, 09 Oct 2020 22:01:48 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/news/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9/</guid>
      <description>QSettings 自定义格式 - OSCHINA 5小时前 转自:http://hi.baidu.com/cyclone/blog/item/1bcb5edfed60d20348540320.html 早就注意到 QSettings 提供了自定义配置文件格式的功能,却一直没怎么看&amp;hellip; PHP 开源工作流引擎 Tpflow V3.2 正式版发布 - OSCHIN&amp;hellip; 1天内 PHP</description>
    </item>
    
    <item>
      <title>开源中国 2020年10月09日技术要点</title>
      <link>https://geek.zshipu.com/post/news/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9_20201025191937-2c9ptao.sy/</link>
      <pubDate>Fri, 09 Oct 2020 22:01:48 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/news/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9_20201025191937-2c9ptao.sy/</guid>
      <description>QSettings 自定义格式 - OSCHINA 5小时前 转自:http://hi.baidu.com/cyclone/blog/item/1bcb5edfed60d20348540320.html 早就注意到 QSettings 提供了自定义配置文件格式的功能,却一直没怎么看&amp;hellip; PHP 开源工作流引擎 Tpflow V3.2 正式版发布 - OSCHIN&amp;hellip; 1天内 PHP</description>
    </item>
    
    <item>
      <title>思否 2020年10月09日技术要点</title>
      <link>https://geek.zshipu.com/post/news/%E6%80%9D%E5%90%A6-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9/</link>
      <pubDate>Fri, 09 Oct 2020 22:00:27 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/news/%E6%80%9D%E5%90%A6-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9/</guid>
      <description>JavaScript计时器:你需要了解的所有内容_疯狂的技术宅&amp;hellip; 6小时前 作者:Samer Buna翻译:疯狂的技术宅原文:[链接]未经允许严禁转载先从一个面试题开始:JavaScript 面试题:setTimeout 和 setInterval 的源代码是在哪里实现的? (不&amp;hellip; 台达P</description>
    </item>
    
    <item>
      <title>思否 2020年10月09日技术要点</title>
      <link>https://geek.zshipu.com/post/news/%E6%80%9D%E5%90%A6-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9_20201025191937-2euokft.sy/</link>
      <pubDate>Fri, 09 Oct 2020 22:00:27 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/news/%E6%80%9D%E5%90%A6-2020%E5%B9%B410%E6%9C%8809%E6%97%A5%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9_20201025191937-2euokft.sy/</guid>
      <description>JavaScript计时器:你需要了解的所有内容_疯狂的技术宅&amp;hellip; 6小时前 作者:Samer Buna翻译:疯狂的技术宅原文:[链接]未经允许严禁转载先从一个面试题开始:JavaScript 面试题:setTimeout 和 setInterval 的源代码是在哪里实现的? (不&amp;hellip; 台达P</description>
    </item>
    
    <item>
      <title>Java 线程 热点文章 2020年10月09日</title>
      <link>https://geek.zshipu.com/post/java/Java-%E7%BA%BF%E7%A8%8B-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A0-2020%E5%B9%B410%E6%9C%8809%E6%97%A5/</link>
      <pubDate>Fri, 09 Oct 2020 21:58:33 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/Java-%E7%BA%BF%E7%A8%8B-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A0-2020%E5%B9%B410%E6%9C%8809%E6%97%A5/</guid>
      <description>_Java_多_线程__yucan1234的博客-CSDN博客 11小时前 1.在第二种方法(Runnable)中,ticket输出的顺序并不是54321,这是因为_线程_执行的时机难以预测,ticket–并不是原子操作。 2.在第一种方法中,我们new了3个Thread对&amp;helli</description>
    </item>
    
    <item>
      <title>Java 线程 热点文章 2020年10月09日</title>
      <link>https://geek.zshipu.com/post/java/Java-%E7%BA%BF%E7%A8%8B-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A0-2020%E5%B9%B410%E6%9C%8809%E6%97%A5_20201025191937-1ugxb52.sy/</link>
      <pubDate>Fri, 09 Oct 2020 21:58:33 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/Java-%E7%BA%BF%E7%A8%8B-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A0-2020%E5%B9%B410%E6%9C%8809%E6%97%A5_20201025191937-1ugxb52.sy/</guid>
      <description>_Java_多_线程__yucan1234的博客-CSDN博客 11小时前 1.在第二种方法(Runnable)中,ticket输出的顺序并不是54321,这是因为_线程_执行的时机难以预测,ticket–并不是原子操作。 2.在第一种方法中,我们new了3个Thread对&amp;helli</description>
    </item>
    
    <item>
      <title>Java 热点文章 2020年10月09日</title>
      <link>https://geek.zshipu.com/post/java/java-2020-10-09_20201009212438-wf702tx.sy/</link>
      <pubDate>Fri, 09 Oct 2020 21:23:21 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/java-2020-10-09_20201009212438-wf702tx.sy/</guid>
      <description>{: id=&amp;ldquo;20201009212440-g983x85&amp;rdquo;} JAVA-概述_qdzjo的博客-CSDN博客 {: id=&amp;ldquo;20201009212440-tdal81b&amp;rdquo;} 7小时前 为什么是java?_java_语言用途广服务器程序:银行,证券交易平台,电子商务后台…Android应用:安卓手机,各种移动设备,智能家电…软件工具:开发工具eclipes,inetelijidea嵌入式&amp;hellip</description>
    </item>
    
    <item>
      <title>CSS 热点文章：2020年9月第三周</title>
      <link>https://geek.zshipu.com/post/css/CSS-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A02020%E5%B9%B49%E6%9C%88%E7%AC%AC%E4%B8%89%E5%91%A8/</link>
      <pubDate>Sun, 20 Sep 2020 20:41:20 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/css/CSS-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A02020%E5%B9%B49%E6%9C%88%E7%AC%AC%E4%B8%89%E5%91%A8/</guid>
      <description>前端之_CSS_篇 - NQ31 - 博客园 1天前 /内部样式/ Title p{ background-color: red; } /外部样式 将_css_代码写在单独的文件中,再进行引用/ /行内样式/ hello world&amp;hellip; CSS-01入门和语法,选择器。_qq_44715164的博客-CSDN博客 2天前 _css_简单介绍CSS:Cascading Style Sheets:层叠样式</description>
    </item>
    
    <item>
      <title>CSS 热点文章：2020年9月第三周</title>
      <link>https://geek.zshipu.com/post/css/CSS-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A02020%E5%B9%B49%E6%9C%88%E7%AC%AC%E4%B8%89%E5%91%A8_20201025191937-d35umpt.sy/</link>
      <pubDate>Sun, 20 Sep 2020 20:41:20 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/css/CSS-%E7%83%AD%E7%82%B9%E6%96%87%E7%AB%A02020%E5%B9%B49%E6%9C%88%E7%AC%AC%E4%B8%89%E5%91%A8_20201025191937-d35umpt.sy/</guid>
      <description>{: id=&amp;ldquo;20201025191946-c8avgoa&amp;rdquo;} 前端之_CSS_篇 - NQ31 - 博客园 {: id=&amp;ldquo;20201025191940-b0rernu&amp;rdquo;} 1天前 /内部样式/ Title p{ background-color: red; } /外部样式 将_css_代码写在单独的文件中,再进行引用/ /行内样式/ hello world&amp;hellip; {: id=&amp;ldquo;20201025191940-23hy4pj&amp;rdquo;} CSS-01入门和语法,选择器。_qq_44715164的博客-CSDN博客 {: id=&amp;ldquo;20201025191940-b7worjr&amp;rdquo;} 2天前 _css_简单介绍CSS:Cascading Style She</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://geek.zshipu.com/about/</link>
      <pubDate>Tue, 10 Mar 2015 00:13:27 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/about/</guid>
      <description>知识铺,一个知识分享，积累，整理的地方。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://geek.zshipu.com/markd/dubbo/dubbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/markd/dubbo/dubbo/</guid>
      <description> dubbo 1. 服务消费方发起请求 当服务的消费方引用了某远程服务，服务的应用方在spring的配置实例如下：
&amp;lt;dubbo:referenceid=&amp;quot;demoService&amp;quot;interface=&amp;quot;com.alibaba.dubbo.demo.DemoService&amp;quot; /&amp;gt;  demoService实例其实是代理工厂生产的代理对象（大家可以参考代理那部分生成的伪代码），在代码中调用demoService.sayHello(“world!”)时，
 1.1 将方法名方法参数传入InvokerInvocationHandler的invoke方 &amp;gt; 对于Object中的方法toString, hashCode, equals直接调用invoker的对应方法, 这里对于Object的方法需要被远程调用吗？调用了是不是报错比默认处理更好呢？？ 远程调用层是以Invocation, Result为中心， 这里根据要调用的方法以及传入的参数构建RpcInvocation对象，作为Invoker的入参
1.2 MockClusterInvoker根据参数提供了三种调用策略
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://geek.zshipu.com/markd/k8s/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/markd/k8s/k8s/</guid>
      <description>一、环境准备 1、设置主机名hostname，管理节点设置主机名为master  # hostnamectl set-hostname master  设置其他节点主机名称时，可将master替换为正确的主机名node1,node2,node3即可。
2、编辑/etc/hosts文件，添加域名分析 cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;/etc/hosts 192.168.56.10 master 192.168.56.11 node1 192.168.56.12 node2 EOF  3.关闭防火墙、selinux和swap。 依次执行以下操作
 # systemctl stop firewalld # systemctl disable firewalld # setenforce 0 # sed -i &amp;quot;s/^SELINUX=enforcing/SELINUX=disabled/g&amp;quot;/etc/selinux/config # swapoff -a # sed -i &#39;s /.* swap.*/#&amp;amp;/&#39;/etc/fstab  4.配置内核参数，将桥接的IPv4流量传递到iptables的链 cat &amp;gt;/etc/sysctl.d/k8s.conf &amp;lt;&amp;lt;EOF net.bridge.bridge-nf-call-ip6tables =1 net.bridge.bridge-nf-call-iptables =1 EOF  5、配置国内yum源 # yum install -y wget # mkdir /etc/yum.repos.d/bak &amp;amp;&amp;amp; mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/bak # wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repo # wget -O /etc/yum.repos.d/epel.repo http://mirrors.cloud.tencent.com/repo/epel-7.repo # yum clean all &amp;amp;&amp;amp; yum makecache  　配置国内Kubernetes源
cat &amp;lt;&amp;lt;EOF &amp;gt;/etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF   配置 docker 源 # wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo  二、软件安装  注：在所有节点上进行如下操作
1、安装docker # yum install -y docker-ce # systemctl enable docker &amp;amp;&amp;amp; systemctl start docker # docker --version  docker服务为容器运行提供计算资源，是所有容器运行的基本平台。
2、安装kubeadm、kubelet、kubectl # yum install -y kubelet kubeadm kubectl # systemctl enable kubelet Kubelet负责与其他节点集群通信，并进行本节点Pod和容器生命周期的管理。Kubeadm是Kubernetes的自动化部署工具，降低了部署难度，提高效率。Kubectl是Kubernetes集群管理工具，此处注意Kubectl的版本信息，后面会用到！  三、部署master节点 注：在master节点上进行如下操作</description>
    </item>
    
    <item>
      <title></title>
      <link>https://geek.zshipu.com/markd/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/%E5%86%B3%E7%AD%96%E5%BC%95%E6%93%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/markd/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/%E5%86%B3%E7%AD%96%E5%BC%95%E6%93%8E/</guid>
      <description>决策引擎产品介绍 决策引擎承载的是风控业务的专家知识，基于变量和模型的输出，对用户进行分层、用户风险判断、以及用户风险定价的操作。其核心为判断流程的编制。 决策引擎产品提供可视化操作，支持判断逻辑的多种组合，流程链路配置，支持0开发部署上线，使得策略迭代速度能够得到最大的优化。
决策引擎功能模块： 策略画布 ![](imgs/v2-3ac12013d19f5a619d859d84afc03238_720w.jpg
策略画布是一个策略的主干，承担着执行链路配置的功能。画布中主要的组成部分如下：
 开始节点：开始节点为策略执行的第一步，开始节点上定义了策略基本信息，策略code、策略名称、策略版本描述。  ![img](imgs/v2-cb6cc8206e68dae55f8e4b07d490687c_720w.jpg
 缓存变量：缓存变量做为策略的一个临时容器，可以将某些值扔进来存储，以便后续使用。缓存变量的值，最后将作为策略结果进行输出。 节点：策略执行判断承载器，逻辑节点主要作用为 规则执行：逻辑节点绑定了策略中定义好的规则（可以参见组件-规则定义），逻辑节点运行会对规则进行执行，根据规则的结果（rule.result）进行综合输出，作为节点的输出（node.result）。综合逻辑为，取规则结果中最为严重的结果（reject&amp;gt;reference&amp;gt;pass）。 缓存变量赋值：缓存变量赋值主要是将某个执行结果的值赋予缓存变量，作为用户执行路径的记录。例如，走到a节点，用户就是好人；走到b节点，用户就是坏人，依此。 分流：分流作为判断节点下一步走到哪里，是逻辑分流的实现。  ![img](imgs/v2-cb6cc8206e68dae55f8e4b07d490687c_720w.jpg
 分流：  增加分流：可以在图中两个节点A，B之间进行连线，代表A的下一个执行节点为B。一个节点的分流可以有多个（开始节点除外），例如A节点可以和 B、C、D相互连接，形成以下三条路由： A -&amp;gt; B： A -&amp;gt; C： A -&amp;gt; D： 判断如何走到分支，由分流上的判断条件来判断。如下 分流1 A -&amp;gt; B： if judge_1 == true 分流2 A -&amp;gt; C： if judge_2 == ture 分流3 A -&amp;gt; D： 分流判断的条件从上到下顺序执行，满足一条条件则走该分流 最后的分流：示例中的 分流为兜底路由，如果上述两条分流的条件都不满足，则走该条分流。
 结束节点：  ![img](imgs/v2-632bce00462898962a53cb1368221060_720w.jpg
结束节点为最后结束的节点，所有分流都必须走到结束节点。结束节点没有后续连接的节点。结束节点中包含的内容为：输出变量配置，可以绑定的为 策略变量，进行策略变量的输出操作。 最后策略的输出为：
 result：策略判断结果，策略的结果为结束节点上游分支的判断结果 输出参数：结束节点中，输出参数中配置的策略变量，以及对应的值  策略组件 ![img](imgs/v2-fab26a61ecaf023062789890d0478a55_720w.jpg
策略组件有 规则、评分卡、决策表 三个类型构成，具体详情可见组件介绍。 组件血缘：记录了策略中组件相互之间关联的关系，从上最开始的策略到最下面的变量。依据血缘的引用，定义了组件的 引用和使用这两种状态：
 是否引用：组件的输出，是否被其他组件使用（往上走） 是否使用：是否使用：向上走是否能够走到某一节点  ![img](imgs/v2-5d3532a1540542b2b34cf9a872ded799_720w.jpg
血缘的引用关系将会在组件的修改过程中被检查：
 组件删除：需要检查该组件是否引用，防止删除之后程序不能运行 组件的输出删除：例如决策表的输出，输出如果被其他地方使用，该输出则不能删除  策略组件-规则 ![img](imgs/v2-74857caaaf3a0f98ba80329f9cbc2c94_720w.jpg
规则配置： 规则执行的是if…then…语句的判断，可以进行的操作有：配置 if的多层嵌套，条件可以是 并（and） 以及 或（or）。
![img](imgs/v2-405ff8374f06eaff6a71ace36571ee66_720w.jpg
上图中的执行语表示为：if { 1 and 2 and 3 and { 4 or 5 or 6}} 判断语句下拉框会根据选择的变量类型，来选择对应的匹配符，如果是数值型的变量，则提供 数值型判断（=, !=, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=），如果是文本型的变量则提供（in，not in，contain，not contain，is null，is notnull，==，!=，~=）。 规则执行判断： 规则执行中一行条件为一个执行单位，执行单位根据组合的规则是否命中决定最后结果。一条规则中会有多个执行单位，规则将对执行单位的结果进行汇总，汇总的逻辑为 取最为严重的结果，如果执行单位中有 一个为reject，则规则结果为 reject。如果执行单位中 没有reject，执行单位中 有一个为 reference，则规则结果为 reference。如果执行单位结果全部为 pass，则最后结果为 pass。
策略组件-决策表 ![img](imgs/v2-d71ef33b3f4daea4080fcfe6a03216f5_720w.jpg
决策表介绍，决策表提供的是变量交叉组合之后给予特定结果。 决策表配置：决策表配置是以表格为基础的，每一列都有一个变量，分为输入和输出。每一行，是一个判断条件组合，表示 如果（变量1 条件， 变量2 条件，变量3 条件，…）都满足则，执行 输出（输出变量 =1， 输出变量 =2）。 决策表的变量支持：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://geek.zshipu.com/post/framework/%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E5%85%A8%E9%9D%A2k8s%E5%8C%96%E7%9A%84%E9%9B%86%E7%BE%A4%E7%A8%B3%E5%AE%9A%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/framework/%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E5%85%A8%E9%9D%A2k8s%E5%8C%96%E7%9A%84%E9%9B%86%E7%BE%A4%E7%A8%B3%E5%AE%9A%E6%9E%B6%E6%9E%84/</guid>
      <description> 我司的集群时刻处于崩溃的边缘，通过近三个月的掌握，发现我司的集群不稳定的原因有以下几点：
1、发版流程不稳定
2、缺少监控平台【最重要的原因】
3、缺少日志系统
4、极度缺少有关操作文档
5、请求路线不明朗
总的来看，问题的主要原因是缺少可预知的监控平台，总是等问题出现了才知道。次要的原因是服务器作用不明朗和发版流程的不稳定。
解决方案 发版流程不稳定 重构发版流程。业务全面k8s化，构建以kubernetes为核心的ci/cd流程。
发版流程 有关发版流程如下：
image.png
浅析：研发人员提交代码到developer分支(时刻确保developer分支处于最新的代码)，developer分支合并到需要发版环境对应的分支，触发企业微信告警，触发部署在k8s集群的gitlab-runner pod，新启runner pod 执行ci/cd操作。在这个过程中需要有三个步骤：测试用例、打包镜像、更新pod。
第一次部署服务在k8s集群环境的时候可能需要：创建namespace、创建imagepullsecret、创建pv(storageclass)、创建deployment（pod controller）、创建svc、创建ingress、等。其中镜像打包推送阿里云仓库和从阿里云仓库下载镜像使用vpc访问，不走公网，无网速限制。流程完毕，runner pod 销毁，gitlab 返回结果。
需要强调的一点是，在这里的资源资源清单不包含configmap或者secret，牵扯到安全性的问题，不应该出
现在代码仓库中，我司是使用rancher充当k8s多集群管理平台，上述安全问题在rancher的dashboard中由运维来做的。
服务部署逻辑图 有关服务部署逻辑图如下：
image.png
根据发版流程的浅析，再根据逻辑图可以明确发版流程。在这里看到我司使用的是kong代替nginx，做认证、鉴权、代理。而slb的ip绑定在kong上。0，1，2属于test job；3属于build job；4，5，6，7属于change pod 阶段。并非所有的服务都需要做存储，需要根据实际情况来定，所以需要在kubernetes.sh里写判断。
在这里我试图使用一套CI应用与所有的环境，所以需要在kubernetes.sh中用到的判断较多，且.gitlab-ci.yml显得过多。建议是使用一个ci模版，应用于所有的环境，毕竟怎么省事怎么来。还要考虑自己的分支模式。
具体参考：
 https://www.cnblogs.com/zisefeizhu/p/13621797.html
 缺少监控预警平台 构建可信赖且符合我司集群环境的联邦监控平台，实现对几个集群环境的同时监控和预故障告警，提前介入。
监控预警逻辑图 有关监控预警逻辑图如下：
image.png
浅析：总的来说，我这里使用到的监控方案是prometheus+shell脚本或go脚本+sentry。使用到的告警方式是企业微信或者企业邮箱。
上图三种颜色的线代表三种监控方式需要注意。脚本主要是用来做备份告警、证书告警、抓贼等。prometheus这里采用的是根据prometheus-opertor修改的prometheus资源清单，数据存储在nas上。
sentry严格的来讲属于日志收集类的平台，在这里我将其归为监控类，是因为我看中了其收集应用底层代码的崩溃信息的能力，属于业务逻辑监控, 旨在对业务系统运行过程中产生的错误日志进行收集归纳和监控告警。
注意这里使用的是联邦监控平台，而部署普通的监控平台。
联邦监控预警平台逻辑图 多集群联邦监控预警平台逻辑图如下：
image.png
因为我司有几个k8s集群，如果在每个集群上都部署一套监控预警平台的话，管理起来太过不便，所以这里我采取的策略是使用将各监控预警平台实行一个联邦的策略，使用统一的可视化界面管理。
这里我将实现三个级别饿监控：操作系统级、应用程序级、业务级。对于流量的监控可以直接针对kong进行监控，模版7424。
缺少日志系统 随着业务全面k8s化进程的推进，对于日志系统的需求将更加渴望，k8s的特性是服务的故障日志难以获取。建立可观测的能过滤的日志系统可以降低对故障的分析难度。
有关日志系统逻辑图如下：
image.png
浅析：在业务全面上k8s化后，方便了管理维护，但对于日志的管理难度就适当上升了。我们知道pod的重启是有多因素且不可控的，而每次pod重启都会重新记录日志，即新pod之前的日志是不可见的。
当然了有多种方法可以实现日志长存：远端存储日志、本机挂载日志等。出于对可视化、可分析等的考虑，选择使用elasticsearch构建日志收集系统。
极度缺少有关操作文档 建立以语雀&amp;ndash;&amp;gt; 运维相关资料为中心的文档中心，将有关操作、问题、脚本等详细记录在案，以备随时查看。
image.png
浅析因安全性原因，不便于过多同事查阅。运维的工作比较特殊，安全化、文档化是必须要保障的。我认为不论是运维还是运维开发，书写文档都是必须要掌握的，为己也好，为他也罢。文档可以简写，但必须要含苞核心的步骤。我还是认为运维的每一步操作都应该记录下来。
请求路线不明朗 根据集群重构的新思路，重新梳理集群级流量请求路线，构建具备：认证、鉴权、代理、连接、保护、控制、观察等一体的流量管理，有效控制故障爆炸范围。
请求路线逻辑图如下：
image.png
浅析：客户访问https://www.cnblogs.com/zisefeizhu 经过kong网关鉴权后进入特定名称空间(通过名称空间区分项目)，因为服务已经拆分为微服务，服务间通信经过istio认证、授权，需要和数据库交互的去找数据库，需要写或者读存储的去找pv，需要转换服务的去找转换服务&amp;hellip;&amp;hellip; 然后返回响应。
总结 综上所述，构建以：以kubernetes为核心的ci/cd发版流程、以prometheus为核心的联邦监控预警平台、以elasticsearch为核心的日志收集系统、以语雀为核心的文档管理中心、以kong及istio为核心的南北东西流量一体化服务，可以在高平发，高可靠性上做到很好保障。
附：总体架构逻辑图
image.png
注：请根据箭头和颜色来分析。
浅析：上图看着似乎过于混乱，静下心来，根据上面的拆分模块一层层分析还是可以看清晰的。这里我用不同颜色的连线代表不同模块的系统，根据箭头走还是蛮清晰的。
根据我司目前的业务流量，上述功能模块，理论上可以实现集群的维稳。私认为此套方案可以确保业务在k8s集群上稳定的运行一段时间，再有问题就属于代码层面的问题了。
这里没有使用到中间件，倒是使用到了缓存redis不过没画出来。我规划在上图搞定后再在日志系统哪里和转换服务哪里增加个中间件kafka或者rq 看情况吧。
END 推荐好文 强大，10k+点赞的 SpringBoot 后台管理系统竟然出了详细教程！ 分享一套基于SpringBoot和Vue的企业级中后台开源项目，代码很规范！能挣钱的，开源 SpringBoot 商城系统，功能超全，超漂亮！  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://geek.zshipu.com/post/java/Java-%E9%9D%A2%E8%AF%95-150%E5%88%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E8%AE%A9%E4%BD%A0%E7%9B%B4%E6%8E%A5%E6%8B%BF%E5%88%B0offer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/java/Java-%E9%9D%A2%E8%AF%95-150%E5%88%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E8%AE%A9%E4%BD%A0%E7%9B%B4%E6%8E%A5%E6%8B%BF%E5%88%B0offer/</guid>
      <description>title: Java 面试 150到面试题及答案让你直接拿到offer author: 知识铺 date: 2021-10-03 11:33:33 tags: [Java]
1. 什么是Java？ Java 是一种计算机编程语言，具有并发性、基于类和对象导向。对象导向软件开发的优势如下：
 代码的模块化开发，便于维护和修改。 代码的可重复性。 提高了代码的可靠性和灵活性。 加深对代码的理解。  2. OOP 的概念是什么？ 对象导向编程 （OOP） 包括：
 抽象化 封装 多态性 Inheritance 预定义的类型必须是对象 用户定义的类型必须是对象 操作必须通过向对象发送消息来执行  3. 提及Java的某些功能 在 java 的流行中发挥重要作用的一些功能如下：
 对象导向 独立平台 高性能 多线程 便携式 安全  java 中的 Helloworld 示例代码如下所示：
世界好
public class Helloworld{ public static void main(String args[]) { System.out.println(&amp;quot;Hello World&amp;quot;); } }  4. Java 是否 100% 面向对象？ 不是 100%Java 不满足所有 OOP 条件（预定义的类型必须是对象），因为它使用八种原始数据类型（Boolean、字节、字符、int、浮子、双、长、短）这些数据类型不是对象。
5. 什么是抽象？ 抽象是将想法与特定实例分离的过程，因此，根据它们自己的功能而不是实施细节来发展课程。Java 支持创建和存在暴露界面的抽象类，但不包括所有方法的实际实现。抽象技术旨在将一个类的实现细节与其行为分开。
摘要类 人如下。它有一个抽象的方法得到名。
抽象类人
public abstract class Person { public abstract String getName(); }  员工类扩展抽象类人员。方法获取名称返回员工的姓名属性。
员工类
public class Employee extends Person { private String name; public Employee(String name) { this.name = name; } public String getName() { return this.name; } public static void main (String args[]) { Employee employee = new Employee(&amp;quot;John Wilson&amp;quot;); System.out.println(&amp;quot;Employee&#39;s Name &amp;quot;+ employee.getName()); Person person = new Employee(&amp;quot;Thomas Smith&amp;quot;); System.</description>
    </item>
    
    <item>
      <title>flutter NoMethodError - undefined method `size&#39; for nil:NilClass错误排查</title>
      <link>https://geek.zshipu.com/post/flutter/flutter-pod-nil-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/post/flutter/flutter-pod-nil-class/</guid>
      <description>错误描述: pod install时发生错误 ### Error ​``` NoMethodError - undefined method `size&#39; for nil:NilClass /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho/macho_file.rb:455:in `populate_mach_header&#39; /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho/macho_file.rb:233:in `populate_fields&#39; /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho/macho_file.rb:55:in `initialize_from_bin&#39; /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho/macho_file.rb:33:in `new_from_bin&#39; /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho/fat_file.rb:365:in `block in populate_machos&#39; /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho/fat_file.rb:364:in `each&#39; /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho/fat_file.rb:364:in `populate_machos&#39; /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho/fat_file.rb:156:in `populate_fields&#39; /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho/fat_file.rb:95:in `initialize&#39; /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho.rb:31:in `new&#39; /Library/Ruby/Gems/2.6.0/gems/ruby-macho-1.4.0/lib/macho.rb:31:in `open&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/xcode/linkage_analyzer.rb:16:in `dynamic_binary?&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/sandbox/file_accessor.rb:171:in `block in vendored_dynamic_frameworks&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/sandbox/file_accessor.rb:170:in `select&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/sandbox/file_accessor.rb:170:in `vendored_dynamic_frameworks&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/sandbox/file_accessor.rb:179:in `vendored_static_frameworks&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/sandbox/file_accessor.rb:292:in `vendored_static_artifacts&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/installer/xcode/target_validator.rb:82:in `each&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/installer/xcode/target_validator.rb:82:in `flat_map&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/installer/xcode/target_validator.rb:82:in `block (2 levels) in verify_no_static_framework_transitive_dependencies&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/installer/xcode/target_validator.rb:74:in `each_key&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/installer/xcode/target_validator.rb:74:in `block in verify_no_static_framework_transitive_dependencies&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/installer/xcode/target_validator.rb:73:in `each&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/installer/xcode/target_validator.rb:73:in `verify_no_static_framework_transitive_dependencies&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/installer/xcode/target_validator.rb:38:in `validate!&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/installer.rb:595:in `validate_targets&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/installer.rb:162:in `install!&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/command/install.rb:52:in `run&#39; /Library/Ruby/Gems/2.6.0/gems/claide-1.0.3/lib/claide/command.rb:334:in `run&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/lib/cocoapods/command.rb:52:in `run&#39; /Library/Ruby/Gems/2.6.0/gems/cocoapods-1.10.0/bin/pod:55:in `&amp;lt;top (required)&amp;gt;&#39; /usr/local/bin/pod:23:in `load&#39; /usr/local/bin/pod:23:in `&amp;lt;main&amp;gt;&#39; ​``` ――― TEMPLATE END ―――――――――――――――――――――――</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://geek.zshipu.com/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://geek.zshipu.com/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://geek.zshipu.com/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>